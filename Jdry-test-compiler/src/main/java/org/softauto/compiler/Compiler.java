package org.softauto.compiler;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.softauto.analyzer.directivs.argument.Argument;
import org.softauto.analyzer.directivs.request.Request;
import org.softauto.analyzer.model.suite.Suite;
import org.softauto.analyzer.core.system.config.Configuration;
import org.yaml.snakeyaml.Yaml;

import java.io.*;
import java.nio.file.Files;
import java.util.*;

import static java.nio.charset.StandardCharsets.UTF_8;

public class Compiler {

    private static final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Compiler.class);

    private VelocityEngine velocityEngine;
    private List<Object> additionalVelocityTools = Collections.emptyList();
    private String templateDir;
    private String suffix = ".java";
    private String outputCharacterEncoding;
    private Suite suite;
    //VelocityContext context = new VelocityContext();

    public static final Set<String> RESERVED_WORDS = new HashSet<>(
            Arrays.asList("abstract", "assert", "boolean", "break", "byte", "case", "catch", "char", "class", "const",
                    "continue", "default", "do", "double", "else", "enum", "extends", "false", "final", "finally", "float", "for",
                    "goto", "if", "implements", "import", "instanceof", "int", "interface", "long", "native", "new", "null",
                    "package", "private", "protected", "public", "return", "short", "static", "strictfp", "super", "switch",
                    "synchronized", "this", "throw", "throws", "transient", "true", "try", "void", "volatile", "while",
                    /* classnames use internally by the avro code generator */
                    "Builder"));


    private static final Set<String> ERROR_RESERVED_WORDS = new HashSet<>(Arrays.asList("message", "cause"));

    private static final String FILE_HEADER = "/**\n" + " * Autogenerated by Avro\n" + " *\n"
            + " * DO NOT EDIT DIRECTLY\n" + " */\n";

    Compiler() {
        this.templateDir = System.getProperty("org.apache.avro.specific.templates",
                "resources/velocity/");
        initializeVelocity();

    }

    static final JsonFactory FACTORY = new JsonFactory();
    static final ObjectMapper MAPPER = new ObjectMapper(FACTORY);

    static {
        FACTORY.enable(JsonParser.Feature.ALLOW_COMMENTS);
        FACTORY.setCodec(MAPPER);
    }

    public Compiler(Suite suite){
        this.templateDir = System.getProperty("org.apache.avro.specific.templates",
                "src/main/resources/velocity/");
        initializeVelocity();
        this.suite = suite;
        logger.debug("set templateDir to src/main/resources/velocity/");
    }

    private void initializeVelocity() {
        this.velocityEngine = new VelocityEngine();

        // These properties tell Velocity to use its own classpath-based
        // loader, then drop down to check the root and the current folder
        velocityEngine.addProperty("resource.loaders", "class, file");
        velocityEngine.addProperty("resource.loader.class.class",
                "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");
        velocityEngine.addProperty("resource.loader.file.class",
                "org.apache.velocity.runtime.resource.loader.FileResourceLoader");
        velocityEngine.addProperty("resource.loader.file.path", "/, .");
        velocityEngine.setProperty("runtime.strict_mode.enable", true);
        velocityEngine.addProperty("userdirective", "org.softauto.compiler.directive.Serialize");
        velocityEngine.addProperty("userdirective", "org.softauto.compiler.directive.Deserialize");
        velocityEngine.addProperty("userdirective", "org.softauto.compiler.directive.ValidateReturnType");
        // Set whitespace gobbling to Backward Compatible (BC)
        // https://velocity.apache.org/engine/2.0/developer-guide.html#space-gobbling
        velocityEngine.setProperty("parser.space_gobbling", "bc");
        //context.put("jdryTools", JdryVelocityTool.class);

    }

    public void setAdditionalVelocityTools(List<Object> additionalVelocityTools) {
        this.additionalVelocityTools = additionalVelocityTools;
    }

    static class OutputFile {
        String path;
        String contents;
        String outputCharacterEncoding;

        /**
         * Writes output to path destination directory when it is newer than src,
         * creating directories as necessary. Returns the created file.
         */
        File writeToDestination(File src, File destDir) throws IOException {
            File f = new File(destDir, path);
            if (src != null && f.exists() && f.lastModified() >= src.lastModified())
                return f; // already up to date: ignore
            f.getParentFile().mkdirs();
            Writer fw = null;
            FileOutputStream fos = null;
            try {
                if (outputCharacterEncoding != null) {
                    fos = new FileOutputStream(f);
                    fw = new OutputStreamWriter(fos, outputCharacterEncoding);
                } else {
                    fw = Files.newBufferedWriter(f.toPath(), UTF_8);
                }
                fw.write(FILE_HEADER);
                fw.write(contents);
            } finally {
                if (fw != null)
                    fw.close();
                if (fos != null)
                    fos.close();
            }
            return f;
        }
    }

    public static String mangle(String word) {
        return mangle(word, false);
    }

    /** Utility for template use. Adds a dollar sign to reserved words. */
    public static String mangle(String word, boolean isError) {
        return mangle(word, isError ? ERROR_RESERVED_WORDS : RESERVED_WORDS);
    }

    /** Utility for template use. Adds a dollar sign to reserved words. */
    public static String mangle(String word, Set<String> reservedWords) {
        return mangle(word, reservedWords, false);
    }

    /** Utility for template use. Adds a dollar sign to reserved words. */
    public static String mangle(String word, Set<String> reservedWords, boolean isMethod) {
        if (word.contains(".")) {
            // If the 'word' is really a full path of a class we must mangle just the
            // classname
            int lastDot = word.lastIndexOf(".");
            String packageName = word.substring(0, lastDot + 1);
            String className = word.substring(lastDot + 1);
            return packageName + mangle(className, reservedWords, isMethod);
        }
        if (reservedWords.contains(word) || (isMethod && reservedWords
                .contains(Character.toLowerCase(word.charAt(0)) + ((word.length() > 1) ? word.substring(1) : "")))) {
            return word + "$";
        }
        return word;
    }

    public static void compileSuite(File src, File dest) throws IOException {
        compileSuite(new File[] { src }, dest);
    }

    public static void compileInterface(File src, File dest) throws IOException {
        compileInterface(new File[] { src }, dest);
    }

    public static void compileListenerInterface(File src, File dest) throws IOException {
        compileListenerInterface(new File[] { src }, dest);
    }
    /**
     * Generates Java interface and classes for a number of protocol files.
     *
     * @param srcFiles the source Avro protocol files
     * @param dest     the directory to place generated files in
     */
    public static void compileSuite(File[] srcFiles, File dest) throws IOException {
        for (File src : srcFiles) {
            Suite suite = Suite.parse(src);
            Compiler compiler = new Compiler(suite);
            compiler.compileToDestination(src, dest);
            logger.debug("compile successfully " + src.getName());
        }

    }

    public static void compileInterface(File[] srcFiles, File dest) throws IOException {
        for (File src : srcFiles) {
            Suite suite = Suite.parse(src);
            Compiler compiler = new Compiler(suite);
            compiler.compileToInterface(src, dest);
            logger.debug("compile successfully " + src.getName());
        }

    }

    public static void compileListenerInterface(File[] srcFiles, File dest) throws IOException {
        for (File src : srcFiles) {
            Suite suite = Suite.parse(src);
            Compiler compiler = new Compiler(suite);
            compiler.compileToListenerInterface(src, dest);
            logger.debug("compile successfully " + src.getName());
        }

    }

    public void compileToDestination(File src, File dst) throws IOException {
        if (suite != null) {
            compile(suite).writeToDestination(src, dst);
        }
    }

    public void compileToInterface(File src, File dst) throws IOException {
        if (suite != null) {
            compileInterface(suite).writeToDestination(src, dst);
        }
    }

    public void compileToListenerInterface(File src, File dst) throws IOException {
        if (suite != null) {
            compileListenerInterface(suite).writeToDestination(src, dst);
        }
    }

    private String renderTemplate(String templateName, VelocityContext context) {
        Template template;
        try {
            template = this.velocityEngine.getTemplate(templateName);
        } catch (Exception e) {
            logger.error("fail rendering template ",e);
            throw new RuntimeException(e);
        }
        StringWriter writer = new StringWriter();
        template.merge(context, writer);
        logger.debug("render template successfully " + templateName);
        return writer.toString();
    }

    OutputFile compile(Suite suite) {
        VelocityContext context = new VelocityContext();
        context.put("suite", suite);
        context.put("this", this);
        for (Object velocityTool : additionalVelocityTools) {
            String toolName = velocityTool.getClass().getSimpleName().toLowerCase();
            context.put(toolName, velocityTool);
        }
        String out = renderTemplate(templateDir + "suite.vm", context);

        OutputFile outputFile = new OutputFile();
        String mangledName = mangle(suite.getName());
        outputFile.path = makePath(mangledName, suite.getNamespace());
        outputFile.contents = out;
        outputFile.outputCharacterEncoding = outputCharacterEncoding;
        logger.debug("write output to " + outputFile);
        return outputFile;
    }


    OutputFile compileInterface(Suite suite) {
        VelocityContext context = new VelocityContext();
        context.put("suite", suite);
        context.put("this", this);
        for (Object velocityTool : additionalVelocityTools) {
            String toolName = velocityTool.getClass().getSimpleName().toLowerCase();
            context.put(toolName, velocityTool);
        }
        String out = renderTemplate(templateDir + "interface.vm", context);

        OutputFile outputFile = new OutputFile();
        String mangledName = mangle(suite.getName()+"Service");
        outputFile.path = makePath(mangledName, suite.getNamespace());
        outputFile.contents = out;
        outputFile.outputCharacterEncoding = outputCharacterEncoding;
        logger.debug("write output to " + outputFile);
        return outputFile;
    }

    OutputFile compileListenerInterface(Suite suite) {
        VelocityContext context = new VelocityContext();
        context.put("suite", suite);
        context.put("this", this);
        for (Object velocityTool : additionalVelocityTools) {
            String toolName = velocityTool.getClass().getSimpleName().toLowerCase();
            context.put(toolName, velocityTool);
        }
        String out = renderTemplate(templateDir + "listenerInterface.vm", context);

        OutputFile outputFile = new OutputFile();
        String mangledName = mangle(suite.getName()+"ListenerService");
        outputFile.path = makePath(mangledName, suite.getNamespace());
        outputFile.contents = out;
        outputFile.outputCharacterEncoding = outputCharacterEncoding;
        logger.debug("write output to " + outputFile);
        return outputFile;
    }



    // package private for testing purposes
    String makePath(String name, String space) {
        if (space == null || space.isEmpty()) {
            return name + suffix;
        } else {
            return space.replace('.', File.separatorChar) + File.separatorChar + name + suffix;
        }
    }

    public static String javaEscape(String o) {
        if(o != null) {
            return o.replace("\\", "\\\\").replace("\"", "\\\"");
        }
        return null;
    }

    public static void main(String[] args) throws Exception {
        loadConfiguration(args);
        logger.info("-------------- start tests compiler ---------------- ");
        //compileSuite(new File(args[0]), new File(args[1]));
        compileInterface(new File(args[0]), new File(args[1]));
        compileListenerInterface(new File(args[0]), new File(args[1]));
        logger.debug("input file "+ args[0]);
        logger.debug("output file "+ args[1]);
        logger.info("tests compile finsh successfully");
    }


    public static void loadConfiguration(String[] args){
        try {
            Yaml yaml = new Yaml();
            String path = null;
            if(args.length == 3 ){
                path = args[2];
            }
            if(path == null || path.isEmpty()){
                path = System.getProperty("user.dir") + "/rules.yaml";
            }
            if (new File(path).isFile()) {
                HashMap<String, Object> map = (HashMap<String, Object>) yaml.load(new FileReader(path));
                Configuration.setConfiguration(map);
            }
            logger.debug("Configuration load successfully");
        }catch (Exception e){
            logger.error("fail loadConfiguration ",e);
        }
    }

    public void setOutputCharacterEncoding(String outputCharacterEncoding) {
        this.outputCharacterEncoding = outputCharacterEncoding;
    }

    public String capitalizeFirstLetter(String str){
        return str.toUpperCase().charAt(0)+str.substring(1,str.length());
    }

    public String unCapitalizeFirstLetter(String str){
        return str.toLowerCase().charAt(0)+str.substring(1,str.length());
    }

    public static String getJavaStringFullName(String str){
        return str.replace(".","_");
    }

    public static boolean isPrimitive(String name){
       String str = name;
        if(name.contains(".")){
           str = name.substring(name.lastIndexOf(".")+1);
       }

        if(PRIMITIVES.contains(str)){
           return true;
       }
        return false;
    }

    static final List<String> PRIMITIVES = new ArrayList<>();
    static {
        //PRIMITIVES.add("string");
        PRIMITIVES.add("bytes");
        PRIMITIVES.add("int");
        //PRIMITIVES.add("integer");
        PRIMITIVES.add("long");
        PRIMITIVES.add("float");
        PRIMITIVES.add("double");
        PRIMITIVES.add("boolean");
       PRIMITIVES.add("void");
    }

    public String getDefaultValue(String type){
        switch (type){
            case "int" :
            case "double" :
            case "float" :
            case "long" :return "-1";
            case "boolean" : return "false";
            default: return "null";
        }
    }

    public static String toObject( String clazz, String value ) {

        String str = clazz.toLowerCase();
        if(clazz.contains(".")){
            str = clazz.substring(clazz.lastIndexOf(".")+1).toLowerCase();
        }
        if(value.endsWith(";")){
            value = value.substring(0,value.length()-1);
        }
        if(NumberUtils.isCreatable(value)){
            return value;
        }
        if(value.toLowerCase().equals("false") || value.toLowerCase().equals("true")){
            return value;
        }


        if( str.equals("boolean") ) return "Boolean.parseBoolean("+ value +");";
        if( str.equals("byte") ) return "Byte.parseByte("+ value +");";
        if( str.equals("short") ) return "Short.parseShort("+ value +");";
        if( str.equals("integer") ) return "Integer.parseInt("+ value + ");";
        if( str.equals("long" ) ) return "Long.parseLong("+ value +");";
        if( str.equals("float") ) return "Float.parseFloat(" +  value +");";
        if( str.equals("double") ) return "Double.parseDouble("+ value + ");";
        if( str.equals("string") ) return "String.valueOf("+ value + ");";
        return value+";";
    }

    public static String toObject( String clazz ) {

        String str = clazz.toLowerCase();
        if(clazz.contains(".")){
            str = clazz.substring(clazz.lastIndexOf(".")+1).toLowerCase();
        }

        if( str.equals("boolean") ) return "Boolean";
        if( str.equals("byte") ) return "Byte";
        if( str.equals("short") ) return "Short";
        if( str.equals("integer") ) return "Integer;";
        if( str.equals("long" ) ) return "Long";
        if( str.equals("float") ) return "Float";
        if( str.equals("double") ) return "Double";
        if( str.equals("string") ) return "String";
        return clazz;
    }


    public boolean startWith(String tag,String str){
        if(str.startsWith(tag)){
            return true;
        }
        return false;
    }

    public String removeTag(String tag,String str){
        return str.replace(tag,"");
    }


    public boolean isJson(String str){
        try {
            if(str.startsWith("\"{") || str.startsWith("{") || str.startsWith("[{") || str.startsWith("\"[{")) {
                //new ObjectMapper().readTree(str);
                return true;
            }else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
        //return true;
    }

    public Object convertToJson(Object str){
        try {
            if(str instanceof Map) {
                return new ObjectMapper().writeValueAsString(str);
            }
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        return str;
    }

    public String removeCarriageReturn(String s){
        return s.replaceAll("[\\n\\r]", "");
    }

    public static String getShortName(String fullName){
        if(fullName.contains(".")){
            return fullName.substring(fullName.lastIndexOf(".")+1);
        }
        return fullName;
    }

    public String rmDollar(String s){
        if(s.contains("$")){
            return s.replace("$",".");
        }
        return s;
    }


    public Map<String,Object> buildArgumentNameList(Argument argument){
        Map<String,Object> args = new HashMap<>();
        for(int i=0;i<argument.getValues().size();i++){
            if(argument.getValues().size() > 1) {
                args.put(argument.getName() + i, argument.getValue(i));
            }else {
                args.put(argument.getName() , argument.getValue(i));
            }
        }
        return args;
    }

    /*
    public Map<String,Object> buildResultNameList(Argument argument){
        Map<String,Object> args = new HashMap<>();
        for(int i=0;i<argument.getValues().size();i++){
            if(argument.getValues().size() >1) {
                args.put("expected" + i, argument.getValue(i));
            }else {
                args.put("expected" , argument.getValue(i));
            }
        }
        return args;
    }

     */

    public int getRequestValueSize(Request request) {
        if (request.getArguments().size() > 0) {
            for (Argument argument : request.getArguments()) {
                if (!argument.isCallback()) {
                    return argument.getValues().size();
                }
            }
        }
        return -1;
    }

        public List<String> buildRequestParameterList(Request request){
            List<String> bList = new ArrayList<>();
            int size = getRequestValueSize(request);
            for(int i=0;i<size;i++) {
                List<String> aList = new ArrayList<>();
                for (Argument argument : request.getArguments()) {
                    if (!argument.isCallback() && argument.getValues().size() > 1) {
                        aList.add(argument.getName() + i);
                    } else {
                        aList.add(argument.getName());
                    }
                }
                /*
                if (size > 1){
                    aList.add("expected" + i);
                }else {
                    aList.add("expected" );
                }
                    aList.add("callOption");

                 */
                    String str = StringUtils.join(aList, ",");
                    bList.add(str);
            }
            return bList;
        }



/*
    public List<String> buildRequestParameterList(Request request){
        List<String> blist = new ArrayList<>();
        try {
            if(request.getArguments().size() > 0) {
                List<List<String>> list = buildParameterList(request);
                for (int j = 0; j < list.get(0).size(); j++) {
                    List<String> aList = new ArrayList<>();
                    for (int i = 0; i < list.size(); i++) {
                        if(list.get(i).size() == 1){
                            aList.add( list.get(i).get(0));
                        }else {
                            aList.add(list.get(i).get(j));
                        }
                        //aList.add("expected"+i);
                    }

                        aList.add("expected" + j);
                        aList.add("callOption");
                        String str = StringUtils.join(aList, ",");
                        blist.add(str);
                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return blist;
    }


    public List<List<String>> buildParameterList(Request request){
        List<List<String>> list = new ArrayList<>();
        for(Argument argument : request.getArguments()) {
            List<String> list1 = new ArrayList<>();
            for (int i = 0; i < argument.getValues().size(); i++) {
                if(!argument.isCallback()) {
                    String name = argument.getName() + i;
                    list1.add(name);
                }else {
                    list1.add(argument.getName());
                }
            }
            list.add(list1);
        }
        return list;
    }

 */

    public  String getRequestAsArrayTypesString(List<Argument> request){
        if(request != null) {
            List<String> types = new ArrayList<>();
            for (int i = 0; i < request.size(); i++) {
                types.add(request.get(i).getType() + ".class");
            }

            String joinedString = StringUtils.join(types, ",");
            return "new Class[]{" + joinedString + "}";
        }
        return "new Class[]{}";
    }

    public  String getListStringAsArrayTypesString(List<String> request){
        if(request != null) {
            List<String> types = new ArrayList<>();
            for (int i = 0; i < request.size(); i++) {
                types.add(request.get(i) + ".class");
            }

            String joinedString = StringUtils.join(types, ",");
            return "new Class[]{" + joinedString + "}";
        }
        return "new Class[]{}";
    }


    public  String getRequestNamesAsArrayString(List<String> request){
        if(request != null) {
            List<String> names = new ArrayList<>();
            for (int i = 0; i < request.size(); i++) {
                String name = null;
                if(request.get(i) != null ){
                    name = request.get(i);
                }else {
                    name = "arg" + i;
                }
                names.add(name);
            }
            String joinedString = StringUtils.join(names, ",");
            return "new Object[]{" + joinedString + "}";
        }
        return "new Object[]{}";
    }


    public  String getRequestNamesAsArrayString(String args){
        if(args != null) {
            return "new Object[]{" + args + "}";
        }
        return "new Object[]{}";
    }

    public String primitiveToObject(String type){
        try {
            if(type.equals("void")){
                return "Void";
            }
            Class c = ClassUtils.getClass(type);
            return ClassUtils.primitiveToWrapper(c).getTypeName();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }
}
