package org.softauto.compiler;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

import java.io.*;
import java.nio.file.Files;
import java.util.*;

import static java.nio.charset.StandardCharsets.UTF_8;

public class Compiler {

    private static final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(Compiler.class);
    private static final Marker JDRY = MarkerManager.getMarker("JDRY");
    private VelocityEngine velocityEngine;
    private List<Object> additionalVelocityTools = Collections.emptyList();
    private static String templateDir;
    private String suffix = ".java";
    private String outputCharacterEncoding;

    private static ObjectNode suite = new ObjectMapper().createObjectNode();

    private static ArrayNode steps = new ObjectMapper().createArrayNode();

    private static ArrayNode listeners = new ObjectMapper().createArrayNode();

    private static String name;

    private static String namespace;

    public static final Set<String> RESERVED_WORDS = new HashSet<>(
            Arrays.asList("abstract", "assert", "boolean", "break", "byte", "case", "catch", "char", "class", "const",
                    "continue", "default", "do", "double", "else", "enum", "extends", "false", "final", "finally", "float", "for",
                    "goto", "if", "implements", "import", "instanceof", "int", "interface", "long", "native", "new", "null",
                    "package", "private", "protected", "public", "return", "short", "static", "strictfp", "super", "switch",
                    "synchronized", "this", "throw", "throws", "transient", "true", "try", "void", "volatile", "while",
                    /* classnames use internally by the avro code generator */
                    "Builder"));


    private static final Set<String> ERROR_RESERVED_WORDS = new HashSet<>(Arrays.asList("message", "cause"));

    private static final String FILE_HEADER = "/**\n" + " * Autogenerated by Avro\n" + " *\n"
            + " * DO NOT EDIT DIRECTLY\n" + " */\n";



    static final JsonFactory FACTORY = new JsonFactory();
    static final ObjectMapper MAPPER = new ObjectMapper(FACTORY);

    public static void setTemplateDir(String path){
        Compiler.templateDir = System.getProperty("org.apache.avro.specific.templates",
                path);
    }

    static {
        FACTORY.enable(JsonParser.Feature.ALLOW_COMMENTS);
        FACTORY.setCodec(MAPPER);
    }

    public Compiler(){
        if(templateDir == null){
           this.templateDir = System.getProperty("org.apache.avro.specific.templates",
              "jdry-compiler/src/main/resources/velocity/");
        }

        initializeVelocity();
        logger.debug(JDRY,"set templateDir to " +templateDir);
    }

    private void initializeVelocity() {
        this.velocityEngine = new VelocityEngine();

        velocityEngine.addProperty("resource.loaders", "class, file");
        velocityEngine.addProperty("resource.loader.class.class",
                "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");
        velocityEngine.addProperty("resource.loader.file.class",
                "org.apache.velocity.runtime.resource.loader.FileResourceLoader");
        velocityEngine.addProperty("resource.loader.file.path", "/, .");
        velocityEngine.setProperty("runtime.strict_mode.enable", true);

        velocityEngine.setProperty("parser.space_gobbling", "bc");


    }

    public void setAdditionalVelocityTools(List<Object> additionalVelocityTools) {
        this.additionalVelocityTools = additionalVelocityTools;
    }

    static class OutputFile {
        String path;
        String contents;
        String outputCharacterEncoding;

        /**
         * Writes output to path destination directory when it is newer than src,
         * creating directories as necessary. Returns the created file.
         */
        File writeToDestination(File src, File destDir) throws IOException {
            File f = new File(destDir, path);
            if (src != null && f.exists() && f.lastModified() >= src.lastModified())
                return f; // already up to date: ignore
            f.getParentFile().mkdirs();
            Writer fw = null;
            FileOutputStream fos = null;
            try {
                if (outputCharacterEncoding != null) {
                    fos = new FileOutputStream(f);
                    fw = new OutputStreamWriter(fos, outputCharacterEncoding);
                } else {
                    fw = Files.newBufferedWriter(f.toPath(), UTF_8);
                }
                fw.write(FILE_HEADER);
                fw.write(contents);
            } finally {
                if (fw != null)
                    fw.close();
                if (fos != null)
                    fos.close();
            }
            return f;
        }
    }

    public static String mangle(String word) {
        return mangle(word, false);
    }

    /** Utility for template use. Adds a dollar sign to reserved words. */
    public static String mangle(String word, boolean isError) {
        return mangle(word, isError ? ERROR_RESERVED_WORDS : RESERVED_WORDS);
    }

    /** Utility for template use. Adds a dollar sign to reserved words. */
    public static String mangle(String word, Set<String> reservedWords) {
        return mangle(word, reservedWords, false);
    }

    /** Utility for template use. Adds a dollar sign to reserved words. */
    public static String mangle(String word, Set<String> reservedWords, boolean isMethod) {
        if (word.contains(".")) {
            // If the 'word' is really a full path of a class we must mangle just the
            // classname
            int lastDot = word.lastIndexOf(".");
            String packageName = word.substring(0, lastDot + 1);
            String className = word.substring(lastDot + 1);
            return packageName + mangle(className, reservedWords, isMethod);
        }
        if (reservedWords.contains(word) || (isMethod && reservedWords
                .contains(Character.toLowerCase(word.charAt(0)) + ((word.length() > 1) ? word.substring(1) : "")))) {
            return word + "$";
        }
        return word;
    }


    public static void compileStepsInterface(File src, File dest) throws IOException {
        compileSteps(new File[] { src }, dest);
    }


    public static void compileListenerInterface(File src, File dest) throws IOException {
        compileListeners(new File[] { src }, dest);
    }





    public static ArrayNode parseSteps(File file) throws IOException {
        return parseSteps(Compiler.FACTORY.createParser(file));
    }

    private static ArrayNode parseSteps(JsonParser parser) {
        try {
            parseSteps((JsonNode) Compiler.MAPPER.readTree(parser));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return steps;
    }

    private static void parseSteps(JsonNode jsonNode){
        try {
            suite.put("name",jsonNode.get("name").asText());
            suite.put("namespace",jsonNode.get("namespace").asText());
            for(JsonNode node : jsonNode.get("steps")) {
                    ((ObjectNode) node).put("fullname", (node.get("namespce").asText() + "." + node.get("name").asText()).replace(".", "_"));
                    parseStep(node);
            }
            suite.set("steps",steps);
        } catch (Exception e) {
            logger.error(JDRY,"fail parse Steps",e);
        }
    }

    private static void parseStep(JsonNode node){
       steps.add(node);
    }

    public static void compileSteps(File[] srcFiles, File dest) throws IOException {
        for (File src : srcFiles) {
            ArrayNode steps = parseSteps(src);
            Compiler compiler = new Compiler();
            compiler.compileToSteps(src, dest);
            logger.debug(JDRY,"compile successfully " + src.getName());
        }

    }




    public static JsonNode parseListeners(File file) throws IOException {
        return parseListeners(Compiler.FACTORY.createParser(file));
    }

    private static JsonNode parseListeners(JsonParser parser) {
        try {
            parseListeners((JsonNode) Compiler.MAPPER.readTree(parser));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return listeners;
    }

    private static void parseListeners(JsonNode jsonNode){
        try {
            suite.put("name",jsonNode.get("name").asText());
            suite.put("namespace",jsonNode.get("namespace").asText());
            for(JsonNode node : jsonNode.get("listeners")) {
                    ((ObjectNode) node).put("fullname", (node.get("namespce").asText() + "." + node.get("name").asText()).replace(".", "_"));
                    parseListener(node);
            }
            suite.set("listeners",listeners);
        } catch (Exception e) {
            logger.error(JDRY,"fail parse Listeners",e);
        }
    }

    private static void parseListener(JsonNode node){
        listeners.add(node);
    }

    public static void compileListeners(File[] srcFiles, File dest) throws IOException {
        for (File src : srcFiles) {
            JsonNode listeners = parseListeners(src);
            Compiler compiler = new Compiler();
            compiler.compileToListeners(src, dest);
            logger.debug(JDRY,"compile successfully " + src.getName());
        }

    }


    public void compileToSteps(File src, File dst) throws IOException {
        if (steps != null) {
            compileSteps(suite).writeToDestination(src, dst);
        }
    }

    public void compileToListeners(File src, File dst) throws IOException {
        if (listeners != null) {
            compileListener(suite).writeToDestination(src, dst);
        }
    }


    private String renderTemplate(String templateName, VelocityContext context) {
        Template template;
        try {

            template = this.velocityEngine.getTemplate(templateName);
        } catch (Exception e) {
            logger.error(JDRY,"fail rendering template ",e);
            throw new RuntimeException(e);
        }
        StringWriter writer = new StringWriter();
        template.merge(context, writer);
        logger.debug(JDRY,"render template successfully " + templateName);
        return writer.toString();
    }



    OutputFile compileSteps(JsonNode analyzer) {
        VelocityContext context = new VelocityContext();
        context.put("analyze", analyzer);
        context.put("this", this);
        for (Object velocityTool : additionalVelocityTools) {
            String toolName = velocityTool.getClass().getSimpleName().toLowerCase();
            context.put(toolName, velocityTool);
        }

        String out = renderTemplate(templateDir + "interface.vm", context);

        OutputFile outputFile = new OutputFile();
        String mangledName = mangle(suite.get("name").asText()+"Service");
        outputFile.path = makePath(mangledName, suite.get("namespace").asText());
        outputFile.contents = out;
        outputFile.outputCharacterEncoding = outputCharacterEncoding;
        logger.debug(JDRY,"write output to " + outputFile);
        return outputFile;
    }

    OutputFile compileListener(JsonNode analyzer) {
        VelocityContext context = new VelocityContext();
        context.put("analyze", analyzer);
        context.put("this", this);
        for (Object velocityTool : additionalVelocityTools) {
            String toolName = velocityTool.getClass().getSimpleName().toLowerCase();
            context.put(toolName, velocityTool);
        }

        String out = renderTemplate(templateDir + "listenerInterface.vm", context);

        OutputFile outputFile = new OutputFile();
        String mangledName = mangle(suite.get("name").asText()+"ListenerService");
        outputFile.path = makePath(mangledName, suite.get("namespace").asText());
        outputFile.contents = out;
        outputFile.outputCharacterEncoding = outputCharacterEncoding;
        logger.debug(JDRY,"write output to " + outputFile);
        return outputFile;
    }




    // package private for testing purposes
    String makePath(String name, String space) {
        if (space == null || space.isEmpty()) {
            return name + suffix;
        } else {
            return space.replace('.', File.separatorChar) + File.separatorChar + name + suffix;
        }
    }

    public static String javaEscape(String o) {
        if(o != null) {
            return o.replace("\\", "\\\\").replace("\"", "\\\"");
        }
        return null;
    }

    public static void main(String[] args) throws Exception {
        logger.info(JDRY,"-------------- compile all ---------------- ");
        compileStepsInterface(new File(args[0]), new File(args[1]));
        compileListenerInterface(new File(args[0]), new File(args[1]));
        logger.debug(JDRY,"input file "+ args[0]);
        logger.debug(JDRY,"output file "+ args[1]);
        logger.info(JDRY,"tests compile finsh successfully");
    }


    public static void compileListeners(String analyzer,String output)throws Exception{
        logger.info(JDRY,"-------------- compile listeners ---------------- ");
        compileListenerInterface(new File(analyzer), new File(output));
        logger.debug(JDRY,"input file "+ analyzer);
        logger.debug(JDRY,"output file "+ output);
        logger.info(JDRY,"listeners compile finsh successfully");
    }

    public static void compileSteps(String analyzer,String output)throws Exception{
        logger.info(JDRY,"-------------- compile steps  ---------------- ");
        compileStepsInterface(new File(analyzer), new File(output));
        logger.debug(JDRY,"input file "+ analyzer);
        logger.debug(JDRY,"output file "+ output);
        logger.info(JDRY,"Steps compile finsh successfully");
    }

    public void setOutputCharacterEncoding(String outputCharacterEncoding) {
        this.outputCharacterEncoding = outputCharacterEncoding;
    }

    public String capitalizeFirstLetter(String str){
        return str.toUpperCase().charAt(0)+str.substring(1,str.length());
    }

    public String unCapitalizeFirstLetter(String str){
        return str.toLowerCase().charAt(0)+str.substring(1,str.length());
    }


    public static String getJavaStringFullName(String str){
        return str.replace(".","_");
    }

    public static boolean isPrimitive(String name){
        String str = name;
        if(name.contains(".")){
            str = name.substring(name.lastIndexOf(".")+1);
        }

        if(PRIMITIVES.contains(str)){
            return true;
        }
        return false;
    }

    static final List<String> PRIMITIVES = new ArrayList<>();
    static {
        PRIMITIVES.add("bytes");
        PRIMITIVES.add("int");
        PRIMITIVES.add("long");
        PRIMITIVES.add("float");
        PRIMITIVES.add("double");
        PRIMITIVES.add("boolean");
        PRIMITIVES.add("void");
    }

    public String primitiveToObject(String type){
        try {
            if(type.equals("void")){
                return "Void";
            }
            Class c = ClassUtils.getClass(type);
            return ClassUtils.primitiveToWrapper(c).getTypeName();
        } catch (ClassNotFoundException e) {
            logger.error(JDRY,"fail primitive To Object",e);
        }
        return null;
    }
}
