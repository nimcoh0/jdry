/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.softauto.tester;

import org.softauto.core.CallFuture;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;
import org.softauto.core.*;
import org.softauto.spel.SpEL;
import org.softauto.plugin.ProviderManager;
import org.softauto.plugin.api.Provider;
import java.util.HashMap;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;


public class Step implements IStep{

    private static Logger logger = LogManager.getLogger(Step.class);
    CallFuture<Object> future = null;
    protected HashMap<String,Object> callOptions = null;
    private static final Marker JDRY = MarkerManager.getMarker("JDRY");
    org.softauto.core.Callback<Object> callback;

    /**
     * step result
     */
    Object result;

    /**
     * step protocol
     */
    String transceiver;

    /**
     * step full name
     */
    String fqmn;

    /**
     * step args
     */
    Object[] args;

    /**
     * step args types
     */
    Class[] types;

    /**
     * step expected
     */
    Object expected;

    /**
     * step state
     */
    boolean state;

    public <T> void isSuccesses(Handler<T> resultHandler){
            try {
                resultHandler.handle((T) result);
            } catch (Exception e) {
                logger.error(JDRY,"fail handle step success",e);
            }
    }

    public boolean isSuccesses(){
        Object o = SpEL.getInstance().addProperty("result",result).evaluate(expected.toString());
        if(o != null && o instanceof Boolean){
            return true;
        }
      return false;
    }

    public <T> boolean isFail(Handler<T> resultHandler){
        if(!state){
            try {
                resultHandler.handle((T) result);
            } catch (Exception e) {
                logger.error(JDRY,"fail handle step fail",e);
            }
        }
        return false;
    }

    public boolean isFail(){
        Object o = SpEL.getInstance().addProperty("result",result).evaluate(expected.toString());
        if(o == null ){
            return true;
        }
        return false;
    }

    public Step setResult(Object result) {
        this.result = result;
        return this;
    }

    public Step setCallOptions(HashMap<String, Object> callOptions) {
        this.callOptions = callOptions;
        return this;
    }


    public Step setTransceiver(String transceiver) {
        this.transceiver = transceiver;
        return this;
    }


    public <T> T setClientBuilder(T clientBuilder) {
        return clientBuilder;
    }

    public <T> T setTransceiver(String pluginName, T transceiverType) {
        this.transceiver = pluginName;
        Provider provider = ProviderManager.provider(transceiver).create();
        return (T)provider;
    }


    public Step(CallOptions callOptions){
        this.callOptions = callOptions.getOptions();
    }

    public <T> T get_Result() throws Exception{
            try {
                if (future != null) {
                    if (!future.isDone()) {
                        logger.debug(JDRY,"waiting to future to be done");
                        future.await();
                    }
                    if(TestContext.getScenario().getState().equals(ScenarioLifeCycle.START.name())) {
                        logger.debug(JDRY,"successfully get_Result() ");
                        return (T) future.get();
                    }
                }else {
                    if(TestContext.getScenario().getState().equals(ScenarioLifeCycle.START.name())) {
                        return (T) result;
                    }
                }

            }catch (Exception e){
                 logger.error(JDRY,"fail get_Result() "+ e);
                 throw new Exception("fail get_Result() "+ e);
             }
            return null;
        }



    public Step(String fqmn, Object[] args, Class[] types, String transceiver, HashMap<String, Object> callOptions,String scenarioId)throws Exception{
        future = new CallFuture<Object>();
        logger.debug(JDRY,"invoking " +fqmn);
        callOptions.put("scenarioId",scenarioId);
        new InvocationHandler().invoke(fqmn,args,types,(org.softauto.core.Callback)future,transceiver,callOptions);
    }

    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions,String scenarioId, CallFuture<T> future)throws Exception{

            logger.debug(JDRY,"invoking " + fqmn);
            callOptions.put("scenarioId", scenarioId);
            new InvocationHandler().invoke(fqmn, args, types, (org.softauto.core.Callback)future, transceiver, callOptions);

    }


    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions,org.softauto.core.Callback<Object> future)throws Exception{

            logger.debug(JDRY,"invoking " + fqmn);
            this.fqmn = fqmn;
            this.args = args;
            this.types = types;
            this.callback = future;
            this.setTransceiver(transceiver);
            this.setCallOptions(callOptions);


    }




    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions)throws Exception{

            logger.debug(JDRY,"invoking " + fqmn);
            this.fqmn = fqmn;
            this.args = args;
            this.types = types;
            this.setTransceiver(transceiver);
            this.setCallOptions(callOptions);

    }

    public <RespT> Step invoke() throws Exception {
        if (this.callback == null) {
            result = new InvocationHandler().invoke(fqmn, args, types, transceiver, callOptions);
            TestContext.setStepState(StepLifeCycle.STOP);
        } else {
            new InvocationHandler().invoke(fqmn, args, types, callback, transceiver, callOptions);
        }
        return this;
    }

    public Object getExpected() {
        return expected;
    }

    public Step setExpected(Object expected) {
        this.expected = expected;
        return this;
    }

    public Step setExpected(String expression) {
        this.expected = expression;
        return this;
    }



    public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions,String scenarioId)throws Exception{

            future = new CallFuture<>();
            logger.debug(JDRY,"invoking " + fqmn);
            callOptions.getOptions().put("scenarioId", scenarioId);
            new InvocationHandler().invoke(fqmn, args, types, (org.softauto.core.Callback)future, transceiver, callOptions.getOptions());

    }

    public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions)throws Exception{

            future = new CallFuture<>();
            logger.debug(JDRY,"invoking " + fqmn);
            new InvocationHandler().invoke(fqmn, args, types, (org.softauto.core.Callback)future, transceiver, callOptions.getOptions());

    }


    public Step(String fqmn, Object[] args, Class[] types, String transceiver) throws Exception {

            this.future = new CallFuture();
            logger.debug(JDRY,"invoking " + fqmn);
            (new InvocationHandler()).invoke(fqmn, args, types, (org.softauto.core.Callback)future, transceiver);

    }


    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver, CallFuture<T> future)throws Exception{

            logger.debug(JDRY,"invoking " + fqmn);
            new InvocationHandler().invoke(fqmn, args, types, (org.softauto.core.Callback)future, transceiver);

    }



        public Step then(IListener o)throws Exception{
            return this;
        }

        public Step then(IListener...o)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }


        public void then(String expression)throws Exception{
            Object result = SpEL.getInstance().evaluate(expression);
            future.handleResult(result);
        }

        public void then(Supplier supplier)throws Exception{
            future.handleResult(supplier.get());
        }

        public void then(Consumer consumer,Object value)throws Exception{
            consumer.accept(value);
            future.handleResult("ok");
        }

        public void then(Function function,Object value)throws Exception{
            future.handleResult(function.apply(value));
        }

    public static long timeOutInMin = 3;



}