/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.softauto.tester;

import org.apache.avro.ipc.CallFuture;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.softauto.core.*;
import org.softauto.listener.ListenerObserver;

import java.util.HashMap;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;


public class Step {

    private static Logger logger = LogManager.getLogger(Step.class);
    CallFuture<Object> future = null;
    protected HashMap<String,Object> callOptions = null;

    Object result;

    public Step(){};

    public Step setResult(Object result) {
        this.result = result;
        return this;
    }

    public Step(CallOptions callOptions){
        this.callOptions = callOptions.getOptions();
    }

    public <T> T get_Result() throws Exception{
            try {
                if (future != null) {
                    if (!future.isDone()) {
                        logger.debug("waiting to future to be done");
                        future.await();
                    }
                    logger.debug("successfully get_Result() ");
                    return (T) future.get();
                }else {
                    return (T)result;
                }

            }catch (Exception e){
                 logger.error("fail get_Result() "+ e);
                 throw new Exception("fail get_Result() "+ e);
             }
        }



    public Step(String fqmn, Object[] args, Class[] types, String transceiver, HashMap<String, Object> callOptions,String scenarioId)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        callOptions.put("scenarioId",scenarioId);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
        //new InvocationHandler().invoke(fqmn,args,types,transceiver,callOptions);
    }

    public Step(String fqmn, Object[] args, Class[] types, String transceiver, HashMap<String, Object> callOptions)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
        //new InvocationHandler().invoke(fqmn,args,types,transceiver,callOptions);
    }

    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions,String scenarioId, CallFuture<T> future)throws Exception{
        logger.debug("invoking " +fqmn);
        callOptions.put("scenarioId",scenarioId);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
    }

    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver,HashMap<String, Object> callOptions, org.apache.avro.ipc.Callback<T> future)throws Exception{
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions);
    }

    public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions,String scenarioId)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        callOptions.getOptions().put("scenarioId",scenarioId);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions());
    }

    public Step(String fqmn, Object[] args, Class[] types, String transceiver,CallOptions callOptions)throws Exception{
        future = new CallFuture<>();
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver,callOptions.getOptions());
    }


    public Step(String fqmn, Object[] args, Class[] types, String transceiver) throws Exception {
        this.future = new CallFuture();
        logger.debug("invoking " + fqmn);
        (new InvocationHandler()).invoke(fqmn, args, types, this.future, transceiver);
    }


    public <T> Step(String fqmn, Object[] args, Class[] types, String transceiver, CallFuture<T> future)throws Exception{
        logger.debug("invoking " +fqmn);
        new InvocationHandler().invoke(fqmn,args,types,future,transceiver);
    }



        public Step then(IListener o)throws Exception{
            //future.handleResult(future.getResult());
            return this;
        }

        public Step then(IListener...o)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public Step then(IStep o)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public Step then(IStep... o)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public void then(String expression)throws Exception{
            future.handleResult(future.getResult());
        }


        public <T> Step then(IListener o , CallFuture<T> future)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then(IListener o , Handler<AsyncResult<T>> resultHandler)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then(IListener o, CallFuture<T> future , Handler<AsyncResult<T>> resultHandler)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then( CallFuture<T> future,IListener... o )throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then(IStep o , CallFuture<T> future)throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

        public <T> Step then(CallFuture<T> future,IStep... o )throws Exception{
            future.handleResult(future.getResult());
            return this;
        }

    public void Step(String fqmn, Object[] args, Class[] types, String transceiver, HashMap<String, Object> callOptions, String scenarioId) throws Exception {
        this.future = new CallFuture();
        logger.debug("invoking " + fqmn);
        callOptions.put("scenarioId", scenarioId);
        (new InvocationHandler()).invoke(fqmn, args, types, this.future, transceiver, callOptions);
    }

    public static long timeOutInMin = 3;

    public void waitTo(Listener listener ,Handler<AsyncResult<Object>> resultHandler)throws Exception{
        CountDownLatch lock = new CountDownLatch(1);



        ListenerObserver.getInstance().register(listener.fqmn,listener.getFunc());

        lock.await(timeOutInMin, TimeUnit.MINUTES);
        //resultHandler.handle(Future.handleResult(func.));
        //return this;
    }

}