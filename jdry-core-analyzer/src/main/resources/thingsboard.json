[ {
  "name" : "redirect",
  "namespce" : "org.thingsboard.server.config.WebConfig",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "type" : "java.lang.String",
      "value" : [ "/assets/", "/assets", "/{path:^(?!api$)(?!assets$)(?!static$)(?!webjars$)(?!swagger-ui$)[^\\.]*}/**" ]
    },
    "class" : {
      "Lorg/springframework/stereotype/Controller;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 19084,
  "type" : "method",
  "returnType" : "java.lang.String",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "redirectSwagger",
  "namespce" : "org.thingsboard.server.config.WebConfig",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "type" : "java.lang.String",
      "value" : "/swagger-ui.html"
    },
    "class" : {
      "Lorg/springframework/stereotype/Controller;" : { }
    }
  },
  "parametersTypes" : [ "javax.servlet.http.HttpServletRequest", "javax.servlet.http.HttpServletResponse" ],
  "argumentsNames" : [ "request", "response" ],
  "id" : 19085,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAdminSettings",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/settings/{key}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Administration Settings object using specified string key. Referencing non-existing key will cause an error.\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get the Administration Settings object using key (getAdminSettings)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "key"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value of the key (e.g. 'general' or 'mail')."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "key" ],
  "id" : 20011,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.AdminSettings",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveAdminSettings",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/settings"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or Updates the Administration Settings. Platform generates random Administration Settings Id during settings creation. The Administration Settings Id will be present in the response. Specify the Administration Settings Id when you would like to update the Administration Settings. Referencing non-existing Administration Settings Id will cause an error.\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get the Administration Settings object using key (getAdminSettings)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the Administration Settings."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.AdminSettings" ],
  "argumentsNames" : [ "adminSettings" ],
  "id" : 20012,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.AdminSettings",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getSecuritySettings",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/securitySettings"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Security Settings object that contains password policy, etc.\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get the Security Settings object"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20013,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.security.model.SecuritySettings",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveSecuritySettings",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/securitySettings"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Updates the Security Settings object that contains password policy, etc.\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Update Security Settings (saveSecuritySettings)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the Security Settings."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.security.model.SecuritySettings" ],
  "argumentsNames" : [ "securitySettings" ],
  "id" : 20014,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.security.model.SecuritySettings",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "sendTestMail",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/settings/testMail"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Attempts to send test email to the System Administrator User using Mail Settings provided as a parameter. You may change the 'To' email in the user profile of the System Administrator. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Send test email (sendTestMail)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the Mail Settings."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.AdminSettings" ],
  "argumentsNames" : [ "adminSettings" ],
  "id" : 20015,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "sendTestSms",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/settings/testSms"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Attempts to send test sms to the System Administrator User using SMS Settings and phone number provided as a parameters of the request. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Send test sms (sendTestMail)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the Test SMS request."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.sms.config.TestSmsRequest" ],
  "argumentsNames" : [ "testSmsRequest" ],
  "id" : 20016,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "checkUpdates",
  "namespce" : "org.thingsboard.server.controller.AdminController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/updates"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Check notifications about new platform releases. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Check for new Platform Releases (checkUpdates)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20017,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.UpdateMessage",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AdminController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/admin"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAlarmById",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/alarm/{alarmId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Alarm object based on the provided Alarm Id. If the user has the authority of 'Tenant Administrator', the server checks that the originator of alarm is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the originator of alarm belongs to the customer. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Alarm (getAlarmById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "alarmId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAlarmId" ],
  "id" : 20058,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.alarm.Alarm",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAlarmInfoById",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/alarm/info/{alarmId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Alarm Info object based on the provided Alarm Id. If the user has the authority of 'Tenant Administrator', the server checks that the originator of alarm is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the originator of alarm belongs to the customer. Alarm Info is an extension of the default Alarm object that also contains name of the alarm originator.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Alarm Info (getAlarmInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "alarmId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAlarmId" ],
  "id" : 20059,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.alarm.AlarmInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveAlarm",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/alarm"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or Updates the Alarm. When creating alarm, platform generates Alarm Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Alarm id will be present in the response. Specify existing Alarm id to update the alarm. Referencing non-existing Alarm Id will cause 'Not Found' error. \n\nPlatform also deduplicate the alarms based on the entity id of originator and alarm 'type'. For example, if the user or system component create the alarm with the type 'HighTemperature' for device 'Device A' the new active alarm is created. If the user tries to create 'HighTemperature' alarm for the same device again, the previous alarm will be updated (the 'end_ts' will be set to current timestamp). If the user clears the alarm (see 'Clear Alarm(clearAlarm)'), than new alarm with the same type and same device may be created. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create or update Alarm (saveAlarm)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the alarm."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.alarm.Alarm" ],
  "argumentsNames" : [ "alarm" ],
  "id" : 20060,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.alarm.Alarm",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteAlarm",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/alarm/{alarmId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the Alarm. Referencing non-existing Alarm Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Delete Alarm (deleteAlarm)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "alarmId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAlarmId" ],
  "id" : 20061,
  "type" : "method",
  "returnType" : "java.lang.Boolean",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "ackAlarm",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/alarm/{alarmId}/ack"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Acknowledge the Alarm. Once acknowledged, the 'ack_ts' field will be set to current timestamp and special rule chain event 'ALARM_ACK' will be generated. Referencing non-existing Alarm Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Acknowledge Alarm (ackAlarm)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "alarmId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAlarmId" ],
  "id" : 20062,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "clearAlarm",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/alarm/{alarmId}/clear"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clear the Alarm. Once cleared, the 'clear_ts' field will be set to current timestamp and special rule chain event 'ALARM_CLEAR' will be generated. Referencing non-existing Alarm Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Clear Alarm (clearAlarm)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "alarmId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the alarm id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAlarmId" ],
  "id" : 20063,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAlarms",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/alarm/{entityType}/{entityId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4
    }, {
      "index" : 5
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 9,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 10,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 11,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of alarms for the selected entity. Specifying both parameters 'searchStatus' and 'status' at the same time will cause an error. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Alarms (getAlarms)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "ANY, ACTIVE, CLEARED, ACK, UNACK",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing one of the AlarmSearchStatus enumeration value"
    }, {
      "allowableValues" : "ACTIVE_UNACK, ACTIVE_ACK, CLEARED_UNACK, CLEARED_ACK",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing one of the AlarmStatus enumeration value"
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on of next alarm fields: type, severity or status"
    }, {
      "allowableValues" : "createdTime, startTs, endTs, type, ackTs, clearTs, severity, status",
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "The start timestamp in milliseconds of the search time range over the Alarm class field: 'createdTime'."
    }, {
      "index" : 10,
      "type" : "java.lang.String",
      "value" : "The end timestamp in milliseconds of the search time range over the Alarm class field: 'createdTime'."
    }, {
      "index" : 11,
      "type" : "java.lang.String",
      "value" : "A boolean value to specify if the alarm originator name will be filled in the AlarmInfo object  field: 'originatorName' or will returns as null."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.Boolean" ],
  "argumentsNames" : [ "strEntityType", "strEntityId", "searchStatus", "status", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime", "fetchOriginator" ],
  "id" : 20064,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAllAlarms",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/alarms"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 2
    }, {
      "index" : 3
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 9,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of alarms that belongs to the current user owner. If the user has the authority of 'Tenant Administrator', the server returns alarms that belongs to the tenant of current user. If the user has the authority of 'Customer User', the server returns alarms that belongs to the customer of current user. Specifying both parameters 'searchStatus' and 'status' at the same time will cause an error. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get All Alarms (getAllAlarms)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "ACTIVE_UNACK, ACTIVE_ACK, CLEARED_UNACK, CLEARED_ACK",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing one of the AlarmStatus enumeration value"
    }, {
      "allowableValues" : "ANY, ACTIVE, CLEARED, ACK, UNACK",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing one of the AlarmSearchStatus enumeration value"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on of next alarm fields: type, severity or status"
    }, {
      "allowableValues" : "createdTime, startTs, endTs, type, ackTs, clearTs, severity, status",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "The start timestamp in milliseconds of the search time range over the Alarm class field: 'createdTime'."
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "The end timestamp in milliseconds of the search time range over the Alarm class field: 'createdTime'."
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "A boolean value to specify if the alarm originator name will be filled in the AlarmInfo object  field: 'originatorName' or will returns as null."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.Boolean" ],
  "argumentsNames" : [ "searchStatus", "status", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime", "fetchOriginator" ],
  "id" : 20065,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getHighestAlarmSeverity",
  "namespce" : "org.thingsboard.server.controller.AlarmController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/alarm/highestSeverity/{entityType}/{entityId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Search the alarms by originator ('entityType' and entityId') and optional 'status' or 'searchStatus' filters and returns the highest AlarmSeverity(CRITICAL, MAJOR, MINOR, WARNING or INDETERMINATE). Specifying both parameters 'searchStatus' and 'status' at the same time will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Highest Alarm Severity (getHighestAlarmSeverity)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "ANY, ACTIVE, CLEARED, ACK, UNACK",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing one of the AlarmSearchStatus enumeration value"
    }, {
      "allowableValues" : "ACTIVE_UNACK, ACTIVE_ACK, CLEARED_UNACK, CLEARED_ACK",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing one of the AlarmStatus enumeration value"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEntityType", "strEntityId", "searchStatus", "status" ],
  "id" : 20066,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.alarm.AlarmSeverity",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AlarmController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAssetById",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Asset object based on the provided Asset Id. If the user has the authority of 'Tenant Administrator', the server checks that the asset is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the asset is assigned to the same customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Asset (getAssetById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "assetId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAssetId" ],
  "id" : 20091,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAssetInfoById",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/asset/info/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Asset Info object based on the provided Asset Id. If the user has the authority of 'Tenant Administrator', the server checks that the asset is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the asset is assigned to the same customer. Asset Info is an extension of the default Asset object that contains information about the assigned customer name. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Asset Info (getAssetInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "assetId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAssetId" ],
  "id" : 20092,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.AssetInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveAsset",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/asset"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or Updates the Asset. When creating asset, platform generates Asset Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Asset id will be present in the response. Specify existing Asset id to update the asset. Referencing non-existing Asset Id will cause 'Not Found' error.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create Or Update Asset (saveAsset)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the asset."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.asset.Asset" ],
  "argumentsNames" : [ "asset" ],
  "id" : 20093,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteAsset",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the asset and all the relations (from and to the asset). Referencing non-existing asset Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Delete asset (deleteAsset)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "assetId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAssetId" ],
  "id" : 20095,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignAssetToCustomer",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of the asset to customer. Customer will be able to query asset afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign asset to customer (assignAssetToCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "assetId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "strAssetId" ],
  "id" : 20096,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignAssetFromCustomer",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the asset to customer. Customer will not be able to query asset afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign asset from customer (unassignAssetFromCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "assetId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAssetId" ],
  "id" : 20097,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignAssetToPublicCustomer",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/public/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Asset will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the asset.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Make asset publicly available (assignAssetToPublicCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "assetId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strAssetId" ],
  "id" : 20098,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantAssets",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/assets"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of assets owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Assets (getTenantAssets)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Asset type"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the asset name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20099,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantAssetInfos",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/assetInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of assets info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Asset Info is an extension of the default Asset object that contains information about the assigned customer name. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Asset Infos (getTenantAssetInfos)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Asset type"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the asset name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20100,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantAsset",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "assetName",
      "type" : "java.lang.Enum",
      "value" : "/tenant/assets"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Requested asset must be owned by tenant that the user belongs to. Asset name is an unique property of asset. So it can be used to identify the asset.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Asset (getTenantAsset)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the Asset name."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "assetName" ],
  "id" : 20101,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerAssets",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/assets"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of assets objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Customer Assets (getCustomerAssets)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Asset type"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the asset name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20102,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerAssetInfos",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/assetInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of assets info objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Asset Info is an extension of the default Asset object that contains information about the assigned customer name. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Customer Asset Infos (getCustomerAssetInfos)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Asset type"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the asset name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20103,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAssetsByIds",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "assetIds",
      "type" : "java.lang.Enum",
      "value" : "/assets"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "assetIds"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Requested assets must be owned by tenant or assigned to customer which user is performing the request. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Assets By Ids (getAssetsByIds)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A list of assets ids, separated by comma ','"
    }
  },
  "parametersTypes" : [ "java.lang.String[]" ],
  "argumentsNames" : [ "strAssetIds" ],
  "id" : 20104,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByQuery",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/assets"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all assets that are related to the specific entity. The entity id, relation type, asset types, depth of the search, and other query parameters defined using complex 'AssetSearchQuery' object. See 'Model' tab of the Parameters for more info.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Find related assets (findByQuery)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.asset.AssetSearchQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 20105,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAssetTypes",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/asset/types"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique asset types based on assets that are either owned by the tenant or assigned to the customer which user is performing the request.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Asset Types (getAssetTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20106,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignAssetToEdge",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of an existing asset to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment asset (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once asset will be delivered to edge service, it's going to be available for usage on remote edge instance.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign asset to edge (assignAssetToEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "assetId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strAssetId" ],
  "id" : 20107,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignAssetFromEdge",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/asset/{assetId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the asset to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove asset (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove asset locally.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign asset from edge (unassignAssetFromEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "assetId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the asset id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strAssetId" ],
  "id" : 20108,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.asset.Asset",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeAssets",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/assets"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of assets assigned to edge. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get assets assigned to edge (getEdgeAssets)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Asset type"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the asset name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Timestamp. Assets with creation time before it won't be queried"
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Timestamp. Assets with creation time after it won't be queried"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEdgeId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 20109,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "processAssetsBulkImport",
  "namespce" : "org.thingsboard.server.controller.AssetController",
  "annotations" : {
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/PostMapping;" : {
      "type" : "java.lang.String",
      "value" : "/asset/bulk_import"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "There's an ability to import the bulk of assets using the only .csv file.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Import the bulk of assets (processAssetsBulkImport)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.importing.BulkImportRequest" ],
  "argumentsNames" : [ "request" ],
  "id" : 20110,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.importing.BulkImportResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AssetController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAuditLogsByCustomerId",
  "namespce" : "org.thingsboard.server.controller.AuditLogController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/audit/logs/customer/{customerId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "name" : "actionTypes",
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of audit logs related to the targeted customer entities (devices, assets, etc.), and users actions (login, logout, etc.) that belong to this customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get audit logs by customer id (getAuditLogsByCustomerId)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus."
    }, {
      "allowableValues" : "createdTime, entityType, entityName, userName, actionType, actionStatus",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of audit log to sort by. See the 'Model' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged."
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "The start timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "The end timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime", "actionTypesStr" ],
  "id" : 20491,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAuditLogsByUserId",
  "namespce" : "org.thingsboard.server.controller.AuditLogController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/audit/logs/user/{userId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "name" : "actionTypes",
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of audit logs related to the actions of targeted user. For example, RPC call to a particular device, or alarm acknowledgment for a specific device, etc. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get audit logs by user id (getAuditLogsByUserId)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "userId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus."
    }, {
      "allowableValues" : "createdTime, entityType, entityName, userName, actionType, actionStatus",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of audit log to sort by. See the 'Model' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged."
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "The start timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "The end timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.String" ],
  "argumentsNames" : [ "strUserId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime", "actionTypesStr" ],
  "id" : 20492,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAuditLogsByEntityId",
  "namespce" : "org.thingsboard.server.controller.AuditLogController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/audit/logs/entity/{entityType}/{entityId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 3
    }, {
      "index" : 2
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "name" : "actionTypes",
      "index" : 9,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of audit logs related to the actions on the targeted entity. Basically, this API call is used to get the full lifecycle of some specific entity. For example to see when a device was created, updated, assigned to some customer, or even deleted from the system. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get audit logs by entity id (getAuditLogsByEntityId)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus."
    }, {
      "allowableValues" : "createdTime, entityType, entityName, userName, actionType, actionStatus",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of audit log to sort by. See the 'Model' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged."
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "The start timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "The end timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.String" ],
  "argumentsNames" : [ "strEntityType", "strEntityId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime", "actionTypesStr" ],
  "id" : 20493,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAuditLogs",
  "namespce" : "org.thingsboard.server.controller.AuditLogController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/audit/logs"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "name" : "actionTypes",
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of audit logs related to all entities in the scope of the current user's Tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get all audit logs (getAuditLogs)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Sequence number of page starting from 0"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Maximum amount of entities in a one page"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on one of the next properties: entityType, entityName, userName, actionType, actionStatus."
    }, {
      "allowableValues" : "createdTime, entityType, entityName, userName, actionType, actionStatus",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of audit log to sort by. See the 'Model' tab of the Response Class for more details. Note: entityType sort property is not defined in the AuditLog class, however, it can be used to sort audit logs by types of entities that were logged."
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "The start timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "The end timestamp in milliseconds of the search time range over the AuditLog class field: 'createdTime'."
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "A String value representing comma-separated list of action types. This parameter is optional, but it can be used to filter results to fetch only audit logs of specific action types. For example, 'LOGIN', 'LOGOUT'. See the 'Model' tab of the Response Class for more details."
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime", "actionTypesStr" ],
  "id" : 20494,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AuditLogController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getUser",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/auth/user"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "isAuthenticated()"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the information about the User which credentials are used to perform this REST API call.",
      "type" : "java.lang.String",
      "value" : "Get current User (getUser)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20497,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.User",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "logout",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/auth/logout"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "isAuthenticated()"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Special API call to record the 'logout' of the user to the Audit Logs. Since platform uses [JWT](https://jwt.io/), the actual logout is the procedure of clearing the [JWT](https://jwt.io/) token on the client side. ",
      "type" : "java.lang.String",
      "value" : "Logout (logout)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "request" ],
  "id" : 20498,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "changePassword",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/auth/changePassword"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "isAuthenticated()"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Change the password for the User which credentials are used to perform this REST API call. Be aware that previously generated [JWT](https://jwt.io/) tokens will be still valid until they expire.",
      "type" : "java.lang.String",
      "value" : "Change password for current User (changePassword)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Change Password Request"
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.security.model.ChangePasswordRequest" ],
  "argumentsNames" : [ "changePasswordRequest" ],
  "id" : 20499,
  "type" : "method",
  "returnType" : "com.fasterxml.jackson.databind.node.ObjectNode",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getUserPasswordPolicy",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/noauth/userPasswordPolicy"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "API call to get the password policy for the password validation form(s).",
      "type" : "java.lang.String",
      "value" : "Get the current User password policy (getUserPasswordPolicy)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20500,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.security.model.UserPasswordPolicy",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "checkActivateToken",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "activateToken",
      "type" : "java.lang.Enum",
      "value" : "/noauth/activate"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "activateToken"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Checks the activation token and forwards user to 'Create Password' page. If token is valid, returns '303 See Other' (redirect) response code with the correct address of 'Create Password' page and same 'activateToken' specified in the URL parameters. If token is not valid, returns '409 Conflict'.",
      "type" : "java.lang.String",
      "value" : "Check Activate User Token (checkActivateToken)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "The activate token string."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "activateToken" ],
  "id" : 20501,
  "type" : "method",
  "returnType" : "org.springframework.http.ResponseEntity",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "requestResetPasswordByEmail",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/noauth/resetPasswordByEmail"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Request to send the reset password email if the user with specified email address is present in the database. Always return '200 OK' status for security purposes.",
      "type" : "java.lang.String",
      "value" : "Request reset password email (requestResetPasswordByEmail)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "The JSON object representing the reset password email request."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.security.model.ResetPasswordEmailRequest", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "resetPasswordByEmailRequest", "request" ],
  "id" : 20502,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "checkResetToken",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "resetToken",
      "type" : "java.lang.Enum",
      "value" : "/noauth/resetPassword"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "resetToken"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Checks the password reset token and forwards user to 'Reset Password' page. If token is valid, returns '303 See Other' (redirect) response code with the correct address of 'Reset Password' page and same 'resetToken' specified in the URL parameters. If token is not valid, returns '409 Conflict'.",
      "type" : "java.lang.String",
      "value" : "Check password reset token (checkResetToken)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "The reset token string."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "resetToken" ],
  "id" : 20503,
  "type" : "method",
  "returnType" : "org.springframework.http.ResponseEntity",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "activateUser",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/noauth/activate"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "defaultValue" : "true",
      "index" : 1,
      "type" : "java.lang.String",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Checks the activation token and updates corresponding user password in the database. Now the user may start using his password to login. The response already contains the [JWT](https://jwt.io) activation and refresh tokens, to simplify the user activation flow and avoid asking user to input password again after activation. If token is valid, returns the object that contains [JWT](https://jwt.io/) access and refresh tokens. If token is not valid, returns '404 Bad Request'.",
      "type" : "java.lang.String",
      "value" : "Activate User"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Activate user request."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.security.model.ActivateUserRequest", "boolean", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "activateRequest", "sendActivationMail", "request" ],
  "id" : 20504,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.security.model.JwtTokenPair",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "resetPassword",
  "namespce" : "org.thingsboard.server.controller.AuthController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/noauth/resetPassword"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Checks the password reset token and updates the password. If token is valid, returns the object that contains [JWT](https://jwt.io/) access and refresh tokens. If token is not valid, returns '404 Bad Request'.",
      "type" : "java.lang.String",
      "value" : "Reset password (resetPassword)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Reset password request."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.security.model.ResetPasswordRequest", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "resetPasswordRequest", "request" ],
  "id" : 20505,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.security.model.JwtTokenPair",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AuthController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getComponentDescriptorByClazz",
  "namespce" : "org.thingsboard.server.controller.ComponentDescriptorController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/component/{componentDescriptorClazz:.+}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN','TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Gets the Component Descriptor object using class name from the path parameters. Each Component Descriptor represents configuration of specific rule node (e.g. 'Save Timeseries' or 'Send Email'.). The Component Descriptors are used by the rule chain Web UI to build the configuration forms for the rule nodes. The Component Descriptors are discovered at runtime by scanning the class path and searching for @RuleNode annotation. Once discovered, the up to date list of descriptors is persisted to the database.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Component Descriptor (getComponentDescriptorByClazz)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "componentDescriptorClazz"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Component Descriptor class name",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strComponentDescriptorClazz" ],
  "id" : 20555,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.plugin.ComponentDescriptor",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getComponentDescriptorsByType",
  "namespce" : "org.thingsboard.server.controller.ComponentDescriptorController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/components/{componentType}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN','TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "ruleChainType",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Gets the Component Descriptors using rule node type and optional rule chain type request parameters. Each Component Descriptor represents configuration of specific rule node (e.g. 'Save Timeseries' or 'Send Email'.). The Component Descriptors are used by the rule chain Web UI to build the configuration forms for the rule nodes. The Component Descriptors are discovered at runtime by scanning the class path and searching for @RuleNode annotation. Once discovered, the up to date list of descriptors is persisted to the database.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Component Descriptors (getComponentDescriptorsByType)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "componentType"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "CORE,EDGE",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Type of the Rule Chain"
    }, {
      "allowableValues" : "ENRICHMENT,FILTER,TRANSFORMATION,ACTION,EXTERNAL",
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Type of the Rule Node",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strComponentType", "strRuleChainType" ],
  "id" : 20556,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getComponentDescriptorsByTypes",
  "namespce" : "org.thingsboard.server.controller.ComponentDescriptorController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "componentTypes",
      "type" : "java.lang.Enum",
      "value" : "/components"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN','TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "ruleChainType",
      "required" : 0
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "componentTypes"
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Gets the Component Descriptors using coma separated list of rule node types and optional rule chain type request parameters. Each Component Descriptor represents configuration of specific rule node (e.g. 'Save Timeseries' or 'Send Email'.). The Component Descriptors are used by the rule chain Web UI to build the configuration forms for the rule nodes. The Component Descriptors are discovered at runtime by scanning the class path and searching for @RuleNode annotation. Once discovered, the up to date list of descriptors is persisted to the database.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Component Descriptors (getComponentDescriptorsByTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "CORE,EDGE",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Type of the Rule Chain"
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "List of types of the Rule Nodes, (ENRICHMENT, FILTER, TRANSFORMATION, ACTION or EXTERNAL)",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String[]", "java.lang.String" ],
  "argumentsNames" : [ "strComponentTypes", "strRuleChainType" ],
  "id" : 20557,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.ComponentDescriptorController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerById",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Customer object based on the provided Customer Id. If the user has the authority of 'Tenant Administrator', the server checks that the customer is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the user belongs to the customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer (getCustomerById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId" ],
  "id" : 20561,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Customer",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getShortCustomerInfoById",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/shortInfo"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the short customer object that contains only the title and 'isPublic' flag. If the user has the authority of 'Tenant Administrator', the server checks that the customer is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the user belongs to the customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get short Customer info (getShortCustomerInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId" ],
  "id" : 20562,
  "type" : "method",
  "returnType" : "com.fasterxml.jackson.databind.JsonNode",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerTitleById",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/text",
      "type" : "java.lang.String",
      "value" : "/customer/{customerId}/title"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the title of the customer. If the user has the authority of 'Tenant Administrator', the server checks that the customer is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the user belongs to the customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer Title (getCustomerTitleById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId" ],
  "id" : 20563,
  "type" : "method",
  "returnType" : "java.lang.String",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveCustomer",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or Updates the Customer. When creating customer, platform generates Customer Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Customer Id will be present in the response. Specify existing Customer Id to update the Customer. Referencing non-existing Customer Id will cause 'Not Found' error.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create or update Customer (saveCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the customer."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.Customer" ],
  "argumentsNames" : [ "customer" ],
  "id" : 20564,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Customer",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteCustomer",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the Customer and all customer Users. All assigned Dashboards, Assets, Devices, etc. will be unassigned but not deleted. Referencing non-existing Customer Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete Customer (deleteCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId" ],
  "id" : 20565,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomers",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customers"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of customers owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Customers (getCustomers)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the customer title."
    }, {
      "allowableValues" : "createdTime, title, email, country, city",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20566,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantCustomer",
  "namespce" : "org.thingsboard.server.controller.CustomerController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "customerTitle",
      "type" : "java.lang.Enum",
      "value" : "/tenant/customers"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Customer using Customer Title. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Customer by Customer title (getTenantCustomer)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the Customer title."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "customerTitle" ],
  "id" : 20567,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Customer",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.CustomerController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getServerTime",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/serverTime"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the server time (milliseconds since January 1, 1970 UTC). Used to adjust view of the dashboards according to the difference between browser and server time.",
      "type" : "java.lang.String",
      "value" : "Get server time (getServerTime)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiResponse;" : {
      "code" : 200,
      "examples" : {
        "value" : {
          "mediaType" : "application/json",
          "type" : "java.lang.String",
          "value" : "1636023857137"
        }
      },
      "message" : "OK",
      "type" : "java.lang.String"
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20569,
  "type" : "method",
  "returnType" : "long",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getMaxDatapointsLimit",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/maxDatapointsLimit"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the maximum number of data points that dashboard may request from the server per in a single subscription command. This value impacts the time window behavior. It impacts 'Max values' parameter in case user selects 'None' as 'Data aggregation function'. It also impacts the 'Grouping interval' in case of any other 'Data aggregation function' is selected. The actual value of the limit is configurable in the system configuration file.",
      "type" : "java.lang.String",
      "value" : "Get max data points limit (getMaxDatapointsLimit)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiResponse;" : {
      "code" : 200,
      "examples" : {
        "value" : {
          "mediaType" : "application/json",
          "type" : "java.lang.String",
          "value" : "5000"
        }
      },
      "message" : "OK",
      "type" : "java.lang.String"
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20570,
  "type" : "method",
  "returnType" : "long",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDashboardInfoById",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/info/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the information about the dashboard based on 'dashboardId' parameter. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Dashboard Info (getDashboardInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDashboardId" ],
  "id" : 20571,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DashboardInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDashboardById",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the dashboard based on 'dashboardId' parameter. The Dashboard object is a heavyweight object that contains information about the dashboard (e.g. title, image, assigned customers) and also configuration JSON (e.g. layouts, widgets, entity aliases).\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Dashboard (getDashboardById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDashboardId" ],
  "id" : 20572,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveDashboard",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/dashboard"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Dashboard. When creating dashboard, platform generates Dashboard Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Dashboard id will be present in the response. Specify existing Dashboard id to update the dashboard. Referencing non-existing dashboard Id will cause 'Not Found' error. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create Or Update Dashboard (saveDashboard)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the dashboard."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.Dashboard" ],
  "argumentsNames" : [ "dashboard" ],
  "id" : 20573,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteDashboard",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Delete the Dashboard.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete the Dashboard (deleteDashboard)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDashboardId" ],
  "id" : 20574,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDashboardToCustomer",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Assign the Dashboard to specified Customer or do nothing if the Dashboard is already assigned to that Customer. Returns the Dashboard object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign the Dashboard (assignDashboardToCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "strDashboardId" ],
  "id" : 20575,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignDashboardFromCustomer",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Unassign the Dashboard from specified Customer or do nothing if the Dashboard is already assigned to that Customer. Returns the Dashboard object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign the Dashboard (unassignDashboardFromCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "strDashboardId" ],
  "id" : 20576,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "updateDashboardCustomers",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/{dashboardId}/customers"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Updates the list of Customers that this Dashboard is assigned to. Removes previous assignments to customers that are not in the provided list. Returns the Dashboard object. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Update the Dashboard Customers (updateDashboardCustomers)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "JSON array with the list of customer ids, or empty to remove all customers"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String[]" ],
  "argumentsNames" : [ "strDashboardId", "strCustomerIds" ],
  "id" : 20577,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "addDashboardCustomers",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/{dashboardId}/customers/add"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Adds the list of Customers to the existing list of assignments for the Dashboard. Keeps previous assignments to customers that are not in the provided list. Returns the Dashboard object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Adds the Dashboard Customers (addDashboardCustomers)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "JSON array with the list of customer ids"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String[]" ],
  "argumentsNames" : [ "strDashboardId", "strCustomerIds" ],
  "id" : 20578,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "removeDashboardCustomers",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/{dashboardId}/customers/remove"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Removes the list of Customers from the existing list of assignments for the Dashboard. Keeps other assignments to customers that are not in the provided list. Returns the Dashboard object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Remove the Dashboard Customers (removeDashboardCustomers)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "JSON array with the list of customer ids"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String[]" ],
  "argumentsNames" : [ "strDashboardId", "strCustomerIds" ],
  "id" : 20579,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDashboardToPublicCustomer",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/public/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Assigns the dashboard to a special, auto-generated 'Public' Customer. Once assigned, unauthenticated users may browse the dashboard. This method is useful if you like to embed the dashboard on public web pages to be available for users that are not logged in. Be aware that making the dashboard public does not mean that it automatically makes all devices and assets you use in the dashboard to be public.Use [assign Asset to Public Customer](#!/asset-controller/assignAssetToPublicCustomerUsingPOST) and [assign Device to Public Customer](#!/device-controller/assignDeviceToPublicCustomerUsingPOST) for this purpose. Returns the Dashboard object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign the Dashboard to Public Customer (assignDashboardToPublicCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDashboardId" ],
  "id" : 20580,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignDashboardFromPublicCustomer",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/public/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Unassigns the dashboard from a special, auto-generated 'Public' Customer. Once unassigned, unauthenticated users may no longer browse the dashboard. Returns the Dashboard object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign the Dashboard from Public Customer (unassignDashboardFromPublicCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDashboardId" ],
  "id" : 20581,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantDashboards",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/{tenantId}/dashboards"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of dashboard info objects owned by tenant. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Dashboards by System Administrator (getTenantDashboards)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the dashboard title."
    }, {
      "allowableValues" : "createdTime, title",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strTenantId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20582,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantDashboards",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/dashboards"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of dashboard info objects owned by the tenant of a current user. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Dashboards (getTenantDashboards)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Exclude dashboards that are hidden for mobile"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the dashboard title."
    }, {
      "allowableValues" : "createdTime, title",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.Boolean", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "mobile", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20583,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerDashboards",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/dashboards"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of dashboard info objects owned by the specified customer. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Customer Dashboards (getCustomerDashboards)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Exclude dashboards that are hidden for mobile"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the dashboard title."
    }, {
      "allowableValues" : "createdTime, title",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.Boolean", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "mobile", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20584,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getHomeDashboard",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/home"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "isAuthenticated()"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns the home dashboard object that is configured as 'homeDashboardId' parameter in the 'additionalInfo' of the User. If 'homeDashboardId' parameter is not set on the User level and the User has authority 'CUSTOMER_USER', check the same parameter for the corresponding Customer. If 'homeDashboardId' parameter is not set on the User and Customer levels then checks the same parameter for the Tenant that owns the user. The Dashboard object is a heavyweight object that contains information about the dashboard (e.g. title, image, assigned customers) and also configuration JSON (e.g. layouts, widgets, entity aliases).\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Home Dashboard (getHomeDashboard)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20585,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.HomeDashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getHomeDashboardInfo",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/dashboard/home/info"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "isAuthenticated()"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns the home dashboard info object that is configured as 'homeDashboardId' parameter in the 'additionalInfo' of the User. If 'homeDashboardId' parameter is not set on the User level and the User has authority 'CUSTOMER_USER', check the same parameter for the corresponding Customer. If 'homeDashboardId' parameter is not set on the User and Customer levels then checks the same parameter for the Tenant that owns the user. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Home Dashboard Info (getHomeDashboardInfo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20586,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.HomeDashboardInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantHomeDashboardInfo",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/tenant/dashboard/home/info"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns the home dashboard info object that is configured as 'homeDashboardId' parameter in the 'additionalInfo' of the corresponding tenant. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Home Dashboard Info (getTenantHomeDashboardInfo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20587,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.HomeDashboardInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setTenantHomeDashboardInfo",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/tenant/dashboard/home/info"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Update the home dashboard assignment for the current tenant. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Update Tenant Home Dashboard Info (getTenantHomeDashboardInfo)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON object that represents home dashboard id and other parameters",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.HomeDashboardInfo" ],
  "argumentsNames" : [ "homeDashboardInfo" ],
  "id" : 20588,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDashboardToEdge",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of an existing dashboard to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment dashboard (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once dashboard will be delivered to edge service, it's going to be available for usage on remote edge instance.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign dashboard to edge (assignDashboardToEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strDashboardId" ],
  "id" : 20591,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignDashboardFromEdge",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/dashboard/{dashboardId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the dashboard to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove dashboard (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove dashboard locally.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign dashboard from edge (unassignDashboardFromEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "dashboardId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strDashboardId" ],
  "id" : 20592,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Dashboard",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeDashboards",
  "namespce" : "org.thingsboard.server.controller.DashboardController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/dashboards"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of dashboard info objects assigned to the specified edge. The Dashboard Info object contains lightweight information about the dashboard (e.g. title, image, assigned customers) but does not contain the heavyweight configuration JSON. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Edge Dashboards (getEdgeDashboards)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the dashboard title."
    }, {
      "allowableValues" : "createdTime, title",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20593,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.DashboardController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceById",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Device object based on the provided Device Id. If the user has the authority of 'TENANT_ADMIN', the server checks that the device is owned by the same tenant. If the user has the authority of 'CUSTOMER_USER', the server checks that the device is assigned to the same customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Device (getDeviceById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId" ],
  "id" : 20615,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceInfoById",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/device/info/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Device Info object based on the provided Device Id. If the user has the authority of 'Tenant Administrator', the server checks that the device is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the device is assigned to the same customer. Device Info is an extension of the default Device object that contains information about the assigned customer name and device profile name. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Device Info (getDeviceInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId" ],
  "id" : 20616,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DeviceInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveDevice",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/device"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "accessToken",
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Device. When creating device, platform generates Device Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Device credentials are also generated if not provided in the 'accessToken' request parameter. The newly created device id will be present in the response. Specify existing Device id to update the device. Referencing non-existing device Id will cause 'Not Found' error.\n\nDevice name is unique in the scope of tenant. Use unique identifiers like MAC or IMEI for the device names and non-unique 'label' field for user-friendly visualization purposes.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Create Or Update Device (saveDevice)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Optional value of the device credentials to be used during device creation. If omitted, access token will be auto-generated."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the device."
    } ]
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.Device", "java.lang.String" ],
  "argumentsNames" : [ "device", "accessToken" ],
  "id" : 20617,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveDeviceWithCredentials",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/device-with-credentials"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Device. When creating device, platform generates Device Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Requires to provide the Device Credentials object as well. Useful to create device and credentials in one request. You may find the example of LwM2M device and RPK credentials below: \n\n```json\n{\n  \"device\": {\n    \"name\": \"LwRpk00000000\",\n    \"type\": \"lwm2mProfileRpk\"\n  },\n  \"credentials\": {\n    \"id\": \"null\",\n    \"createdTime\": 0,\n    \"deviceId\": \"null\",\n    \"credentialsType\": \"LWM2M_CREDENTIALS\",\n    \"credentialsId\": \"LwRpk00000000\",\n    \"credentialsValue\": {\n      \"client\": {\n        \"endpoint\": \"LwRpk00000000\",\n        \"securityConfigClientMode\": \"RPK\",\n        \"key\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\"\n      },\n      \"bootstrap\": {\n        \"bootstrapServer\": {\n          \"securityMode\": \"RPK\",\n          \"clientPublicKeyOrId\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\",\n          \"clientSecretKey\": \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"\n        },\n        \"lwm2mServer\": {\n          \"securityMode\": \"RPK\",\n          \"clientPublicKeyOrId\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\",\n          \"clientSecretKey\": \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"\n        }\n      }\n    }\n  }\n}\n```\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Create Device (saveDevice) with credentials "
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "The JSON object with device and credentials. See method description above for example."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.SaveDeviceWithCredentialsRequest" ],
  "argumentsNames" : [ "deviceAndCredentials" ],
  "id" : 20618,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteDevice",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the device, it's credentials and all the relations (from and to the device). Referencing non-existing device Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete device (deleteDevice)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId" ],
  "id" : 20620,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDeviceToCustomer",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of the device to customer. Customer will be able to query device afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Assign device to customer (assignDeviceToCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "deviceId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "strDeviceId" ],
  "id" : 20621,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignDeviceFromCustomer",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the device to customer. Customer will not be able to query device afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Unassign device from customer (unassignDeviceFromCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId" ],
  "id" : 20622,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDeviceToPublicCustomer",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/public/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Device will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the device.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Make device publicly available (assignDeviceToPublicCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId" ],
  "id" : 20623,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceCredentialsByDeviceId",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/device/{deviceId}/credentials"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "If during device creation there wasn't specified any credentials, platform generates random 'ACCESS_TOKEN' credentials.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Device Credentials (getDeviceCredentialsByDeviceId)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId" ],
  "id" : 20624,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.security.DeviceCredentials",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "updateDeviceCredentials",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/device/credentials"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "During device creation, platform generates random 'ACCESS_TOKEN' credentials. Use this method to update the device credentials. First use 'getDeviceCredentialsByDeviceId' to get the credentials id and value. Then use current method to update the credentials type and value. It is not possible to create multiple device credentials for the same device. The structure of device credentials id and value is simple for the 'ACCESS_TOKEN' but is much more complex for the 'MQTT_BASIC' or 'LWM2M_CREDENTIALS'.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Update device credentials (updateDeviceCredentials)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the device credentials."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.security.DeviceCredentials" ],
  "argumentsNames" : [ "deviceCredentials" ],
  "id" : 20625,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.security.DeviceCredentials",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantDevices",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/devices"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Devices (getTenantDevices)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Device type as the name of the device profile"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device name."
    }, {
      "allowableValues" : "createdTime, name, deviceProfileName, label, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20626,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantDeviceInfos",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/deviceInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Device Info is an extension of the default Device object that contains information about the assigned customer name and device profile name. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Device Infos (getTenantDeviceInfos)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Device type as the name of the device profile"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device name."
    }, {
      "allowableValues" : "createdTime, name, deviceProfileName, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "deviceProfileId", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20627,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantDevice",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "deviceName",
      "type" : "java.lang.Enum",
      "value" : "/tenant/devices"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Requested device must be owned by tenant that the user belongs to. Device name is an unique property of device. So it can be used to identify the device.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Device (getTenantDevice)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the Device name."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "deviceName" ],
  "id" : 20628,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerDevices",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/devices"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer Devices (getCustomerDevices)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Device type as the name of the device profile"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device name."
    }, {
      "allowableValues" : "createdTime, name, deviceProfileName, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20629,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerDeviceInfos",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/deviceInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices info objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Device Info is an extension of the default Device object that contains information about the assigned customer name and device profile name. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer Device Infos (getCustomerDeviceInfos)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Device type as the name of the device profile"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device name."
    }, {
      "allowableValues" : "createdTime, name, deviceProfileName, label, customerTitle",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "deviceProfileId", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20630,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDevicesByIds",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "deviceIds",
      "type" : "java.lang.Enum",
      "value" : "/devices"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceIds"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Requested devices must be owned by tenant or assigned to customer which user is performing the request. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Devices By Ids (getDevicesByIds)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A list of devices ids, separated by comma ','"
    }
  },
  "parametersTypes" : [ "java.lang.String[]" ],
  "argumentsNames" : [ "strDeviceIds" ],
  "id" : 20631,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByQuery",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/devices"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all devices that are related to the specific entity. The entity id, relation type, device types, depth of the search, and other query parameters defined using complex 'DeviceSearchQuery' object. See 'Model' tab of the Parameters for more info.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Find related devices (findByQuery)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "The device search query JSON"
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.device.DeviceSearchQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 20632,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceTypes",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/device/types"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique device profile names based on devices that are either owned by the tenant or assigned to the customer which user is performing the request.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Device Types (getDeviceTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20633,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "claimDevice",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/device/{deviceName}/claim"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Claiming makes it possible to assign a device to the specific customer using device/server side claiming data (in the form of secret key).To make this happen you have to provide unique device name and optional claiming data (it is needed only for device-side claiming).Once device is claimed, the customer becomes its owner and customer users may access device data as well as control the device. \nIn order to enable claiming devices feature a system parameter security.claim.allowClaimingByDefault should be set to true, otherwise a server-side claimingAllowed attribute with the value true is obligatory for provisioned devices. \nSee official documentation for more details regarding claiming.\n\nAvailable for users with 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Claim device (claimDevice)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceName"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Claiming request which can optionally contain secret key"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Unique name of the device which is going to be claimed"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "org.thingsboard.server.common.data.ClaimRequest" ],
  "argumentsNames" : [ "deviceName", "claimRequest" ],
  "id" : 20634,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "reClaimDevice",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/device/{deviceName}/claim"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Reclaiming means the device will be unassigned from the customer and the device will be available for claiming again.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Reclaim device (reClaimDevice)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceName"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Unique name of the device which is going to be reclaimed"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "deviceName" ],
  "id" : 20635,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDeviceToTenant",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/tenant/{tenantId}/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of the device to tenant. Thereafter tenant will be able to reassign the device to a customer.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Assign device to tenant (assignDeviceToTenant)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "deviceId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strTenantId", "strDeviceId" ],
  "id" : 20637,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignDeviceToEdge",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of an existing device to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment device (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once device will be delivered to edge service, it's going to be available for usage on remote edge instance.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign device to edge (assignDeviceToEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "deviceId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strDeviceId" ],
  "id" : 20640,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignDeviceFromEdge",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the device to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove device (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove device locally.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign device from edge (unassignDeviceFromEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "deviceId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strDeviceId" ],
  "id" : 20641,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeDevices",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/devices"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices assigned to edge. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get devices assigned to edge (getEdgeDevices)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Device type as the name of the device profile"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device name."
    }, {
      "allowableValues" : "createdTime, name, deviceProfileName, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Timestamp. Devices with creation time before it won't be queried"
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Timestamp. Devices with creation time after it won't be queried"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEdgeId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 20642,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "countByDeviceProfileAndEmptyOtaPackage",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/devices/count/{otaPackageType}/{deviceProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "The platform gives an ability to load OTA (over-the-air) packages to devices. It can be done in two different ways: device scope or device profile scope.In the response you will find the number of devices with specified device profile, but without previously defined device scope OTA package. It can be useful when you want to define number of devices that will be affected with future OTA package\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Count devices by device profile  (countByDeviceProfileAndEmptyOtaPackage)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "deviceProfileId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "otaPackageType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Device Profile Id. I.g. '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "allowableValues" : "FIRMWARE, SOFTWARE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "OTA package type"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "otaPackageType", "deviceProfileId" ],
  "id" : 20643,
  "type" : "method",
  "returnType" : "java.lang.Long",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "processDevicesBulkImport",
  "namespce" : "org.thingsboard.server.controller.DeviceController",
  "annotations" : {
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/PostMapping;" : {
      "type" : "java.lang.String",
      "value" : "/device/bulk_import"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "There's an ability to import the bulk of devices using the only .csv file.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Import the bulk of devices (processDevicesBulkImport)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.importing.BulkImportRequest" ],
  "argumentsNames" : [ "request" ],
  "id" : 20644,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.importing.BulkImportResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.DeviceController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceProfileById",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfile/{deviceProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Device Profile object based on the provided Device Profile Id. The server checks that the device profile is owned by the same tenant. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Device Profile (getDeviceProfileById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceProfileId" ],
  "id" : 20808,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DeviceProfile",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceProfileInfoById",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfileInfo/{deviceProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Device Profile Info object based on the provided Device Profile Id. Device Profile Info is a lightweight object that includes main information about Device Profile excluding the heavyweight configuration object. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Device Profile Info (getDeviceProfileInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceProfileId" ],
  "id" : 20809,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DeviceProfileInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDefaultDeviceProfileInfo",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfileInfo/default"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Default Device Profile Info object. Device Profile Info is a lightweight object that includes main information about Device Profile excluding the heavyweight configuration object. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Default Device Profile (getDefaultDeviceProfileInfo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20810,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DeviceProfileInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTimeseriesKeys",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfile/devices/keys/timeseries"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "deviceProfileId",
      "index" : 0,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get a set of unique time-series keys used by devices that belong to specified profile. If profile is not set returns a list of unique keys among all profiles. The call is used for auto-complete in the UI forms. The implementation limits the number of devices that participate in search to 100 as a trade of between accurate results and time-consuming queries. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get time-series keys (getTimeseriesKeys)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "deviceProfileIdStr" ],
  "id" : 20811,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAttributesKeys",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfile/devices/keys/attributes"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "deviceProfileId",
      "index" : 0,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get a set of unique attribute keys used by devices that belong to specified profile. If profile is not set returns a list of unique keys among all profiles. The call is used for auto-complete in the UI forms. The implementation limits the number of devices that participate in search to 100 as a trade of between accurate results and time-consuming queries. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get attribute keys (getAttributesKeys)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "deviceProfileIdStr" ],
  "id" : 20812,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveDeviceProfile",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfile"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Device Profile. When creating device profile, platform generates device profile id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created device profile id will be present in the response. Specify existing device profile id to update the device profile. Referencing non-existing device profile Id will cause 'Not Found' error. \n\nDevice profile name is unique in the scope of tenant. Only one 'default' device profile may exist in scope of tenant.\n\n# Device profile data definition\n\nDevice profile data object contains alarm rules configuration, device provision strategy and transport type configuration for device connectivity. Let's review some examples. First one is the default device profile data configuration and second one - the custom one. \n\n```json\n{\n   \"alarms\":[\n   ],\n   \"configuration\":{\n      \"type\":\"DEFAULT\"\n   },\n   \"provisionConfiguration\":{\n      \"type\":\"DISABLED\",\n      \"provisionDeviceSecret\":null\n   },\n   \"transportConfiguration\":{\n      \"type\":\"DEFAULT\"\n   }\n}\n```\n\n```json\n{\n   \"alarms\":[\n      {\n         \"id\":\"2492b935-1226-59e9-8615-17d8978a4f93\",\n         \"alarmType\":\"Temperature Alarm\",\n         \"clearRule\":{\n            \"schedule\":null,\n            \"condition\":{\n               \"spec\":{\n                  \"type\":\"SIMPLE\"\n               },\n               \"condition\":[\n                  {\n                     \"key\":{\n                        \"key\":\"temperature\",\n                        \"type\":\"TIME_SERIES\"\n                     },\n                     \"value\":null,\n                     \"predicate\":{\n                        \"type\":\"NUMERIC\",\n                        \"value\":{\n                           \"userValue\":null,\n                           \"defaultValue\":30.0,\n                           \"dynamicValue\":null\n                        },\n                        \"operation\":\"LESS\"\n                     },\n                     \"valueType\":\"NUMERIC\"\n                  }\n               ]\n            },\n            \"dashboardId\":null,\n            \"alarmDetails\":null\n         },\n         \"propagate\":false,\n         \"createRules\":{\n            \"MAJOR\":{\n               \"schedule\":{\n                  \"type\":\"SPECIFIC_TIME\",\n                  \"endsOn\":64800000,\n                  \"startsOn\":43200000,\n                  \"timezone\":\"Europe/Kiev\",\n                  \"daysOfWeek\":[\n                     1,\n                     3,\n                     5\n                  ]\n               },\n               \"condition\":{\n                  \"spec\":{\n                     \"type\":\"DURATION\",\n                     \"unit\":\"MINUTES\",\n                     \"predicate\":{\n                        \"userValue\":null,\n                        \"defaultValue\":30,\n                        \"dynamicValue\":null\n                     }\n                  },\n                  \"condition\":[\n                     {\n                        \"key\":{\n                           \"key\":\"temperature\",\n                           \"type\":\"TIME_SERIES\"\n                        },\n                        \"value\":null,\n                        \"predicate\":{\n                           \"type\":\"COMPLEX\",\n                           \"operation\":\"OR\",\n                           \"predicates\":[\n                              {\n                                 \"type\":\"NUMERIC\",\n                                 \"value\":{\n                                    \"userValue\":null,\n                                    \"defaultValue\":50.0,\n                                    \"dynamicValue\":null\n                                 },\n                                 \"operation\":\"LESS_OR_EQUAL\"\n                              },\n                              {\n                                 \"type\":\"NUMERIC\",\n                                 \"value\":{\n                                    \"userValue\":null,\n                                    \"defaultValue\":30.0,\n                                    \"dynamicValue\":null\n                                 },\n                                 \"operation\":\"GREATER\"\n                              }\n                           ]\n                        },\n                        \"valueType\":\"NUMERIC\"\n                     }\n                  ]\n               },\n               \"dashboardId\":null,\n               \"alarmDetails\":null\n            },\n            \"WARNING\":{\n               \"schedule\":{\n                  \"type\":\"CUSTOM\",\n                  \"items\":[\n                     {\n                        \"endsOn\":0,\n                        \"enabled\":false,\n                        \"startsOn\":0,\n                        \"dayOfWeek\":1\n                     },\n                     {\n                        \"endsOn\":64800000,\n                        \"enabled\":true,\n                        \"startsOn\":43200000,\n                        \"dayOfWeek\":2\n                     },\n                     {\n                        \"endsOn\":0,\n                        \"enabled\":false,\n                        \"startsOn\":0,\n                        \"dayOfWeek\":3\n                     },\n                     {\n                        \"endsOn\":57600000,\n                        \"enabled\":true,\n                        \"startsOn\":36000000,\n                        \"dayOfWeek\":4\n                     },\n                     {\n                        \"endsOn\":0,\n                        \"enabled\":false,\n                        \"startsOn\":0,\n                        \"dayOfWeek\":5\n                     },\n                     {\n                        \"endsOn\":0,\n                        \"enabled\":false,\n                        \"startsOn\":0,\n                        \"dayOfWeek\":6\n                     },\n                     {\n                        \"endsOn\":0,\n                        \"enabled\":false,\n                        \"startsOn\":0,\n                        \"dayOfWeek\":7\n                     }\n                  ],\n                  \"timezone\":\"Europe/Kiev\"\n               },\n               \"condition\":{\n                  \"spec\":{\n                     \"type\":\"REPEATING\",\n                     \"predicate\":{\n                        \"userValue\":null,\n                        \"defaultValue\":5,\n                        \"dynamicValue\":null\n                     }\n                  },\n                  \"condition\":[\n                     {\n                        \"key\":{\n                           \"key\":\"tempConstant\",\n                           \"type\":\"CONSTANT\"\n                        },\n                        \"value\":30,\n                        \"predicate\":{\n                           \"type\":\"NUMERIC\",\n                           \"value\":{\n                              \"userValue\":null,\n                              \"defaultValue\":0.0,\n                              \"dynamicValue\":{\n                                 \"inherit\":false,\n                                 \"sourceType\":\"CURRENT_DEVICE\",\n                                 \"sourceAttribute\":\"tempThreshold\"\n                              }\n                           },\n                           \"operation\":\"EQUAL\"\n                        },\n                        \"valueType\":\"NUMERIC\"\n                     }\n                  ]\n               },\n               \"dashboardId\":null,\n               \"alarmDetails\":null\n            },\n            \"CRITICAL\":{\n               \"schedule\":null,\n               \"condition\":{\n                  \"spec\":{\n                     \"type\":\"SIMPLE\"\n                  },\n                  \"condition\":[\n                     {\n                        \"key\":{\n                           \"key\":\"temperature\",\n                           \"type\":\"TIME_SERIES\"\n                        },\n                        \"value\":null,\n                        \"predicate\":{\n                           \"type\":\"NUMERIC\",\n                           \"value\":{\n                              \"userValue\":null,\n                              \"defaultValue\":50.0,\n                              \"dynamicValue\":null\n                           },\n                           \"operation\":\"GREATER\"\n                        },\n                        \"valueType\":\"NUMERIC\"\n                     }\n                  ]\n               },\n               \"dashboardId\":null,\n               \"alarmDetails\":null\n            }\n         },\n         \"propagateRelationTypes\":null\n      }\n   ],\n   \"configuration\":{\n      \"type\":\"DEFAULT\"\n   },\n   \"provisionConfiguration\":{\n      \"type\":\"ALLOW_CREATE_NEW_DEVICES\",\n      \"provisionDeviceSecret\":\"vaxb9hzqdbz3oqukvomg\"\n   },\n   \"transportConfiguration\":{\n      \"type\":\"MQTT\",\n      \"deviceTelemetryTopic\":\"v1/devices/me/telemetry\",\n      \"deviceAttributesTopic\":\"v1/devices/me/attributes\",\n      \"transportPayloadTypeConfiguration\":{\n         \"transportPayloadType\":\"PROTOBUF\",\n         \"deviceTelemetryProtoSchema\":\"syntax =\\\"proto3\\\";\\npackage telemetry;\\n\\nmessage SensorDataReading {\\n\\n  optional double temperature = 1;\\n  optional double humidity = 2;\\n  InnerObject innerObject = 3;\\n\\n  message InnerObject {\\n    optional string key1 = 1;\\n    optional bool key2 = 2;\\n    optional double key3 = 3;\\n    optional int32 key4 = 4;\\n    optional string key5 = 5;\\n  }\\n}\",\n         \"deviceAttributesProtoSchema\":\"syntax =\\\"proto3\\\";\\npackage attributes;\\n\\nmessage SensorConfiguration {\\n  optional string firmwareVersion = 1;\\n  optional string serialNumber = 2;\\n}\",\n         \"deviceRpcRequestProtoSchema\":\"syntax =\\\"proto3\\\";\\npackage rpc;\\n\\nmessage RpcRequestMsg {\\n  optional string method = 1;\\n  optional int32 requestId = 2;\\n  optional string params = 3;\\n}\",\n         \"deviceRpcResponseProtoSchema\":\"syntax =\\\"proto3\\\";\\npackage rpc;\\n\\nmessage RpcResponseMsg {\\n  optional string payload = 1;\\n}\"\n      }\n   }\n}\n```\n\nLet's review some specific objects examples related to the device profile configuration:\n\n# Alarm Schedule\n\nAlarm Schedule JSON object represents the time interval during which the alarm rule is active. Note, \n\n```json\n\"schedule\": null\n```\n\nmeans alarm rule is active all the time. **'daysOfWeek'** field represents Monday as 1, Tuesday as 2 and so on. **'startsOn'** and **'endsOn'** fields represent hours in millis (e.g. 64800000 = 18:00 or 6pm). **'enabled'** flag specifies if item in a custom rule is active for specific day of the week:\n\n## Specific Time Schedule\n\n```json\n{\n   \"schedule\":{\n      \"type\":\"SPECIFIC_TIME\",\n      \"endsOn\":64800000,\n      \"startsOn\":43200000,\n      \"timezone\":\"Europe/Kiev\",\n      \"daysOfWeek\":[\n         1,\n         3,\n         5\n      ]\n   }\n}\n```\n\n## Custom Schedule\n\n```json\n{\n   \"schedule\":{\n      \"type\":\"CUSTOM\",\n      \"items\":[\n         {\n            \"endsOn\":0,\n            \"enabled\":false,\n            \"startsOn\":0,\n            \"dayOfWeek\":1\n         },\n         {\n            \"endsOn\":64800000,\n            \"enabled\":true,\n            \"startsOn\":43200000,\n            \"dayOfWeek\":2\n         },\n         {\n            \"endsOn\":0,\n            \"enabled\":false,\n            \"startsOn\":0,\n            \"dayOfWeek\":3\n         },\n         {\n            \"endsOn\":57600000,\n            \"enabled\":true,\n            \"startsOn\":36000000,\n            \"dayOfWeek\":4\n         },\n         {\n            \"endsOn\":0,\n            \"enabled\":false,\n            \"startsOn\":0,\n            \"dayOfWeek\":5\n         },\n         {\n            \"endsOn\":0,\n            \"enabled\":false,\n            \"startsOn\":0,\n            \"dayOfWeek\":6\n         },\n         {\n            \"endsOn\":0,\n            \"enabled\":false,\n            \"startsOn\":0,\n            \"dayOfWeek\":7\n         }\n      ],\n      \"timezone\":\"Europe/Kiev\"\n   }\n}\n```\n\n# Alarm condition type (**'spec'**)\n\nAlarm condition type can be either simple, duration, or repeating. For example, 5 times in a row or during 5 minutes.\n\nNote, **'userValue'** field is not used and reserved for future usage, **'dynamicValue'** is used for condition appliance by using the value of the **'sourceAttribute'** or else **'defaultValue'** is used (if **'sourceAttribute'** is absent).\n\n**'sourceType'** of the **'sourceAttribute'** can be: \n * 'CURRENT_DEVICE';\n * 'CURRENT_CUSTOMER';\n * 'CURRENT_TENANT'.\n\n**'sourceAttribute'** can be inherited from the owner if **'inherit'** is set to true (for CURRENT_DEVICE and CURRENT_CUSTOMER).\n\n## Repeating alarm condition\n\n```json\n{\n   \"spec\":{\n      \"type\":\"REPEATING\",\n      \"predicate\":{\n         \"userValue\":null,\n         \"defaultValue\":5,\n         \"dynamicValue\":{\n            \"inherit\":true,\n            \"sourceType\":\"CURRENT_DEVICE\",\n            \"sourceAttribute\":\"tempAttr\"\n         }\n      }\n   }\n}\n```\n\n## Duration alarm condition\n\n```json\n{\n   \"spec\":{\n      \"type\":\"DURATION\",\n      \"unit\":\"MINUTES\",\n      \"predicate\":{\n         \"userValue\":null,\n         \"defaultValue\":30,\n         \"dynamicValue\":null\n      }\n   }\n}\n```\n\n**'unit'** can be: \n * 'SECONDS';\n * 'MINUTES';\n * 'HOURS';\n * 'DAYS'.\n\n# Key Filters\n\nKey filter objects are created under the **'condition'** array. They allow you to define complex logical expressions over entity field, attribute, latest time-series value or constant. The filter is defined using 'key', 'valueType', 'value' (refers to the value of the 'CONSTANT' alarm filter key type) and 'predicate' objects. Let's review each object:\n\n## Alarm Filter Key\n\nFilter Key defines either entity field, attribute, telemetry or constant. It is a JSON object that consists the key name and type. The following filter key types are supported:\n * 'ATTRIBUTE' - used for attributes values;\n * 'TIME_SERIES' - used for time-series values;\n * 'ENTITY_FIELD' - used for accessing entity fields like 'name', 'label', etc. The list of available fields depends on the entity type;\n * 'CONSTANT' - constant value specified.\n\nLet's review the example:\n\n```json\n{\n  \"type\": \"TIME_SERIES\",\n  \"key\": \"temperature\"\n}\n```\n\n## Value Type and Operations\n\nProvides a hint about the data type of the entity field that is defined in the filter key. The value type impacts the list of possible operations that you may use in the corresponding predicate. For example, you may use 'STARTS_WITH' or 'END_WITH', but you can't use 'GREATER_OR_EQUAL' for string values.The following filter value types and corresponding predicate operations are supported: \n\n * 'STRING' - used to filter any 'String' or 'JSON' values. Operations: EQUAL, NOT_EQUAL, STARTS_WITH, ENDS_WITH, CONTAINS, NOT_CONTAINS; \n * 'NUMERIC' - used for 'Long' and 'Double' values. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; \n * 'BOOLEAN' - used for boolean values. Operations: EQUAL, NOT_EQUAL;\n * 'DATE_TIME' - similar to numeric, transforms value to milliseconds since epoch. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; \n\n\n\n\n## Filter Predicate\n\nFilter Predicate defines the logical expression to evaluate. The list of available operations depends on the filter value type, see above. Platform supports 4 predicate types: 'STRING', 'NUMERIC', 'BOOLEAN' and 'COMPLEX'. The last one allows to combine multiple operations over one filter key.\n\nSimple predicate example to check 'value < 100': \n\n```json\n{\n  \"operation\": \"LESS\",\n  \"value\": {\n    \"userValue\": null,\n    \"defaultValue\": 100,\n    \"dynamicValue\": null\n  },\n  \"type\": \"NUMERIC\"\n}\n```\n\nComplex predicate example, to check 'value < 10 or value > 20': \n\n```json\n{\n  \"type\": \"COMPLEX\",\n  \"operation\": \"OR\",\n  \"predicates\": [\n    {\n      \"operation\": \"LESS\",\n      \"value\": {\n        \"userValue\": null,\n        \"defaultValue\": 10,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    },\n    {\n      \"operation\": \"GREATER\",\n      \"value\": {\n        \"userValue\": null,\n        \"defaultValue\": 20,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    }\n  ]\n}\n```\n\nMore complex predicate example, to check 'value < 10 or (value > 50 && value < 60)': \n\n```json\n{\n  \"type\": \"COMPLEX\",\n  \"operation\": \"OR\",\n  \"predicates\": [\n    {\n      \"operation\": \"LESS\",\n      \"value\": {\n        \"userValue\": null,\n        \"defaultValue\": 10,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    },\n    {\n      \"type\": \"COMPLEX\",\n      \"operation\": \"AND\",\n      \"predicates\": [\n        {\n          \"operation\": \"GREATER\",\n          \"value\": {\n            \"userValue\": null,\n            \"defaultValue\": 50,\n            \"dynamicValue\": null\n          },\n          \"type\": \"NUMERIC\"\n        },\n        {\n          \"operation\": \"LESS\",\n          \"value\": {\n            \"userValue\": null,\n            \"defaultValue\": 60,\n            \"dynamicValue\": null\n          },\n          \"type\": \"NUMERIC\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nYou may also want to replace hardcoded values (for example, temperature > 20) with the more dynamic expression (for example, temperature > value of the tenant attribute with key 'temperatureThreshold'). It is possible to use 'dynamicValue' to define attribute of the tenant, customer or device. See example below:\n\n```json\n{\n  \"operation\": \"GREATER\",\n  \"value\": {\n    \"userValue\": null,\n    \"defaultValue\": 0,\n    \"dynamicValue\": {\n      \"inherit\": false,\n      \"sourceType\": \"CURRENT_TENANT\",\n      \"sourceAttribute\": \"temperatureThreshold\"\n    }\n  },\n  \"type\": \"NUMERIC\"\n}\n```\n\nNote that you may use 'CURRENT_DEVICE', 'CURRENT_CUSTOMER' and 'CURRENT_TENANT' as a 'sourceType'. The 'defaultValue' is used when the attribute with such a name is not defined for the chosen source. The 'sourceAttribute' can be inherited from the owner of the specified 'sourceType' if 'inherit' is set to true.\n\n# Provision Configuration\n\nThere are 3 types of device provision configuration for the device profile: \n * 'DISABLED';\n * 'ALLOW_CREATE_NEW_DEVICES';\n * 'CHECK_PRE_PROVISIONED_DEVICES'.\n\nPlease refer to the [docs](https://thingsboard.io/docs/user-guide/device-provisioning/) for more details.\n\n# Transport Configuration\n\n5 transport configuration types are available:\n * 'DEFAULT';\n * 'MQTT';\n * 'LWM2M';\n * 'COAP';\n * 'SNMP'.\n\nDefault type supports basic MQTT, HTTP, CoAP and LwM2M transports. Please refer to the [docs](https://thingsboard.io/docs/user-guide/device-profiles/#transport-configuration) for more details about other types.\n\nSee another example of COAP transport configuration below:\n\n```json\n{\n   \"type\":\"COAP\",\n   \"clientSettings\":{\n      \"edrxCycle\":null,\n      \"powerMode\":\"DRX\",\n      \"psmActivityTimer\":null,\n      \"pagingTransmissionWindow\":null\n   },\n   \"coapDeviceTypeConfiguration\":{\n      \"coapDeviceType\":\"DEFAULT\",\n      \"transportPayloadTypeConfiguration\":{\n         \"transportPayloadType\":\"JSON\"\n      }\n   }\n}\n```\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create Or Update Device Profile (saveDeviceProfile)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the device profile."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.DeviceProfile" ],
  "argumentsNames" : [ "deviceProfile" ],
  "id" : 20813,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DeviceProfile",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteDeviceProfile",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfile/{deviceProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the device profile. Referencing non-existing device profile Id will cause an error. Can't delete the device profile if it is referenced by existing devices.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Delete device profile (deleteDeviceProfile)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceProfileId" ],
  "id" : 20814,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setDefaultDeviceProfile",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/deviceProfile/{deviceProfileId}/default"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Marks device profile as default within a tenant scope.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Make Device Profile Default (setDefaultDeviceProfile)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strDeviceProfileId" ],
  "id" : 20815,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.DeviceProfile",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceProfiles",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/deviceProfiles"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices profile objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Device Profiles (getDeviceProfiles)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device profile name."
    }, {
      "allowableValues" : "createdTime, name, type, transportType, description, isDefault",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20816,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceProfileInfos",
  "namespce" : "org.thingsboard.server.controller.DeviceProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/deviceProfileInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of devices profile info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Device Profile Info is a lightweight object that includes main information about Device Profile excluding the heavyweight configuration object. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Device Profiles for transport type (getDeviceProfileInfos)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the device profile name."
    }, {
      "allowableValues" : "createdTime, name, type, transportType, description, isDefault",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "allowableValues" : "DEFAULT, MQTT, COAP, LWM2M, SNMP",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Type of the transport"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "transportType" ],
  "id" : 20817,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.DeviceProfileController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "isEdgesSupportEnabled",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/edges/enabled"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns 'true' if edges support enabled on server, 'false' - otherwise.",
      "type" : "java.lang.String",
      "value" : "Is edges support enabled (isEdgesSupportEnabled)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20838,
  "type" : "method",
  "returnType" : "boolean",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeById",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Edge object based on the provided Edge Id. If the user has the authority of 'Tenant Administrator', the server checks that the edge is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the edge is assigned to the same customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Edge (getEdgeById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20839,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeInfoById",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/edge/info/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Edge Info object based on the provided Edge Id. If the user has the authority of 'Tenant Administrator', the server checks that the edge is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the edge is assigned to the same customer.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Edge Info (getEdgeInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20840,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.EdgeInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveEdge",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Edge. When creating edge, platform generates Edge Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created edge id will be present in the response. Specify existing Edge id to update the edge. Referencing non-existing Edge Id will cause 'Not Found' error.\n\nEdge name is unique in the scope of tenant. Use unique identifiers like MAC or IMEI for the edge names and non-unique 'label' field for user-friendly visualization purposes.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create Or Update Edge (saveEdge)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the edge.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.edge.Edge" ],
  "argumentsNames" : [ "edge" ],
  "id" : 20841,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteEdge",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the edge. Referencing non-existing edge Id will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete edge (deleteEdge)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20843,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdges",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/edges"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of edges owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Edges (getEdges)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the edge name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20844,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignEdgeToCustomer",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/edge/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of the edge to customer. Customer will be able to query edge afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign edge to customer (assignEdgeToCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "edgeId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "strEdgeId" ],
  "id" : 20845,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignEdgeFromCustomer",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/edge/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the edge to customer. Customer will not be able to query edge afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign edge from customer (unassignEdgeFromCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20846,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignEdgeToPublicCustomer",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/public/edge/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Edge will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the edge.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Make edge publicly available (assignEdgeToPublicCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20847,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantEdges",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/edges"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of edges owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Edges (getTenantEdges)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge type. For example, 'default'"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the edge name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20848,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantEdgeInfos",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/edgeInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of edges info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Edge Info is an extension of the default Edge object that contains information about the assigned customer name. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Edge Infos (getTenantEdgeInfos)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge type. For example, 'default'"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the edge name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20849,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantEdge",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "edgeName",
      "type" : "java.lang.Enum",
      "value" : "/tenant/edges"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Requested edge must be owned by tenant or customer that the user belongs to. Edge name is an unique property of edge. So it can be used to identify the edge.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Tenant Edge (getTenantEdge)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Unique name of the edge",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "edgeName" ],
  "id" : 20850,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setEdgeRootRuleChain",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/{ruleChainId}/root"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Change root rule chain of the edge to the new provided rule chain. \nThis operation will send a notification to update root rule chain on remote edge service.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Set root rule chain for provided edge (setEdgeRootRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strRuleChainId" ],
  "id" : 20851,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.edge.Edge",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerEdges",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/edges"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of edges objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Customer Edges (getCustomerEdges)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge type. For example, 'default'"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the edge name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20852,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerEdgeInfos",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/edgeInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of edges info objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Edge Info is an extension of the default Edge object that contains information about the assigned customer name. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Customer Edge Infos (getCustomerEdgeInfos)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing the edge type. For example, 'default'"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the edge name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 20853,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgesByIds",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "edgeIds",
      "type" : "java.lang.Enum",
      "value" : "/edges"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeIds"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Requested edges must be owned by tenant or assigned to customer which user is performing the request.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Edges By Ids (getEdgesByIds)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A list of edges ids, separated by comma ','",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String[]" ],
  "argumentsNames" : [ "strEdgeIds" ],
  "id" : 20854,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByQuery",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edges"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all edges that are related to the specific entity. The entity id, relation type, edge types, depth of the search, and other query parameters defined using complex 'EdgeSearchQuery' object. See 'Model' tab of the Parameters for more info.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Find related edges (findByQuery)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.edge.EdgeSearchQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 20855,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeTypes",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/edge/types"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique edge types based on edges that are either owned by the tenant or assigned to the customer which user is performing the request.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Edge Types (getEdgeTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 20856,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "syncEdge",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/sync/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Starts synchronization process between edge and cloud. \nAll entities that are assigned to particular edge are going to be send to remote edge service.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Sync edge (syncEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20857,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findMissingToRelatedRuleChains",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/edge/missingToRelatedRuleChains/{edgeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of rule chains ids that are not assigned to particular edge, but these rule chains are present in the already assigned rule chains to edge.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Find missing rule chains (findMissingToRelatedRuleChains)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId" ],
  "id" : 20858,
  "type" : "method",
  "returnType" : "java.lang.String",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "processEdgesBulkImport",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/PostMapping;" : {
      "type" : "java.lang.String",
      "value" : "/edge/bulk_import"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "There's an ability to import the bulk of edges using the only .csv file.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Import the bulk of edges (processEdgesBulkImport)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.service.importing.BulkImportRequest" ],
  "argumentsNames" : [ "request" ],
  "id" : 20859,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.importing.BulkImportResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "checkInstance",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/license/checkInstance"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Checks license request from edge service by forwarding request to license portal.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Check edge license (checkInstance)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "com.fasterxml.jackson.databind.JsonNode" ],
  "argumentsNames" : [ "request" ],
  "id" : 20861,
  "type" : "method",
  "returnType" : "org.springframework.http.ResponseEntity",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "activateInstance",
  "namespce" : "org.thingsboard.server.controller.EdgeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "params" : [ "releaseDate", "licenseSecret" ],
      "type" : "java.lang.Enum",
      "value" : "/license/activateInstance"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Activates edge license on license portal.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Activate edge instance (activateInstance)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "licenseSecret", "releaseDate" ],
  "id" : 20862,
  "type" : "method",
  "returnType" : "org.springframework.http.ResponseEntity",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.EdgeController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeEvents",
  "namespce" : "org.thingsboard.server.controller.EdgeEventController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/events"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of edge events for the requested edge. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Edge Events (getEdgeEvents)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the edge event type name."
    }, {
      "allowableValues" : "createdTime, name, type, label, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Timestamp. Edge events with creation time before it won't be queried"
    }, {
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Timestamp. Edge events with creation time after it won't be queried"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEdgeId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 20892,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.EdgeEventController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "countEntitiesByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityQueryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/entitiesQuery/count"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Allows to run complex queries to search the count of platform entities (devices, assets, customers, etc) based on the combination of main entity filter and multiple key filters. Returns the number of entities that match the query definition.\n\n# Query Definition\n\n\n\nMain **entity filter** is mandatory and defines generic search criteria. For example, \"find all devices with profile 'Moisture Sensor'\" or \"Find all devices related to asset 'Building A'\"\n\nOptional **key filters** allow to filter results of the entity filter by complex criteria against main entity fields (name, label, type, etc), attributes and telemetry. For example, \"temperature > 20 or temperature< 10\" or \"name starts with 'T', and attribute 'model' is 'T1000', and timeseries field 'batteryLevel' > 40\".\n\nLet's review the example:\n\n```json\n{\n  \"entityFilter\": {\n    \"type\": \"entityType\",\n    \"entityType\": \"DEVICE\"\n  },\n  \"keyFilters\": [\n    {\n      \"key\": {\n        \"type\": \"ATTRIBUTE\",\n        \"key\": \"active\"\n      },\n      \"valueType\": \"BOOLEAN\",\n      \"predicate\": {\n        \"operation\": \"EQUAL\",\n        \"value\": {\n          \"defaultValue\": true,\n          \"dynamicValue\": null\n        },\n        \"type\": \"BOOLEAN\"\n      }\n    }\n  ]\n}\n```\n\n Example mentioned above search all devices which have attribute 'active' set to 'true'. Now let's review available entity filters and key filters syntax:\n\n # Entity Filters\nEntity Filter body depends on the 'type' parameter. Let's review available entity filter types. In fact, they do correspond to available dashboard aliases.\n\n## Single Entity\n\nAllows to filter only one entity based on the id. For example, this entity filter selects certain device:\n\n```json\n{\n  \"type\": \"singleEntity\",\n  \"singleEntity\": {\n    \"id\": \"d521edb0-2a7a-11ec-94eb-213c95f54092\",\n    \"entityType\": \"DEVICE\"\n  }\n}\n```\n\n## Entity List Filter\n\nAllows to filter entities of the same type using their ids. For example, this entity filter selects two devices:\n\n```json\n{\n  \"type\": \"entityList\",\n  \"entityType\": \"DEVICE\",\n  \"entityList\": [\n    \"e6501f30-2a7a-11ec-94eb-213c95f54092\",\n    \"e6657bf0-2a7a-11ec-94eb-213c95f54092\"\n  ]\n}\n```\n\n## Entity Name Filter\n\nAllows to filter entities of the same type using the **'starts with'** expression over entity name. For example, this entity filter selects all devices which name starts with 'Air Quality':\n\n```json\n{\n  \"type\": \"entityName\",\n  \"entityType\": \"DEVICE\",\n  \"entityNameFilter\": \"Air Quality\"\n}\n```\n\n## Entity Type Filter\n\nAllows to filter entities based on their type (CUSTOMER, USER, DASHBOARD, ASSET, DEVICE, etc)For example, this entity filter selects all tenant customers:\n\n```json\n{\n  \"type\": \"entityType\",\n  \"entityType\": \"CUSTOMER\"\n}\n```\n\n## Asset Type Filter\n\nAllows to filter assets based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'charging station' assets which name starts with 'Tesla':\n\n```json\n{\n  \"type\": \"assetType\",\n  \"assetType\": \"charging station\",\n  \"assetNameFilter\": \"Tesla\"\n}\n```\n\n## Device Type Filter\n\nAllows to filter devices based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Temperature Sensor' devices which name starts with 'ABC':\n\n```json\n{\n  \"type\": \"deviceType\",\n  \"deviceType\": \"Temperature Sensor\",\n  \"deviceNameFilter\": \"ABC\"\n}\n```\n\n## Edge Type Filter\n\nAllows to filter edge instances based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Factory' edge instances which name starts with 'Nevada':\n\n```json\n{\n  \"type\": \"edgeType\",\n  \"edgeType\": \"Factory\",\n  \"edgeNameFilter\": \"Nevada\"\n}\n```\n\n## Entity View Filter\n\nAllows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':\n\n```json\n{\n  \"type\": \"entityViewType\",\n  \"entityViewType\": \"Concrete Mixer\",\n  \"entityViewNameFilter\": \"CAT\"\n}\n```\n\n## Api Usage Filter\n\nAllows to query for Api Usage based on optional customer id. If the customer id is not set, returns current tenant API usage.For example, this entity filter selects the 'Api Usage' entity for customer with id 'e6501f30-2a7a-11ec-94eb-213c95f54092':\n\n```json\n{\n  \"type\": \"apiUsageState\",\n  \"customerId\": {\n    \"id\": \"d521edb0-2a7a-11ec-94eb-213c95f54092\",\n    \"entityType\": \"CUSTOMER\"\n  }\n}\n```\n\n## Relations Query Filter\n\nAllows to filter entities that are related to the provided root entity. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'filter' object allows you to define the relation type and set of acceptable entity types to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only those who match the 'filters'.\n\nFor example, this entity filter selects all devices and assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092':\n\n```json\n{\n  \"type\": \"relationsQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e51de0c0-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 1,\n  \"fetchLastLevelOnly\": false,\n  \"filters\": [\n    {\n      \"relationType\": \"Contains\",\n      \"entityTypes\": [\n        \"DEVICE\",\n        \"ASSET\"\n      ]\n    }\n  ]\n}\n```\n\n## Asset Search Query\n\nAllows to filter assets that are related to the provided root entity. Filters related assets based on the relation type and set of asset types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'assetTypes' defines the type of the asset to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only assets that match 'relationType' and 'assetTypes' conditions.\n\nFor example, this entity filter selects 'charging station' assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"assetSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e51de0c0-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 1,\n  \"fetchLastLevelOnly\": false,\n  \"relationType\": \"Contains\",\n  \"assetTypes\": [\n    \"charging station\"\n  ]\n}\n```\n\n## Device Search Query\n\nAllows to filter devices that are related to the provided root entity. Filters related devices based on the relation type and set of device types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.\n\nFor example, this entity filter selects 'Charging port' and 'Air Quality Sensor' devices which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"deviceSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e52b0020-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 2,\n  \"fetchLastLevelOnly\": true,\n  \"relationType\": \"Contains\",\n  \"deviceTypes\": [\n    \"Air Quality Sensor\",\n    \"Charging port\"\n  ]\n}\n```\n\n## Entity View Query\n\nAllows to filter entity views that are related to the provided root entity. Filters related entity views based on the relation type and set of entity view types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'entityViewTypes' defines the type of the entity view to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.\n\nFor example, this entity filter selects 'Concrete mixer' entity views which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"entityViewSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e52b0020-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 1,\n  \"fetchLastLevelOnly\": false,\n  \"relationType\": \"Contains\",\n  \"entityViewTypes\": [\n    \"Concrete mixer\"\n  ]\n}\n```\n\n## Edge Search Query\n\nAllows to filter edge instances that are related to the provided root entity. Filters related edge instances based on the relation type and set of edge types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.\n\nFor example, this entity filter selects 'Factory' edge instances which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"deviceSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e52b0020-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 2,\n  \"fetchLastLevelOnly\": true,\n  \"relationType\": \"Contains\",\n  \"edgeTypes\": [\n    \"Factory\"\n  ]\n}\n```\n\n # Key Filters\nKey Filter allows you to define complex logical expressions over entity field, attribute or latest time-series value. The filter is defined using 'key', 'valueType' and 'predicate' objects. Single Entity Query may have zero, one or multiple predicates. If multiple filters are defined, they are evaluated using logical 'AND'. The example below checks that temperature of the entity is above 20 degrees:\n\n```json\n{\n  \"key\": {\n    \"type\": \"TIME_SERIES\",\n    \"key\": \"temperature\"\n  },\n  \"valueType\": \"NUMERIC\",\n  \"predicate\": {\n    \"operation\": \"GREATER\",\n    \"value\": {\n      \"defaultValue\": 20,\n      \"dynamicValue\": null\n    },\n    \"type\": \"NUMERIC\"\n  }\n}\n```\n\n Now let's review 'key', 'valueType' and 'predicate' objects in detail.\n\n## Filter Key\n\nFilter Key defines either entity field, attribute or telemetry. It is a JSON object that consists the key name and type. The following filter key types are supported: \n\n * 'CLIENT_ATTRIBUTE' - used for client attributes; \n * 'SHARED_ATTRIBUTE' - used for shared attributes; \n * 'SERVER_ATTRIBUTE' - used for server attributes; \n * 'ATTRIBUTE' - used for any of the above; \n * 'TIME_SERIES' - used for time-series values; \n * 'ENTITY_FIELD' - used for accessing entity fields like 'name', 'label', etc. The list of available fields depends on the entity type; \n * 'ALARM_FIELD' - similar to entity field, but is used in alarm queries only; \n\n\n Let's review the example:\n\n```json\n{\n  \"type\": \"TIME_SERIES\",\n  \"key\": \"temperature\"\n}\n```\n\n## Value Type and Operations\n\nProvides a hint about the data type of the entity field that is defined in the filter key. The value type impacts the list of possible operations that you may use in the corresponding predicate. For example, you may use 'STARTS_WITH' or 'END_WITH', but you can't use 'GREATER_OR_EQUAL' for string values.The following filter value types and corresponding predicate operations are supported: \n\n * 'STRING' - used to filter any 'String' or 'JSON' values. Operations: EQUAL, NOT_EQUAL, STARTS_WITH, ENDS_WITH, CONTAINS, NOT_CONTAINS; \n * 'NUMERIC' - used for 'Long' and 'Double' values. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; \n * 'BOOLEAN' - used for boolean values. Operations: EQUAL, NOT_EQUAL;\n * 'DATE_TIME' - similar to numeric, transforms value to milliseconds since epoch. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; \n\n\n## Filter Predicate\n\nFilter Predicate defines the logical expression to evaluate. The list of available operations depends on the filter value type, see above. Platform supports 4 predicate types: 'STRING', 'NUMERIC', 'BOOLEAN' and 'COMPLEX'. The last one allows to combine multiple operations over one filter key.\n\nSimple predicate example to check 'value < 100': \n\n```json\n{\n  \"operation\": \"LESS\",\n  \"value\": {\n    \"defaultValue\": 100,\n    \"dynamicValue\": null\n  },\n  \"type\": \"NUMERIC\"\n}\n```\n\nComplex predicate example, to check 'value < 10 or value > 20': \n\n```json\n{\n  \"type\": \"COMPLEX\",\n  \"operation\": \"OR\",\n  \"predicates\": [\n    {\n      \"operation\": \"LESS\",\n      \"value\": {\n        \"defaultValue\": 10,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    },\n    {\n      \"operation\": \"GREATER\",\n      \"value\": {\n        \"defaultValue\": 20,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    }\n  ]\n}\n```\n\nMore complex predicate example, to check 'value < 10 or (value > 50 && value < 60)': \n\n```json\n{\n  \"type\": \"COMPLEX\",\n  \"operation\": \"OR\",\n  \"predicates\": [\n    {\n      \"operation\": \"LESS\",\n      \"value\": {\n        \"defaultValue\": 10,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    },\n    {\n      \"type\": \"COMPLEX\",\n      \"operation\": \"AND\",\n      \"predicates\": [\n        {\n          \"operation\": \"GREATER\",\n          \"value\": {\n            \"defaultValue\": 50,\n            \"dynamicValue\": null\n          },\n          \"type\": \"NUMERIC\"\n        },\n        {\n          \"operation\": \"LESS\",\n          \"value\": {\n            \"defaultValue\": 60,\n            \"dynamicValue\": null\n          },\n          \"type\": \"NUMERIC\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n You may also want to replace hardcoded values (for example, temperature > 20) with the more dynamic expression (for example, temperature > 'value of the tenant attribute with key 'temperatureThreshold'). It is possible to use 'dynamicValue' to define attribute of the tenant, customer or user that is performing the API call. See example below: \n\n```json\n{\n  \"operation\": \"GREATER\",\n  \"value\": {\n    \"defaultValue\": 0,\n    \"dynamicValue\": {\n      \"sourceType\": \"CURRENT_USER\",\n      \"sourceAttribute\": \"temperatureThreshold\"\n    }\n  },\n  \"type\": \"NUMERIC\"\n}\n```\n\n Note that you may use 'CURRENT_USER', 'CURRENT_CUSTOMER' and 'CURRENT_TENANT' as a 'sourceType'. The 'defaultValue' is used when the attribute with such a name is not defined for the chosen source.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Count Entities by Query"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the entity count query. See API call notes above for more details."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.query.EntityCountQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 20895,
  "type" : "method",
  "returnType" : "long",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findEntityDataByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityQueryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/entitiesQuery/find"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Allows to run complex queries over platform entities (devices, assets, customers, etc) based on the combination of main entity filter and multiple key filters. Returns the paginated result of the query that contains requested entity fields and latest values of requested attributes and time-series data.\n\n# Query Definition\n\n\n\nMain **entity filter** is mandatory and defines generic search criteria. For example, \"find all devices with profile 'Moisture Sensor'\" or \"Find all devices related to asset 'Building A'\"\n\nOptional **key filters** allow to filter results of the **entity filter** by complex criteria against main entity fields (name, label, type, etc), attributes and telemetry. For example, \"temperature > 20 or temperature< 10\" or \"name starts with 'T', and attribute 'model' is 'T1000', and timeseries field 'batteryLevel' > 40\".\n\nThe **entity fields** and **latest values** contains list of entity fields and latest attribute/telemetry fields to fetch for each entity.\n\nThe **page link** contains information about the page to fetch and the sort ordering.\n\nLet's review the example:\n\n```json\n{\n  \"entityFilter\": {\n    \"type\": \"entityType\",\n    \"resolveMultiple\": true,\n    \"entityType\": \"DEVICE\"\n  },\n  \"keyFilters\": [\n    {\n      \"key\": {\n        \"type\": \"TIME_SERIES\",\n        \"key\": \"temperature\"\n      },\n      \"valueType\": \"NUMERIC\",\n      \"predicate\": {\n        \"operation\": \"GREATER\",\n        \"value\": {\n          \"defaultValue\": 0,\n          \"dynamicValue\": {\n            \"sourceType\": \"CURRENT_USER\",\n            \"sourceAttribute\": \"temperatureThreshold\",\n            \"inherit\": false\n          }\n        },\n        \"type\": \"NUMERIC\"\n      }\n    }\n  ],\n  \"entityFields\": [\n    {\n      \"type\": \"ENTITY_FIELD\",\n      \"key\": \"name\"\n    },\n    {\n      \"type\": \"ENTITY_FIELD\",\n      \"key\": \"label\"\n    },\n    {\n      \"type\": \"ENTITY_FIELD\",\n      \"key\": \"additionalInfo\"\n    }\n  ],\n  \"latestValues\": [\n    {\n      \"type\": \"ATTRIBUTE\",\n      \"key\": \"model\"\n    },\n    {\n      \"type\": \"TIME_SERIES\",\n      \"key\": \"temperature\"\n    }\n  ],\n  \"pageLink\": {\n    \"page\": 0,\n    \"pageSize\": 10,\n    \"sortOrder\": {\n      \"key\": {\n        \"key\": \"name\",\n        \"type\": \"ENTITY_FIELD\"\n      },\n      \"direction\": \"ASC\"\n    }\n  }\n}\n```\n\n Example mentioned above search all devices which have attribute 'active' set to 'true'. Now let's review available entity filters and key filters syntax:\n\n # Entity Filters\nEntity Filter body depends on the 'type' parameter. Let's review available entity filter types. In fact, they do correspond to available dashboard aliases.\n\n## Single Entity\n\nAllows to filter only one entity based on the id. For example, this entity filter selects certain device:\n\n```json\n{\n  \"type\": \"singleEntity\",\n  \"singleEntity\": {\n    \"id\": \"d521edb0-2a7a-11ec-94eb-213c95f54092\",\n    \"entityType\": \"DEVICE\"\n  }\n}\n```\n\n## Entity List Filter\n\nAllows to filter entities of the same type using their ids. For example, this entity filter selects two devices:\n\n```json\n{\n  \"type\": \"entityList\",\n  \"entityType\": \"DEVICE\",\n  \"entityList\": [\n    \"e6501f30-2a7a-11ec-94eb-213c95f54092\",\n    \"e6657bf0-2a7a-11ec-94eb-213c95f54092\"\n  ]\n}\n```\n\n## Entity Name Filter\n\nAllows to filter entities of the same type using the **'starts with'** expression over entity name. For example, this entity filter selects all devices which name starts with 'Air Quality':\n\n```json\n{\n  \"type\": \"entityName\",\n  \"entityType\": \"DEVICE\",\n  \"entityNameFilter\": \"Air Quality\"\n}\n```\n\n## Entity Type Filter\n\nAllows to filter entities based on their type (CUSTOMER, USER, DASHBOARD, ASSET, DEVICE, etc)For example, this entity filter selects all tenant customers:\n\n```json\n{\n  \"type\": \"entityType\",\n  \"entityType\": \"CUSTOMER\"\n}\n```\n\n## Asset Type Filter\n\nAllows to filter assets based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'charging station' assets which name starts with 'Tesla':\n\n```json\n{\n  \"type\": \"assetType\",\n  \"assetType\": \"charging station\",\n  \"assetNameFilter\": \"Tesla\"\n}\n```\n\n## Device Type Filter\n\nAllows to filter devices based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Temperature Sensor' devices which name starts with 'ABC':\n\n```json\n{\n  \"type\": \"deviceType\",\n  \"deviceType\": \"Temperature Sensor\",\n  \"deviceNameFilter\": \"ABC\"\n}\n```\n\n## Edge Type Filter\n\nAllows to filter edge instances based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Factory' edge instances which name starts with 'Nevada':\n\n```json\n{\n  \"type\": \"edgeType\",\n  \"edgeType\": \"Factory\",\n  \"edgeNameFilter\": \"Nevada\"\n}\n```\n\n## Entity View Filter\n\nAllows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':\n\n```json\n{\n  \"type\": \"entityViewType\",\n  \"entityViewType\": \"Concrete Mixer\",\n  \"entityViewNameFilter\": \"CAT\"\n}\n```\n\n## Api Usage Filter\n\nAllows to query for Api Usage based on optional customer id. If the customer id is not set, returns current tenant API usage.For example, this entity filter selects the 'Api Usage' entity for customer with id 'e6501f30-2a7a-11ec-94eb-213c95f54092':\n\n```json\n{\n  \"type\": \"apiUsageState\",\n  \"customerId\": {\n    \"id\": \"d521edb0-2a7a-11ec-94eb-213c95f54092\",\n    \"entityType\": \"CUSTOMER\"\n  }\n}\n```\n\n## Relations Query Filter\n\nAllows to filter entities that are related to the provided root entity. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'filter' object allows you to define the relation type and set of acceptable entity types to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only those who match the 'filters'.\n\nFor example, this entity filter selects all devices and assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092':\n\n```json\n{\n  \"type\": \"relationsQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e51de0c0-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 1,\n  \"fetchLastLevelOnly\": false,\n  \"filters\": [\n    {\n      \"relationType\": \"Contains\",\n      \"entityTypes\": [\n        \"DEVICE\",\n        \"ASSET\"\n      ]\n    }\n  ]\n}\n```\n\n## Asset Search Query\n\nAllows to filter assets that are related to the provided root entity. Filters related assets based on the relation type and set of asset types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'assetTypes' defines the type of the asset to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only assets that match 'relationType' and 'assetTypes' conditions.\n\nFor example, this entity filter selects 'charging station' assets which are related to the asset with id 'e51de0c0-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"assetSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e51de0c0-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 1,\n  \"fetchLastLevelOnly\": false,\n  \"relationType\": \"Contains\",\n  \"assetTypes\": [\n    \"charging station\"\n  ]\n}\n```\n\n## Device Search Query\n\nAllows to filter devices that are related to the provided root entity. Filters related devices based on the relation type and set of device types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.\n\nFor example, this entity filter selects 'Charging port' and 'Air Quality Sensor' devices which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"deviceSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e52b0020-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 2,\n  \"fetchLastLevelOnly\": true,\n  \"relationType\": \"Contains\",\n  \"deviceTypes\": [\n    \"Air Quality Sensor\",\n    \"Charging port\"\n  ]\n}\n```\n\n## Entity View Query\n\nAllows to filter entity views that are related to the provided root entity. Filters related entity views based on the relation type and set of entity view types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'entityViewTypes' defines the type of the entity view to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.\n\nFor example, this entity filter selects 'Concrete mixer' entity views which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"entityViewSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e52b0020-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 1,\n  \"fetchLastLevelOnly\": false,\n  \"relationType\": \"Contains\",\n  \"entityViewTypes\": [\n    \"Concrete mixer\"\n  ]\n}\n```\n\n## Edge Search Query\n\nAllows to filter edge instances that are related to the provided root entity. Filters related edge instances based on the relation type and set of edge types. Possible direction values are 'TO' and 'FROM'. The 'maxLevel' defines how many relation levels should the query search 'recursively'. Assuming the 'maxLevel' is > 1, the 'fetchLastLevelOnly' defines either to return all related entities or only entities that are on the last level of relations. The 'relationType' defines the type of the relation to search for. The 'deviceTypes' defines the type of the device to search for. The relation query calculates all related entities, even if they are filtered using different relation types, and then extracts only devices that match 'relationType' and 'deviceTypes' conditions.\n\nFor example, this entity filter selects 'Factory' edge instances which are related to the asset with id 'e52b0020-2a7a-11ec-94eb-213c95f54092' using 'Contains' relation:\n\n```json\n{\n  \"type\": \"deviceSearchQuery\",\n  \"rootEntity\": {\n    \"entityType\": \"ASSET\",\n    \"id\": \"e52b0020-2a7a-11ec-94eb-213c95f54092\"\n  },\n  \"direction\": \"FROM\",\n  \"maxLevel\": 2,\n  \"fetchLastLevelOnly\": true,\n  \"relationType\": \"Contains\",\n  \"edgeTypes\": [\n    \"Factory\"\n  ]\n}\n```\n\n # Key Filters\nKey Filter allows you to define complex logical expressions over entity field, attribute or latest time-series value. The filter is defined using 'key', 'valueType' and 'predicate' objects. Single Entity Query may have zero, one or multiple predicates. If multiple filters are defined, they are evaluated using logical 'AND'. The example below checks that temperature of the entity is above 20 degrees:\n\n```json\n{\n  \"key\": {\n    \"type\": \"TIME_SERIES\",\n    \"key\": \"temperature\"\n  },\n  \"valueType\": \"NUMERIC\",\n  \"predicate\": {\n    \"operation\": \"GREATER\",\n    \"value\": {\n      \"defaultValue\": 20,\n      \"dynamicValue\": null\n    },\n    \"type\": \"NUMERIC\"\n  }\n}\n```\n\n Now let's review 'key', 'valueType' and 'predicate' objects in detail.\n\n## Filter Key\n\nFilter Key defines either entity field, attribute or telemetry. It is a JSON object that consists the key name and type. The following filter key types are supported: \n\n * 'CLIENT_ATTRIBUTE' - used for client attributes; \n * 'SHARED_ATTRIBUTE' - used for shared attributes; \n * 'SERVER_ATTRIBUTE' - used for server attributes; \n * 'ATTRIBUTE' - used for any of the above; \n * 'TIME_SERIES' - used for time-series values; \n * 'ENTITY_FIELD' - used for accessing entity fields like 'name', 'label', etc. The list of available fields depends on the entity type; \n * 'ALARM_FIELD' - similar to entity field, but is used in alarm queries only; \n\n\n Let's review the example:\n\n```json\n{\n  \"type\": \"TIME_SERIES\",\n  \"key\": \"temperature\"\n}\n```\n\n## Value Type and Operations\n\nProvides a hint about the data type of the entity field that is defined in the filter key. The value type impacts the list of possible operations that you may use in the corresponding predicate. For example, you may use 'STARTS_WITH' or 'END_WITH', but you can't use 'GREATER_OR_EQUAL' for string values.The following filter value types and corresponding predicate operations are supported: \n\n * 'STRING' - used to filter any 'String' or 'JSON' values. Operations: EQUAL, NOT_EQUAL, STARTS_WITH, ENDS_WITH, CONTAINS, NOT_CONTAINS; \n * 'NUMERIC' - used for 'Long' and 'Double' values. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; \n * 'BOOLEAN' - used for boolean values. Operations: EQUAL, NOT_EQUAL;\n * 'DATE_TIME' - similar to numeric, transforms value to milliseconds since epoch. Operations: EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL; \n\n\n## Filter Predicate\n\nFilter Predicate defines the logical expression to evaluate. The list of available operations depends on the filter value type, see above. Platform supports 4 predicate types: 'STRING', 'NUMERIC', 'BOOLEAN' and 'COMPLEX'. The last one allows to combine multiple operations over one filter key.\n\nSimple predicate example to check 'value < 100': \n\n```json\n{\n  \"operation\": \"LESS\",\n  \"value\": {\n    \"defaultValue\": 100,\n    \"dynamicValue\": null\n  },\n  \"type\": \"NUMERIC\"\n}\n```\n\nComplex predicate example, to check 'value < 10 or value > 20': \n\n```json\n{\n  \"type\": \"COMPLEX\",\n  \"operation\": \"OR\",\n  \"predicates\": [\n    {\n      \"operation\": \"LESS\",\n      \"value\": {\n        \"defaultValue\": 10,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    },\n    {\n      \"operation\": \"GREATER\",\n      \"value\": {\n        \"defaultValue\": 20,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    }\n  ]\n}\n```\n\nMore complex predicate example, to check 'value < 10 or (value > 50 && value < 60)': \n\n```json\n{\n  \"type\": \"COMPLEX\",\n  \"operation\": \"OR\",\n  \"predicates\": [\n    {\n      \"operation\": \"LESS\",\n      \"value\": {\n        \"defaultValue\": 10,\n        \"dynamicValue\": null\n      },\n      \"type\": \"NUMERIC\"\n    },\n    {\n      \"type\": \"COMPLEX\",\n      \"operation\": \"AND\",\n      \"predicates\": [\n        {\n          \"operation\": \"GREATER\",\n          \"value\": {\n            \"defaultValue\": 50,\n            \"dynamicValue\": null\n          },\n          \"type\": \"NUMERIC\"\n        },\n        {\n          \"operation\": \"LESS\",\n          \"value\": {\n            \"defaultValue\": 60,\n            \"dynamicValue\": null\n          },\n          \"type\": \"NUMERIC\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n You may also want to replace hardcoded values (for example, temperature > 20) with the more dynamic expression (for example, temperature > 'value of the tenant attribute with key 'temperatureThreshold'). It is possible to use 'dynamicValue' to define attribute of the tenant, customer or user that is performing the API call. See example below: \n\n```json\n{\n  \"operation\": \"GREATER\",\n  \"value\": {\n    \"defaultValue\": 0,\n    \"dynamicValue\": {\n      \"sourceType\": \"CURRENT_USER\",\n      \"sourceAttribute\": \"temperatureThreshold\"\n    }\n  },\n  \"type\": \"NUMERIC\"\n}\n```\n\n Note that you may use 'CURRENT_USER', 'CURRENT_CUSTOMER' and 'CURRENT_TENANT' as a 'sourceType'. The 'defaultValue' is used when the attribute with such a name is not defined for the chosen source.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Find Entity Data by Query"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the entity data query. See API call notes above for more details."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.query.EntityDataQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 20896,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findAlarmDataByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityQueryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/alarmsQuery/find"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "This method description defines how Alarm Data Query extends the Entity Data Query. See method 'Find Entity Data by Query' first to get the info about 'Entity Data Query'.\n\n The platform will first search the entities that match the entity and key filters. Then, the platform will use 'Alarm Page Link' to filter the alarms related to those entities. Finally, platform fetch the properties of alarm that are defined in the **'alarmFields'** and combine them with the other entity, attribute and latest time-series fields to return the result. \n\n See example of the alarm query below. The query will search first 100 active alarms with type 'Temperature Alarm' or 'Fire Alarm' for any device with current temperature > 0. The query will return combination of the entity fields: name of the device, device model and latest temperature reading and alarms fields: createdTime, type, severity and status: \n\n```json\n{\n  \"entityFilter\": {\n    \"type\": \"entityType\",\n    \"resolveMultiple\": true,\n    \"entityType\": \"DEVICE\"\n  },\n  \"pageLink\": {\n    \"page\": 0,\n    \"pageSize\": 100,\n    \"textSearch\": null,\n    \"searchPropagatedAlarms\": false,\n    \"statusList\": [\n      \"ACTIVE\"\n    ],\n    \"severityList\": [\n      \"CRITICAL\",\n      \"MAJOR\"\n    ],\n    \"typeList\": [\n      \"Temperature Alarm\",\n      \"Fire Alarm\"\n    ],\n    \"sortOrder\": {\n      \"key\": {\n        \"key\": \"createdTime\",\n        \"type\": \"ALARM_FIELD\"\n      },\n      \"direction\": \"DESC\"\n    },\n    \"timeWindow\": 86400000\n  },\n  \"keyFilters\": [\n    {\n      \"key\": {\n        \"type\": \"TIME_SERIES\",\n        \"key\": \"temperature\"\n      },\n      \"valueType\": \"NUMERIC\",\n      \"predicate\": {\n        \"operation\": \"GREATER\",\n        \"value\": {\n          \"defaultValue\": 0,\n          \"dynamicValue\": null\n        },\n        \"type\": \"NUMERIC\"\n      }\n    }\n  ],\n  \"alarmFields\": [\n    {\n      \"type\": \"ALARM_FIELD\",\n      \"key\": \"createdTime\"\n    },\n    {\n      \"type\": \"ALARM_FIELD\",\n      \"key\": \"type\"\n    },\n    {\n      \"type\": \"ALARM_FIELD\",\n      \"key\": \"severity\"\n    },\n    {\n      \"type\": \"ALARM_FIELD\",\n      \"key\": \"status\"\n    }\n  ],\n  \"entityFields\": [\n    {\n      \"type\": \"ENTITY_FIELD\",\n      \"key\": \"name\"\n    }\n  ],\n  \"latestValues\": [\n    {\n      \"type\": \"ATTRIBUTE\",\n      \"key\": \"model\"\n    },\n    {\n      \"type\": \"TIME_SERIES\",\n      \"key\": \"temperature\"\n    }\n  ]\n}\n```",
      "type" : "java.lang.String",
      "value" : "Find Alarms by Query"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the alarm data query. See API call notes above for more details."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.query.AlarmDataQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 20897,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findEntityTimeseriesAndAttributesKeysByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityQueryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/entitiesQuery/find/keys"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "attributes"
    }, {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "timeseries"
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Uses entity data query (see 'Find Entity Data by Query') to find first 100 entities. Then fetch and return all unique time-series and/or attribute keys. Used mostly for UI hints.",
      "type" : "java.lang.String",
      "value" : "Find Entity Keys by Query"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Include all unique time-series keys to the result."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the entity data query. See API call notes above for more details."
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Include all unique attribute keys to the result."
    } ]
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.query.EntityDataQuery", "boolean", "boolean" ],
  "argumentsNames" : [ "query", "isTimeseries", "isAttributes" ],
  "id" : 20898,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.EntityQueryController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveRelation",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/relation"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or updates a relation between two entities in the platform. Relations unique key is a combination of from/to entity id and relation type group and relation type. \n\nIf the user has the authority of 'System Administrator', the server checks that 'from' and 'to' entities are owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that 'from' and 'to' entities are owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the 'from' and 'to' entities are assigned to the same customer.",
      "type" : "java.lang.String",
      "value" : "Create Relation (saveRelation)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the relation.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.relation.EntityRelation" ],
  "argumentsNames" : [ "relation" ],
  "id" : 20999,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteRelation",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "params" : [ "fromType", "fromId", "relationType", "toId", "toType" ],
      "type" : "java.lang.String",
      "value" : "/relation"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "fromType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "fromId"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "relationType"
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "toId"
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "toType"
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes a relation between two entities in the platform. \n\nIf the user has the authority of 'System Administrator', the server checks that 'from' and 'to' entities are owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that 'from' and 'to' entities are owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the 'from' and 'to' entities are assigned to the same customer.",
      "type" : "java.lang.String",
      "value" : "Delete Relation (deleteRelation)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing relation type between entities. For example, 'Contains', 'Manages'. It can be any string value.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strFromId", "strFromType", "strRelationType", "strRelationTypeGroup", "strToId", "strToType" ],
  "id" : 21000,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteRelations",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "params" : [ "entityType", "entityId" ],
      "type" : "java.lang.String",
      "value" : "/relations"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN','TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityId"
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes all the relation (both 'from' and 'to' direction) for the specified entity. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer.",
      "type" : "java.lang.String",
      "value" : "Delete Relations (deleteRelations)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strId", "strType" ],
  "id" : 21001,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getRelation",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "fromType", "fromId", "relationType", "toId", "toType" ],
      "type" : "java.lang.String",
      "value" : "/relation"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "fromType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "fromId"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "relationType"
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "toId"
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "toType"
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns relation object between two specified entities if present. Otherwise throws exception. \n\nIf the user has the authority of 'System Administrator', the server checks that 'from' and 'to' entities are owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that 'from' and 'to' entities are owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the 'from' and 'to' entities are assigned to the same customer.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Relation (getRelation)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing relation type between entities. For example, 'Contains', 'Manages'. It can be any string value.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strFromId", "strFromType", "strRelationType", "strRelationTypeGroup", "strToId", "strToType" ],
  "id" : 21002,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.relation.EntityRelation",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByFrom",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "fromType", "fromId" ],
      "type" : "java.lang.String",
      "value" : "/relations"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "fromType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "fromId"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of relation objects for the specified entity by the 'from' direction. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get List of Relations (findByFrom)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strFromId", "strFromType", "strRelationTypeGroup" ],
  "id" : 21003,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findInfoByFrom",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "fromType", "fromId" ],
      "type" : "java.lang.String",
      "value" : "/relations/info"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "fromType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "fromId"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of relation info objects for the specified entity by the 'from' direction. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer. Relation Info is an extension of the default Relation object that contains information about the 'from' and 'to' entity names. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get List of Relation Infos (findInfoByFrom)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strFromId", "strFromType", "strRelationTypeGroup" ],
  "id" : 21004,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByFrom",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "fromType", "fromId", "relationType" ],
      "type" : "java.lang.String",
      "value" : "/relations"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "fromType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "fromId"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "relationType"
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of relation objects for the specified entity by the 'from' direction and relation type. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get List of Relations (findByFrom)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing relation type between entities. For example, 'Contains', 'Manages'. It can be any string value.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strFromId", "strFromType", "strRelationType", "strRelationTypeGroup" ],
  "id" : 21005,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByTo",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "toType", "toId" ],
      "type" : "java.lang.String",
      "value" : "/relations"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "toType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "toId"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of relation objects for the specified entity by the 'to' direction. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get List of Relations (findByTo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strToId", "strToType", "strRelationTypeGroup" ],
  "id" : 21006,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findInfoByTo",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "toType", "toId" ],
      "type" : "java.lang.String",
      "value" : "/relations/info"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "toType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "toId"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of relation info objects for the specified entity by the 'to' direction. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer. Relation Info is an extension of the default Relation object that contains information about the 'from' and 'to' entity names. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get List of Relation Infos (findInfoByTo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strToId", "strToType", "strRelationTypeGroup" ],
  "id" : 21007,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByTo",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "toType", "toId", "relationType" ],
      "type" : "java.lang.String",
      "value" : "/relations"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "toType"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "toId"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "relationType"
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "relationTypeGroup",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns list of relation objects for the specified entity by the 'to' direction and relation type. \n\nIf the user has the authority of 'System Administrator', the server checks that the entity is owned by the sysadmin. If the user has the authority of 'Tenant Administrator', the server checks that the entity is owned by the same tenant. If the user has the authority of 'Customer User', the server checks that the entity is assigned to the same customer.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get List of Relations (findByTo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing relation type between entities. For example, 'Contains', 'Manages'. It can be any string value.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing relation type group. For example, 'COMMON'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strToId", "strToType", "strRelationType", "strRelationTypeGroup" ],
  "id" : 21008,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/relations"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all entities that are related to the specific entity. The entity id, relation type, entity types, depth of the search, and other query parameters defined using complex 'EntityRelationsQuery' object. See 'Model' tab of the Parameters for more info.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Find related entities (findByQuery)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the entity relations query object.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.relation.EntityRelationsQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 21009,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findInfoByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityRelationController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/relations/info"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all entity infos that are related to the specific entity. The entity id, relation type, entity types, depth of the search, and other query parameters defined using complex 'EntityRelationsQuery' object. See 'Model' tab of the Parameters for more info. Relation Info is an extension of the default Relation object that contains information about the 'from' and 'to' entity names. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Find related entity infos (findInfoByQuery)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the entity relations query object.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.relation.EntityRelationsQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 21010,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.EntityRelationController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEntityViewById",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the EntityView object based on the provided entity view id. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. See the 'Model' tab for more details.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get entity view (getEntityViewById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEntityViewId" ],
  "id" : 21019,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEntityViewInfoById",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/entityView/info/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Entity View info object based on the provided Entity View Id. Entity Views Info extends the Entity View with customer title and 'is public' flag. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. See the 'Model' tab for more details.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Entity View info (getEntityViewInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEntityViewId" ],
  "id" : 21020,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityViewInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveEntityView",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/entityView"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. See the 'Model' tab for more details.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save or update entity view (saveEntityView)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON object representing the entity view."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.EntityView" ],
  "argumentsNames" : [ "entityView" ],
  "id" : 21021,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteEntityView",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Delete the EntityView object based on the provided entity view id. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete entity view (deleteEntityView)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEntityViewId" ],
  "id" : 21029,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantEntityView",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "entityViewName",
      "type" : "java.lang.Enum",
      "value" : "/tenant/entityViews"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Entity View object based on the tenant id and entity view name. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Entity View by name (getTenantEntityView)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Entity View name"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "entityViewName" ],
  "id" : 21030,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignEntityViewToCustomer",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of the Entity View to customer. Customer will be able to query Entity View afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Assign Entity View to customer (assignEntityViewToCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "strEntityViewId" ],
  "id" : 21031,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignEntityViewFromCustomer",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/customer/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the Entity View to customer. Customer will not be able to query Entity View afterwards.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Unassign Entity View from customer (unassignEntityViewFromCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEntityViewId" ],
  "id" : 21032,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerEntityViews",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/entityViews"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of Entity View objects assigned to customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer Entity Views (getCustomerEntityViews)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "\n\n## Entity View Filter\n\nAllows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':\n\n```json\n{\n  \"type\": \"entityViewType\",\n  \"entityViewType\": \"Concrete Mixer\",\n  \"entityViewNameFilter\": \"CAT\"\n}\n```"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the entity view name."
    }, {
      "allowableValues" : "createdTime, name, type",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21033,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerEntityViewInfos",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/entityViewInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of Entity View info objects assigned to customer. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer Entity View info (getCustomerEntityViewInfos)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "\n\n## Entity View Filter\n\nAllows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':\n\n```json\n{\n  \"type\": \"entityViewType\",\n  \"entityViewType\": \"Concrete Mixer\",\n  \"entityViewNameFilter\": \"CAT\"\n}\n```"
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the entity view name."
    }, {
      "allowableValues" : "createdTime, name, type, customerTitle",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21034,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantEntityViews",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/entityViews"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of entity views owned by tenant. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Entity Views (getTenantEntityViews)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "\n\n## Entity View Filter\n\nAllows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':\n\n```json\n{\n  \"type\": \"entityViewType\",\n  \"entityViewType\": \"Concrete Mixer\",\n  \"entityViewNameFilter\": \"CAT\"\n}\n```"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the entity view name."
    }, {
      "allowableValues" : "createdTime, name, type",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21035,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantEntityViewInfos",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/entityViewInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of entity views info owned by tenant. Entity Views limit the degree of exposure of the Device or Asset telemetry and attributes to the Customers. Every Entity View references exactly one entity (device or asset) and defines telemetry and attribute keys that will be visible to the assigned Customer. As a Tenant Administrator you are able to create multiple EVs per Device or Asset and assign them to different Customers. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Entity Views (getTenantEntityViews)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "\n\n## Entity View Filter\n\nAllows to filter entity views based on their type and the **'starts with'** expression over their name. For example, this entity filter selects all 'Concrete Mixer' entity views which name starts with 'CAT':\n\n```json\n{\n  \"type\": \"entityViewType\",\n  \"entityViewType\": \"Concrete Mixer\",\n  \"entityViewNameFilter\": \"CAT\"\n}\n```"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the entity view name."
    }, {
      "allowableValues" : "createdTime, name, type, customerTitle",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21036,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "findByQuery",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/entityViews"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all entity views that are related to the specific entity. The entity id, relation type, entity view types, depth of the search, and other query parameters defined using complex 'EntityViewSearchQuery' object. See 'Model' tab of the Parameters for more info.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Find related entity views (findByQuery)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "The entity view search query JSON"
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.entityview.EntityViewSearchQuery" ],
  "argumentsNames" : [ "query" ],
  "id" : 21037,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEntityViewTypes",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/entityView/types"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique entity view types based on entity views that are either owned by the tenant or assigned to the customer which user is performing the request.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Entity View Types (getEntityViewTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21038,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignEntityViewToPublicCustomer",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/customer/public/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Entity View will be available for non-authorized (not logged-in) users. This is useful to create dashboards that you plan to share/embed on a publicly available website. However, users that are logged-in and belong to different tenant will not be able to access the entity view.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Make entity view publicly available (assignEntityViewToPublicCustomer)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity view id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strEntityViewId" ],
  "id" : 21039,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignEntityViewToEdge",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of an existing entity view to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment entity view (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once entity view will be delivered to edge service, it's going to be available for usage on remote edge instance.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign entity view to edge (assignEntityViewToEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strEntityViewId" ],
  "id" : 21040,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignEntityViewFromEdge",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/entityView/{entityViewId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the entity view to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove entity view (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove entity view locally.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign entity view from edge (unassignEntityViewFromEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityViewId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strEntityViewId" ],
  "id" : 21041,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityView",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeEntityViews",
  "namespce" : "org.thingsboard.server.controller.EntityViewController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/entityViews"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEdgeId", "pageSize", "page", "type", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 21042,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.EntityViewController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEvents",
  "namespce" : "org.thingsboard.server.controller.EventController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/events/{entityType}/{entityId}/{eventType}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 4
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "tenantId"
    }, {
      "index" : 5
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 9,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 10,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of events for specified entity by specifying event type. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Events by type (getEvents)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "eventType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing event type",
      "required" : 1,
      "example" : "STATS"
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "The value is not used in searching."
    }, {
      "allowableValues" : "createdTime, id",
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "Timestamp. Events with creation time before it won't be queried."
    }, {
      "index" : 10,
      "type" : "java.lang.String",
      "value" : "Timestamp. Events with creation time after it won't be queried."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEntityType", "strEntityId", "eventType", "strTenantId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 21109,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEvents",
  "namespce" : "org.thingsboard.server.controller.EventController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/events/{entityType}/{entityId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 3
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "tenantId"
    }, {
      "index" : 4
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 9,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of events for specified entity. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. ",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Events (getEvents)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "The value is not used in searching."
    }, {
      "allowableValues" : "createdTime, id",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Timestamp. Events with creation time before it won't be queried."
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "Timestamp. Events with creation time after it won't be queried."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEntityType", "strEntityId", "strTenantId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 21110,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEvents",
  "namespce" : "org.thingsboard.server.controller.EventController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/events/{entityType}/{entityId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 3
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "tenantId"
    }, {
      "index" : 4
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 7,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 8,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 9,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 10,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of events for the chosen entity by specifying the event filter. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\n# Event Filter Definition\n\n5 different eventFilter objects could be set for different event types. The eventType field is required. Others are optional. If some of them are set, the filtering will be applied according to them. See the examples below for all the fields used for each event type filtering. \n\nNote,\n\n * 'server' - string value representing the server name, identifier or ip address where the platform is running;\n * 'errorStr' - the case insensitive 'contains' filter based on error message.\n\n## Error Event Filter\n\n```json\n{\n   \"eventType\":\"ERROR\",\n   \"server\":\"ip-172-31-24-152\",\n   \"method\":\"onClusterEventMsg\",\n   \"errorStr\":\"Error Message\"\n}\n```\n\n * 'method' - string value representing the method name when the error happened.\n\n## Lifecycle Event Filter\n\n```json\n{\n   \"eventType\":\"LC_EVENT\",\n   \"server\":\"ip-172-31-24-152\",\n   \"event\":\"STARTED\",\n   \"status\":\"Success\",\n   \"errorStr\":\"Error Message\"\n}\n```\n\n * 'event' - string value representing the lifecycle event type;\n * 'status' - string value representing status of the lifecycle event.\n\n## Statistics Event Filter\n\n```json\n{\n   \"eventType\":\"STATS\",\n   \"server\":\"ip-172-31-24-152\",\n   \"messagesProcessed\":10,\n   \"errorsOccurred\":5\n}\n```\n\n * 'messagesProcessed' - the minimum number of successfully processed messages;\n * 'errorsOccurred' - the minimum number of errors occurred during messages processing.\n\n## Debug Rule Node Event Filter\n\n```json\n{\n   \"eventType\":\"DEBUG_RULE_NODE\",\n   \"msgDirectionType\":\"IN\",\n   \"server\":\"ip-172-31-24-152\",\n   \"dataSearch\":\"humidity\",\n   \"metadataSearch\":\"deviceName\",\n   \"entityName\":\"DEVICE\",\n   \"relationType\":\"Success\",\n   \"entityId\":\"de9d54a0-2b7a-11ec-a3cc-23386423d98f\",\n   \"msgType\":\"POST_TELEMETRY_REQUEST\",\n   \"isError\":\"false\",\n   \"errorStr\":\"Error Message\"\n}\n```\n\n## Debug Rule Chain Event Filter\n\n```json\n{\n   \"eventType\":\"DEBUG_RULE_CHAIN\",\n   \"msgDirectionType\":\"IN\",\n   \"server\":\"ip-172-31-24-152\",\n   \"dataSearch\":\"humidity\",\n   \"metadataSearch\":\"deviceName\",\n   \"entityName\":\"DEVICE\",\n   \"relationType\":\"Success\",\n   \"entityId\":\"de9d54a0-2b7a-11ec-a3cc-23386423d98f\",\n   \"msgType\":\"POST_TELEMETRY_REQUEST\",\n   \"isError\":\"false\",\n   \"errorStr\":\"Error Message\"\n}\n```\n\n * 'msgDirectionType' - string value representing msg direction type (incoming to entity or outcoming from entity);\n * 'dataSearch' - the case insensitive 'contains' filter based on data (key and value) for the message;\n * 'metadataSearch' - the case insensitive 'contains' filter based on metadata (key and value) for the message;\n * 'entityName' - string value representing the entity type;\n * 'relationType' - string value representing the type of message routing;\n * 'entityId' - string value representing the entity id in the event body (originator of the message);\n * 'msgType' - string value representing the message type;\n * 'isError' - boolean value to filter the errors.\n\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Events by event filter (getEvents)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 5
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the event filter.",
      "required" : 1
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "The value is not used in searching."
    }, {
      "allowableValues" : "createdTime, id",
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "Timestamp. Events with creation time before it won't be queried."
    }, {
      "index" : 10,
      "type" : "java.lang.String",
      "value" : "Timestamp. Events with creation time after it won't be queried."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "int", "int", "org.thingsboard.server.common.data.event.EventFilter", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long" ],
  "argumentsNames" : [ "strEntityType", "strEntityId", "strTenantId", "pageSize", "page", "eventFilter", "textSearch", "sortProperty", "sortOrder", "startTime", "endTime" ],
  "id" : 21111,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.EventController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getLwm2mBootstrapSecurityInfo",
  "namespce" : "org.thingsboard.server.controller.Lwm2mController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/lwm2m/deviceProfile/bootstrap/{isBootstrapServer}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Lwm2m Bootstrap SecurityInfo object (of the current server) based on the provided isBootstrapServer parameter. If isBootstrapServer == true, get the parameters of the current Bootstrap Server. If isBootstrapServer == false, get the parameters of the current Lwm2m Server. Used for client settings when starting the client in Bootstrap mode. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Lwm2m Bootstrap SecurityInfo (getLwm2mBootstrapSecurityInfo)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "isBootstrapServer"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A Boolean value representing the Server SecurityInfo for future Bootstrap client mode settings. Values: 'true' for Bootstrap Server; 'false' for Lwm2m Server. "
    }
  },
  "parametersTypes" : [ "boolean" ],
  "argumentsNames" : [ "bootstrapServer" ],
  "id" : 21119,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.lwm2m.ServerSecurityConfig",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveDeviceWithCredentials",
  "namespce" : "org.thingsboard.server.controller.Lwm2mController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/lwm2m/device-credentials"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "hidden" : 1,
      "type" : "java.lang.String",
      "value" : "Save device with credentials (Deprecated)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.util.Map" ],
  "argumentsNames" : [ "deviceWithDeviceCredentials" ],
  "id" : 21120,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Device",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ {
    "name" : "saveDeviceWithCredentials",
    "namespce" : "org.thingsboard.server.controller.DeviceController",
    "annotations" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "method" : "POST",
        "type" : "java.lang.Enum",
        "value" : "/device-with-credentials"
      },
      "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
        "type" : "java.lang.String",
        "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
      },
      "Lio/swagger/annotations/ApiOperation;" : {
        "notes" : "Create or update the Device. When creating device, platform generates Device Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Requires to provide the Device Credentials object as well. Useful to create device and credentials in one request. You may find the example of LwM2M device and RPK credentials below: \n\n```json\n{\n  \"device\": {\n    \"name\": \"LwRpk00000000\",\n    \"type\": \"lwm2mProfileRpk\"\n  },\n  \"credentials\": {\n    \"id\": \"null\",\n    \"createdTime\": 0,\n    \"deviceId\": \"null\",\n    \"credentialsType\": \"LWM2M_CREDENTIALS\",\n    \"credentialsId\": \"LwRpk00000000\",\n    \"credentialsValue\": {\n      \"client\": {\n        \"endpoint\": \"LwRpk00000000\",\n        \"securityConfigClientMode\": \"RPK\",\n        \"key\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\"\n      },\n      \"bootstrap\": {\n        \"bootstrapServer\": {\n          \"securityMode\": \"RPK\",\n          \"clientPublicKeyOrId\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\",\n          \"clientSecretKey\": \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"\n        },\n        \"lwm2mServer\": {\n          \"securityMode\": \"RPK\",\n          \"clientPublicKeyOrId\": \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEUEBxNl/RcYJNm8mk91CyVXoIJiROYDlXcSSqK6e5bDHwOW4ZiN2lNnXalyF0Jxw8MbAytnDMERXyAja5VEMeVQ==\",\n          \"clientSecretKey\": \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgd9GAx7yZW37autew5KZykn4IgRpge/tZSjnudnZJnMahRANCAARQQHE2X9Fxgk2byaT3ULJVeggmJE5gOVdxJKorp7lsMfA5bhmI3aU2ddqXIXQnHDwxsDK2cMwRFfICNrlUQx5V\"\n        }\n      }\n    }\n  }\n}\n```\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
        "type" : "java.lang.String",
        "value" : "Create Device (saveDevice) with credentials "
      },
      "Lorg/springframework/web/bind/annotation/RequestBody;" : {
        "index" : 0
      },
      "class" : {
        "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
          "type" : "java.lang.String",
          "value" : "/api"
        },
        "Lorg/springframework/web/bind/annotation/RestController;" : { },
        "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
      },
      "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
      "Lio/swagger/annotations/ApiParam;" : {
        "index" : 0,
        "type" : "java.lang.String",
        "value" : "The JSON object with device and credentials. See method description above for example."
      }
    },
    "parametersTypes" : [ "org.thingsboard.server.common.data.SaveDeviceWithCredentialsRequest" ],
    "argumentsNames" : [ "deviceAndCredentials" ],
    "id" : 20618,
    "type" : "method",
    "returnType" : "org.thingsboard.server.common.data.Device",
    "classInfo" : null,
    "modifier" : 0,
    "childes" : [ ]
  } ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.Lwm2mController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveClientRegistrationTemplate",
  "namespce" : "org.thingsboard.server.controller.OAuth2ConfigTemplateController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Client registration template is OAuth2 provider configuration template with default settings for registering new OAuth2 clients",
      "type" : "java.lang.String",
      "value" : "Create or update OAuth2 client registration template (saveClientRegistrationTemplate)\n\nAvailable for users with 'SYS_ADMIN' authority."
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/oauth2/config/template"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.oauth2.OAuth2ClientRegistrationTemplate" ],
  "argumentsNames" : [ "clientRegistrationTemplate" ],
  "id" : 21123,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.oauth2.OAuth2ClientRegistrationTemplate",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteClientRegistrationTemplate",
  "namespce" : "org.thingsboard.server.controller.OAuth2ConfigTemplateController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/{clientRegistrationTemplateId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Client registration template is OAuth2 provider configuration template with default settings for registering new OAuth2 clients",
      "type" : "java.lang.String",
      "value" : "Delete OAuth2 client registration template by id (deleteClientRegistrationTemplate)\n\nAvailable for users with 'SYS_ADMIN' authority."
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "clientRegistrationTemplateId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/oauth2/config/template"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "String representation of client registration template id to delete",
      "example" : "139b1f81-2f5d-11ec-9dbe-9b627e1a88f4"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strClientRegistrationTemplateId" ],
  "id" : 21124,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getClientRegistrationTemplates",
  "namespce" : "org.thingsboard.server.controller.OAuth2ConfigTemplateController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/json",
      "type" : "java.lang.String"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Client registration template is OAuth2 provider configuration template with default settings for registering new OAuth2 clients",
      "type" : "java.lang.String",
      "value" : "Get the list of all OAuth2 client registration templates (getClientRegistrationTemplates)\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority."
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/oauth2/config/template"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21125,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.OAuth2ConfigTemplateController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/oauth2/config/template"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getOAuth2Clients",
  "namespce" : "org.thingsboard.server.controller.OAuth2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/noauth/oauth2Clients"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the list of OAuth2 clients to log in with, available for such domain scheme (HTTP or HTTPS) (if x-forwarded-proto request header is present - the scheme is known from it) and domain name and port (port may be known from x-forwarded-port header)",
      "type" : "java.lang.String",
      "value" : "Get OAuth2 clients (getOAuth2Clients)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "WEB, ANDROID, IOS",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Platform type to search OAuth2 clients for which the usage with this platform type is allowed in the settings. If platform type is not one of allowable values - it will just be ignored"
    }, {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Mobile application package name, to find OAuth2 clients where there is configured mobile application with such package name"
    } ]
  },
  "parametersTypes" : [ "javax.servlet.http.HttpServletRequest", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "request", "pkgName", "platform" ],
  "id" : 21241,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCurrentOAuth2Info",
  "namespce" : "org.thingsboard.server.controller.OAuth2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "/oauth2/config"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get current OAuth2 settings (getCurrentOAuth2Info)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21242,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.oauth2.OAuth2Info",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveOAuth2Info",
  "namespce" : "org.thingsboard.server.controller.OAuth2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/oauth2/config"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Save OAuth2 settings (saveOAuth2Info)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.oauth2.OAuth2Info" ],
  "argumentsNames" : [ "oauth2Info" ],
  "id" : 21243,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.oauth2.OAuth2Info",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getLoginProcessingUrl",
  "namespce" : "org.thingsboard.server.controller.OAuth2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/oauth2/loginProcessingUrl"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns the URL enclosed in double quotes. After successful authentication with OAuth2 provider, it makes a redirect to this path so that the platform can do further log in processing. This URL may be configured as 'security.oauth2.loginProcessingUrl' property in yml configuration file, or as 'SECURITY_OAUTH2_LOGIN_PROCESSING_URL' env variable. By default it is '/login/oauth2/code/'\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get OAuth2 log in processing URL (getLoginProcessingUrl)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21244,
  "type" : "method",
  "returnType" : "java.lang.String",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.OAuth2Controller" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "downloadOtaPackage",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/otaPackage/{otaPackageId}/download"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority( 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Download OTA Package based on the provided OTA Package Id.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Download OTA Package (downloadOtaPackage)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "otaPackageId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strOtaPackageId" ],
  "id" : 21268,
  "type" : "method",
  "returnType" : "java.lang.String[]",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getOtaPackageInfoById",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/otaPackage/info/{otaPackageId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the OTA Package Info object based on the provided OTA Package Id. OTA Package Info is a lightweight object that includes main information about the OTA Package excluding the heavyweight data. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get OTA Package Info (getOtaPackageInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "otaPackageId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strOtaPackageId" ],
  "id" : 21269,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.OtaPackageInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getOtaPackageById",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/otaPackage/{otaPackageId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the OTA Package object based on the provided OTA Package Id. The server checks that the OTA Package is owned by the same tenant. OTA Package is a heavyweight object that includes main information about the OTA Package and also data. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get OTA Package (getOtaPackageById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "otaPackageId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strOtaPackageId" ],
  "id" : 21270,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.OtaPackage",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveOtaPackageInfo",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/otaPackage"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the OTA Package Info. When creating OTA Package Info, platform generates OTA Package id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created OTA Package id will be present in the response. Specify existing OTA Package id to update the OTA Package Info. Referencing non-existing OTA Package Id will cause 'Not Found' error. \n\nOTA Package combination of the title with the version is unique in the scope of tenant. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create Or Update OTA Package Info (saveOtaPackageInfo)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the OTA Package."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.SaveOtaPackageInfoRequest" ],
  "argumentsNames" : [ "otaPackageInfo" ],
  "id" : 21271,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.OtaPackageInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveOtaPackageData",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/otaPackage/{otaPackageId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "checksumAlgorithm"
    }, {
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Update the OTA Package. Adds the date to the existing OTA Package Info\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save OTA Package data (saveOtaPackageData)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 3
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "otaPackageId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "OTA Package checksum. For example, '0xd87f7e0c'"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "allowableValues" : "MD5, SHA256, SHA384, SHA512, CRC32, MURMUR3_32, MURMUR3_128",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "OTA Package checksum algorithm."
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "OTA Package data."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "org.springframework.web.multipart.MultipartFile" ],
  "argumentsNames" : [ "strOtaPackageId", "checksum", "checksumAlgorithmStr", "file" ],
  "id" : 21272,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.OtaPackageInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getOtaPackages",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/otaPackages"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of OTA Package Info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. OTA Package Info is a lightweight object that includes main information about the OTA Package excluding the heavyweight data. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get OTA Package Infos (getOtaPackages)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the ota package title."
    }, {
      "allowableValues" : "createdTime, type, title, version, tag, url, fileName, dataSize, checksum",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21273,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getOtaPackages",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/otaPackages/{deviceProfileId}/{type}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 3
    }, {
      "index" : 2
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of OTA Package Info objects owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. OTA Package Info is a lightweight object that includes main information about the OTA Package excluding the heavyweight data. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get OTA Package Infos (getOtaPackages)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "type"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceProfileId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "FIRMWARE, SOFTWARE",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "OTA Package type."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the ota package title."
    }, {
      "allowableValues" : "createdTime, type, title, version, tag, url, fileName, dataSize, checksum",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strDeviceProfileId", "strType", "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21274,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteOtaPackage",
  "namespce" : "org.thingsboard.server.controller.OtaPackageController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/otaPackage/{otaPackageId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the OTA Package. Referencing non-existing OTA Package Id will cause an error. Can't delete the OTA Package if it is referenced by existing devices or device profile.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Delete OTA Package (deleteOtaPackage)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "otaPackageId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the ota package id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strOtaPackageId" ],
  "id" : 21275,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.OtaPackageController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantQueuesByServiceType",
  "namespce" : "org.thingsboard.server.controller.QueueController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/json",
      "params" : "serviceType",
      "type" : "java.lang.Enum",
      "value" : "/tenant/queues"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique queue names based on service type. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get queue names (getTenantQueuesByServiceType)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "allowableValues" : "TB-RULE-ENGINE, TB-CORE, TB-TRANSPORT, JS-EXECUTOR",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Service type (implemented only for the TB-RULE-ENGINE)"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "serviceType" ],
  "id" : 21286,
  "type" : "method",
  "returnType" : "java.util.Set",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.QueueController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "handleOneWayDeviceRPCRequest",
  "namespce" : "org.thingsboard.server.controller.RpcV1Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/oneway/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deprecated. See 'Rpc V 2 Controller' instead.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Send one-way RPC request (handleOneWayDeviceRPCRequest)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the RPC request."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceIdStr", "requestBody" ],
  "id" : 21289,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "handleTwoWayDeviceRPCRequest",
  "namespce" : "org.thingsboard.server.controller.RpcV1Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/twoway/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deprecated. See 'Rpc V 2 Controller' instead.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Send two-way RPC request (handleTwoWayDeviceRPCRequest)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the RPC request."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceIdStr", "requestBody" ],
  "id" : 21290,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AbstractRpcController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.RpcV1Controller" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "handleOneWayDeviceRPCRequest",
  "namespce" : "org.thingsboard.server.controller.RpcV2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/oneway/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Persistent RPC request was saved to the database or lightweight RPC request was sent to the device."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to send the RPC request. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 504,
        "type" : "java.lang.Integer",
        "message" : "Timeout to process the RPC call. Most likely, device is offline."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Sends the one-way remote-procedure call (RPC) request to device. Sends the one-way remote-procedure call (RPC) request to device. The RPC call is A JSON that contains the method name ('method'), parameters ('params') and multiple optional fields. See example below. We will review the properties of the RPC call one-by-one below. \n\n```json\n{\n  \"method\": \"setGpio\",\n  \"params\": {\n    \"pin\": 7,\n    \"value\": 1\n  },\n  \"persistent\": false,\n  \"timeout\": 5000\n}\n```\n\n### Server-side RPC structure\n\nThe body of server-side RPC request consists of multiple fields:\n\n* **method** - mandatory, name of the method to distinct the RPC calls.\n  For example, \"getCurrentTime\" or \"getWeatherForecast\". The value of the parameter is a string.\n* **params** - mandatory, parameters used for processing of the request. The value is a JSON. Leave empty JSON \"{}\" if no parameters needed.\n* **timeout** - optional, value of the processing timeout in milliseconds. The default value is 10000 (10 seconds). The minimum value is 5000 (5 seconds).\n* **expirationTime** - optional, value of the epoch time (in milliseconds, UTC timezone). Overrides **timeout** if present.\n* **persistent** - optional, indicates persistent RPC. The default value is \"false\".\n* **retries** - optional, defines how many times persistent RPC will be re-sent in case of failures on the network and/or device side.\n* **additionalInfo** - optional, defines metadata for the persistent RPC that will be added to the persistent RPC events.\n\n### RPC Result\nIn case of persistent RPC, the result of this call is 'rpcId' UUID. In case of lightweight RPC, the result of this call is either 200 OK if the message was sent to device, or 504 Gateway Timeout if device is offline.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Send one-way RPC request"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the RPC request."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceIdStr", "requestBody" ],
  "id" : 21297,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "handleTwoWayDeviceRPCRequest",
  "namespce" : "org.thingsboard.server.controller.RpcV2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/twoway/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Persistent RPC request was saved to the database or lightweight RPC response received."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to send the RPC request. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 504,
        "type" : "java.lang.Integer",
        "message" : "Timeout to process the RPC call. Most likely, device is offline."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Sends the two-way remote-procedure call (RPC) request to device. Sends the one-way remote-procedure call (RPC) request to device. The RPC call is A JSON that contains the method name ('method'), parameters ('params') and multiple optional fields. See example below. We will review the properties of the RPC call one-by-one below. \n\n```json\n{\n  \"method\": \"setGpio\",\n  \"params\": {\n    \"pin\": 7,\n    \"value\": 1\n  },\n  \"persistent\": false,\n  \"timeout\": 5000\n}\n```\n\n### Server-side RPC structure\n\nThe body of server-side RPC request consists of multiple fields:\n\n* **method** - mandatory, name of the method to distinct the RPC calls.\n  For example, \"getCurrentTime\" or \"getWeatherForecast\". The value of the parameter is a string.\n* **params** - mandatory, parameters used for processing of the request. The value is a JSON. Leave empty JSON \"{}\" if no parameters needed.\n* **timeout** - optional, value of the processing timeout in milliseconds. The default value is 10000 (10 seconds). The minimum value is 5000 (5 seconds).\n* **expirationTime** - optional, value of the epoch time (in milliseconds, UTC timezone). Overrides **timeout** if present.\n* **persistent** - optional, indicates persistent RPC. The default value is \"false\".\n* **retries** - optional, defines how many times persistent RPC will be re-sent in case of failures on the network and/or device side.\n* **additionalInfo** - optional, defines metadata for the persistent RPC that will be added to the persistent RPC events.\n\n### RPC Result\nIn case of persistent RPC, the result of this call is 'rpcId' UUID. In case of lightweight RPC, the result of this call is the response from device, or 504 Gateway Timeout if device is offline.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Send two-way RPC request"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the RPC request."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceIdStr", "requestBody" ],
  "id" : 21298,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getPersistedRpc",
  "namespce" : "org.thingsboard.server.controller.RpcV2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/persistent/{rpcId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get information about the status of the RPC call.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get persistent RPC request"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "rpcId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the rpc id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRpc" ],
  "id" : 21299,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rpc.Rpc",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getPersistedRpcByDevice",
  "namespce" : "org.thingsboard.server.controller.RpcV2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/persistent/device/{deviceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 6,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Allows to query RPC calls for specific device using pagination.\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get persistent RPC requests"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "allowableValues" : "QUEUED, SENT, DELIVERED, SUCCESSFUL, TIMEOUT, EXPIRED, FAILED",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Status of the RPC",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Not implemented. Leave empty."
    }, {
      "allowableValues" : "createdTime, expirationTime, request, response",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "org.thingsboard.server.common.data.rpc.RpcStatus", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strDeviceId", "pageSize", "page", "rpcStatus", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21300,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteResource",
  "namespce" : "org.thingsboard.server.controller.RpcV2Controller",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/persistent/{rpcId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the persistent RPC request.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete persistent RPC"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "rpcId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the rpc id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRpc" ],
  "id" : 21301,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.AbstractRpcController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.RpcV2Controller" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/rpc"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getRuleChainById",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Rule Chain object based on the provided Rule Chain Id. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Rule Chain (getRuleChainById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21305,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getRuleChainMetaData",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}/metadata"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Rule Chain Metadata object based on the provided Rule Chain Id. The metadata object contains information about the rule nodes and their connections.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Rule Chain (getRuleChainById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21306,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChainMetaData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Rule Chain. When creating Rule Chain, platform generates Rule Chain Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Rule Chain Id will be present in the response. Specify existing Rule Chain id to update the rule chain. Referencing non-existing rule chain Id will cause 'Not Found' error.\n\nThe rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create Or Update Rule Chain (saveRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the rule chain."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.rule.RuleChain" ],
  "argumentsNames" : [ "ruleChain" ],
  "id" : 21307,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/device/default"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create rule chain from template, based on the specified name in the request. Creates the rule chain based on the template that is used to create root rule chain. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create Default Rule Chain"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the request."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.rule.DefaultRuleChainCreateRequest" ],
  "argumentsNames" : [ "request" ],
  "id" : 21308,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setRootRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}/root"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Makes the rule chain to be root rule chain. Updates previous root rule chain as well. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Set Root Rule Chain (setRootRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21309,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveRuleChainMetaData",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/metadata"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Updates the rule chain metadata. The metadata object contains information about the rule nodes and their connections.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Update Rule Chain Metadata"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the rule chain metadata."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.rule.RuleChainMetaData" ],
  "argumentsNames" : [ "ruleChainMetaData" ],
  "id" : 21310,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChainMetaData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getRuleChains",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/ruleChains"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "type",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of Rule Chains owned by tenant. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Rule Chains (getRuleChains)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "allowableValues" : "CORE, EDGE",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Rule chain type (CORE or EDGE)"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the rule chain name."
    }, {
      "allowableValues" : "createdTime, name, root",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "typeStr", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21311,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the rule chain. Referencing non-existing rule chain Id will cause an error. Referencing rule chain that is used in the device profiles will cause an error.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete rule chain (deleteRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21312,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getLatestRuleNodeDebugInput",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/ruleNode/{ruleNodeId}/debugIn"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Gets the input message from the debug events for specified Rule Chain Id. Referencing non-existing rule chain Id will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get latest input message (getLatestRuleNodeDebugInput)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleNodeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule node id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleNodeId" ],
  "id" : 21313,
  "type" : "method",
  "returnType" : "com.fasterxml.jackson.databind.JsonNode",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "testScript",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/testScript"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Execute the JavaScript function and return the result. The format of request: \n\n```json\n{\n  \"script\": \"Your JS Function as String\",\n  \"scriptType\": \"One of: update, generate, filter, switch, json, string\",\n  \"argNames\": [\"msg\", \"metadata\", \"type\"],\n  \"msg\": \"{\\\"temperature\\\": 42}\", \n  \"metadata\": {\n    \"deviceName\": \"Device A\",\n    \"deviceType\": \"Thermometer\"\n  },\n  \"msgType\": \"POST_TELEMETRY_REQUEST\"\n}\n```\n\n Expected result JSON contains \"output\" and \"error\".\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Test JavaScript function"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Test JS request. See API call description above."
    }
  },
  "parametersTypes" : [ "com.fasterxml.jackson.databind.JsonNode" ],
  "argumentsNames" : [ "inputParams" ],
  "id" : 21314,
  "type" : "method",
  "returnType" : "com.fasterxml.jackson.databind.JsonNode",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "exportRuleChains",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : "limit",
      "type" : "java.lang.Enum",
      "value" : "/ruleChains/export"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "limit"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Exports all tenant rule chains as one JSON.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Export Rule Chains"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A limit of rule chains to export.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "int" ],
  "argumentsNames" : [ "limit" ],
  "id" : 21315,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChainData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "importRuleChains",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChains/import"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "defaultValue" : "false",
      "index" : 1,
      "type" : "java.lang.String",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Imports all tenant rule chains as one JSON.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Import Rule Chains"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Enables overwrite for existing rule chains with the same name."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the rule chains."
    } ]
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.rule.RuleChainData", "boolean" ],
  "argumentsNames" : [ "ruleChainData", "overwrite" ],
  "id" : 21316,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "assignRuleChainToEdge",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/ruleChain/{ruleChainId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates assignment of an existing rule chain to an instance of The Edge. Assignment works in async way - first, notification event pushed to edge service queue on platform. Second, remote edge service will receive a copy of assignment rule chain (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once rule chain will be delivered to edge service, it's going to start processing messages locally. \n\nOnly rule chain with type 'EDGE' can be assigned to edge.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Assign rule chain to edge (assignRuleChainToEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strRuleChainId" ],
  "id" : 21320,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unassignRuleChainFromEdge",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/ruleChain/{ruleChainId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Clears assignment of the rule chain to the edge. Unassignment works in async way - first, 'unassign' notification event pushed to edge queue on platform. Second, remote edge service will receive an 'unassign' command to remove rule chain (Edge will receive this instantly, if it's currently connected, or once it's going to be connected to platform). Third, once 'unassign' command will be delivered to edge service, it's going to remove rule chain locally.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Unassign rule chain from edge (unassignRuleChainFromEdge)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "strRuleChainId" ],
  "id" : 21321,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getEdgeRuleChains",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/edge/{edgeId}/ruleChains"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of Rule Chains assigned to the specified edge. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Edge Rule Chains (getEdgeRuleChains)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "edgeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the edge id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the rule chain name."
    }, {
      "allowableValues" : "createdTime, name, root",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strEdgeId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21322,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setEdgeTemplateRootRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}/edgeTemplateRoot"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Makes the rule chain to be root rule chain for any new edge that will be created. Does not update root rule chain for already created edges. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Set Edge Template Root Rule Chain (setEdgeTemplateRootRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21323,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setAutoAssignToEdgeRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}/autoAssignToEdge"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Makes the rule chain to be automatically assigned for any new edge that will be created. Does not assign this rule chain for already created edges. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Set Auto Assign To Edge Rule Chain (setAutoAssignToEdgeRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21324,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "unsetAutoAssignToEdgeRuleChain",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/{ruleChainId}/autoAssignToEdge"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Removes the rule chain from the list of rule chains that are going to be automatically assigned for any new edge that will be created. Does not unassign this rule chain for already assigned edges. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Unset Auto Assign To Edge Rule Chain (unsetAutoAssignToEdgeRuleChain)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "ruleChainId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the rule chain id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strRuleChainId" ],
  "id" : 21325,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.rule.RuleChain",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAutoAssignToEdgeRuleChains",
  "namespce" : "org.thingsboard.server.controller.RuleChainController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/ruleChain/autoAssignToEdgeRuleChains"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a list of Rule Chains that will be assigned to a newly created edge. The rule chain object is lightweight and contains general information about the rule chain. List of rule nodes and their connection is stored in a separate 'metadata' object.\n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Auto Assign To Edge Rule Chains (getAutoAssignToEdgeRuleChains)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21326,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.RuleChainController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "downloadResource",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/resource/{resourceId}/download"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Download Resource based on the provided Resource Id.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Download Resource (downloadResource)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "resourceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strResourceId" ],
  "id" : 21586,
  "type" : "method",
  "returnType" : "java.lang.String[]",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getResourceInfoById",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/resource/info/{resourceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Resource Info object based on the provided Resource Id. Resource Info is a lightweight object that includes main information about the Resource excluding the heavyweight data. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Resource Info (getResourceInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "resourceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strResourceId" ],
  "id" : 21587,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TbResourceInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getResourceById",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/resource/{resourceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Resource object based on the provided Resource Id. Resource is a heavyweight object that includes main information about the Resource and also data. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Resource (getResourceById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "resourceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strResourceId" ],
  "id" : 21588,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TbResource",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveResource",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/resource"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Resource. When creating the Resource, platform generates Resource id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Resource id will be present in the response. Specify existing Resource id to update the Resource. Referencing non-existing Resource Id will cause 'Not Found' error. \n\nResource combination of the title with the key is unique in the scope of tenant. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Create Or Update Resource (saveResource)",
      "consumes" : "application/json"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the Resource."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.TbResource" ],
  "argumentsNames" : [ "resource" ],
  "id" : 21589,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TbResource",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getResources",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/resource"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of Resource Info objects owned by tenant or sysadmin. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. Resource Info is a lightweight object that includes main information about the Resource excluding the heavyweight data. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Resource Infos (getResources)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the resource title."
    }, {
      "allowableValues" : "createdTime, title, resourceType, tenantId",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21590,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getLwm2mListObjectsPage",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/resource/lwm2m/page"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of LwM2M objects parsed from Resources with type 'LWM2M_MODEL' owned by tenant or sysadmin. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. LwM2M Object is a object that includes information about the LwM2M model which can be used in transport configuration for the LwM2M device profile. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get LwM2M Objects (getLwm2mListObjectsPage)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the resource title."
    }, {
      "allowableValues" : "id, name",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21591,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getLwm2mListObjects",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/resource/lwm2m"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of LwM2M objects parsed from Resources with type 'LWM2M_MODEL' owned by tenant or sysadmin. You can specify parameters to filter the results. LwM2M Object is a object that includes information about the LwM2M model which can be used in transport configuration for the LwM2M device profile. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get LwM2M Objects (getLwm2mListObjects)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "id, name",
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Property of entity to sort by",
      "required" : 1
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "LwM2M Object ids.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String[]" ],
  "argumentsNames" : [ "sortOrder", "sortProperty", "objectIds" ],
  "id" : 21592,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteResource",
  "namespce" : "org.thingsboard.server.controller.TbResourceController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/resource/{resourceId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the Resource. Referencing non-existing Resource Id will cause an error.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete Resource (deleteResource)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "resourceId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the resource id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strResourceId" ],
  "id" : 21593,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.TbResourceController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAttributeKeys",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/keys/attributes"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique attribute key names for the selected entity. The response will include merged key names set for all attribute scopes:\n\n * SERVER_SCOPE - supported for all entity types;\n * CLIENT_SCOPE - supported for devices;\n * SHARED_SCOPE - supported for devices. \n\nReferencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get all attribute keys (getAttributeKeys)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr" ],
  "id" : 21603,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAttributeKeysByScope",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/keys/attributes/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique attribute key names for the selected entity and attributes scope: \n\n * SERVER_SCOPE - supported for all entity types;\n * CLIENT_SCOPE - supported for devices;\n * SHARED_SCOPE - supported for devices. \n\nReferencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get all attribute keys by scope (getAttributeKeysByScope)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope" ],
  "id" : 21604,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAttributes",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/values/attributes"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "keys",
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all attributes that belong to specified entity. Use optional 'keys' parameter to return specific attributes.\n Example of the result: \n\n```json\n[\n  {\"key\": \"stringAttributeKey\", \"value\": \"value\", \"lastUpdateTs\": 1609459200000},\n  {\"key\": \"booleanAttributeKey\", \"value\": false, \"lastUpdateTs\": 1609459200001},\n  {\"key\": \"doubleAttributeKey\", \"value\": 42.2, \"lastUpdateTs\": 1609459200002},\n  {\"key\": \"longKeyExample\", \"value\": 73, \"lastUpdateTs\": 1609459200003},\n  {\"key\": \"jsonKeyExample\",\n    \"value\": {\n      \"someNumber\": 42,\n      \"someArray\": [1,2,3],\n      \"someNestedObject\": {\"key\": \"value\"}\n    },\n    \"lastUpdateTs\": 1609459200004\n  }\n]\n```\n\n Referencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get attributes (getAttributes)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "keysStr" ],
  "id" : 21605,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getAttributesByScope",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/values/attributes/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "keys",
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all attributes of a specified scope that belong to specified entity. List of possible attribute scopes depends on the entity type: \n\n * SERVER_SCOPE - supported for all entity types;\n * CLIENT_SCOPE - supported for devices;\n * SHARED_SCOPE - supported for devices. \n\nUse optional 'keys' parameter to return specific attributes.\n Example of the result: \n\n```json\n[\n  {\"key\": \"stringAttributeKey\", \"value\": \"value\", \"lastUpdateTs\": 1609459200000},\n  {\"key\": \"booleanAttributeKey\", \"value\": false, \"lastUpdateTs\": 1609459200001},\n  {\"key\": \"doubleAttributeKey\", \"value\": 42.2, \"lastUpdateTs\": 1609459200002},\n  {\"key\": \"longKeyExample\", \"value\": 73, \"lastUpdateTs\": 1609459200003},\n  {\"key\": \"jsonKeyExample\",\n    \"value\": {\n      \"someNumber\": 42,\n      \"someArray\": [1,2,3],\n      \"someNestedObject\": {\"key\": \"value\"}\n    },\n    \"lastUpdateTs\": 1609459200004\n  }\n]\n```\n\n Referencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get attributes by scope (getAttributesByScope)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope", "keysStr" ],
  "id" : 21606,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTimeseriesKeys",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/keys/timeseries"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a set of unique time-series key names for the selected entity. \n\nReferencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get time-series keys (getTimeseriesKeys)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr" ],
  "id" : 21607,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getLatestTimeseries",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/values/timeseries"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "defaultValue" : "false",
      "name" : "useStrictDataTypes",
      "index" : 3,
      "type" : "java.lang.String",
      "required" : 0
    }, {
      "name" : "keys",
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all time-series that belong to specified entity. Use optional 'keys' parameter to return specific time-series. The result is a JSON object. The format of the values depends on the 'useStrictDataTypes' parameter. By default, all time-series values are converted to strings: \n\n```json\n{\n  \"stringTsKey\": [{ \"value\": \"value\", \"ts\": 1609459200000}],\n  \"booleanTsKey\": [{ \"value\": \"false\", \"ts\": 1609459200000}],\n  \"doubleTsKey\": [{ \"value\": \"42.2\", \"ts\": 1609459200000}],\n  \"longTsKey\": [{ \"value\": \"73\", \"ts\": 1609459200000}],\n  \"jsonTsKey\": [{ \"value\": \"{\\\"someNumber\\\": 42,\\\"someArray\\\": [1,2,3],\\\"someNestedObject\\\": {\\\"key\\\": \\\"value\\\"}}\", \"ts\": 1609459200000}]\n}\n\n```\n\n However, it is possible to request the values without conversion ('useStrictDataTypes'=true): \n\n```json\n{\n  \"stringTsKey\": [{ \"value\": \"value\", \"ts\": 1609459200000}],\n  \"booleanTsKey\": [{ \"value\": false, \"ts\": 1609459200000}],\n  \"doubleTsKey\": [{ \"value\": 42.2, \"ts\": 1609459200000}],\n  \"longTsKey\": [{ \"value\": 73, \"ts\": 1609459200000}],\n  \"jsonTsKey\": [{ \n    \"value\": {\n      \"someNumber\": 42,\n      \"someArray\": [1,2,3],\n      \"someNestedObject\": {\"key\": \"value\"}\n    }, \n    \"ts\": 1609459200000}]\n}\n\n```\n\n Referencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get latest time-series value (getLatestTimeseries)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the comma-separated list of telemetry keys. If keys are not selected, the result will return all latest timeseries. For example, 'temperature,humidity'."
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Enables/disables conversion of telemetry values to strings. Conversion is enabled by default. Set parameter to 'true' in order to disable the conversion."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Boolean" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "keysStr", "useStrictDataTypes" ],
  "id" : 21608,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTimeseries",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "startTs", "keys", "endTs" ],
      "type" : "java.lang.String",
      "value" : "/{entityType}/{entityId}/values/timeseries"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "name" : "startTs",
      "index" : 3,
      "type" : "java.lang.String"
    }, {
      "name" : "keys",
      "index" : 2,
      "type" : "java.lang.String"
    }, {
      "name" : "endTs",
      "index" : 4,
      "type" : "java.lang.String"
    }, {
      "defaultValue" : "0",
      "name" : "interval",
      "index" : 5,
      "type" : "java.lang.String"
    }, {
      "defaultValue" : "100",
      "name" : "limit",
      "index" : 6,
      "type" : "java.lang.String"
    }, {
      "defaultValue" : "NONE",
      "name" : "agg",
      "index" : 7,
      "type" : "java.lang.String"
    }, {
      "defaultValue" : "DESC",
      "name" : "orderBy",
      "index" : 8,
      "type" : "java.lang.String"
    }, {
      "defaultValue" : "false",
      "name" : "useStrictDataTypes",
      "index" : 9,
      "type" : "java.lang.String",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a range of time-series values for specified entity. Returns not aggregated data by default. Use aggregation function ('agg') and aggregation interval ('interval') to enable aggregation of the results on the database / server side. The aggregation is generally more efficient then fetching all records. \n\n```json\n{\n  \"temperature\": [\n    {\n      \"value\": 36.7,\n      \"ts\": 1609459200000\n    },\n    {\n      \"value\": 36.6,\n      \"ts\": 1609459201000\n    }\n  ]\n}\n```\n\nReferencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get time-series data (getTimeseries)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the comma-separated list of telemetry keys.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A long value representing the start timestamp of the time range in milliseconds, UTC."
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "A long value representing the end timestamp of the time range in milliseconds, UTC."
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "A long value representing the aggregation interval range in milliseconds."
    }, {
      "defaultValue" : "100",
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "An integer value that represents a max number of timeseries data points to fetch. This parameter is used only in the case if 'agg' parameter is set to 'NONE'."
    }, {
      "allowableValues" : "MIN, MAX, AVG, SUM, COUNT, NONE",
      "index" : 7,
      "type" : "java.lang.String",
      "value" : "A string value representing the aggregation function. If the interval is not specified, 'agg' parameter will use 'NONE' value."
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 8,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    }, {
      "index" : 9,
      "type" : "java.lang.String",
      "value" : "Enables/disables conversion of telemetry values to strings. Conversion is enabled by default. Set parameter to 'true' in order to disable the conversion."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.Long", "java.lang.Long", "java.lang.Integer", "java.lang.String", "java.lang.String", "java.lang.Boolean" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "keys", "startTs", "endTs", "interval", "limit", "aggStr", "orderBy", "useStrictDataTypes" ],
  "id" : 21609,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveDeviceAttributes",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{deviceId}/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request or invalid attributes scope provided."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Attribute from the request was created or updated. Platform creates an audit log event about device attributes updates with action type 'ATTRIBUTES_UPDATED', and also sends event msg to the rule engine with msg type 'ATTRIBUTES_UPDATED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to save device attributes for selected device. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about device attributes updates with action type 'ATTRIBUTES_UPDATED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or updates the device attributes based on device id and specified attribute scope. The request payload is a JSON object with key-value format of attributes to create or update. For example:\n\n```json\n{\n \"stringKey\":\"value1\", \n \"booleanKey\":true, \n \"doubleKey\":42.0, \n \"longKey\":73, \n \"jsonKey\": {\n    \"someNumber\": 42,\n    \"someArray\": [1,2,3],\n    \"someNestedObject\": {\"key\": \"value\"}\n }\n}\n```\n\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save device attributes (saveDeviceAttributes)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 2
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "scope"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'.",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the json object. For example, '{\"key\":\"value\"}'. See API call description for more details.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "com.fasterxml.jackson.databind.JsonNode" ],
  "argumentsNames" : [ "deviceIdStr", "scope", "request" ],
  "id" : 21610,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveEntityAttributesV1",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request or invalid attributes scope provided."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Attribute from the request was created or updated. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED', and also sends event msg to the rule engine with msg type 'ATTRIBUTES_UPDATED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to save entity attributes for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or updates the entity attributes based on Entity Id and the specified attribute scope.  List of possible attribute scopes depends on the entity type: \n\n * SERVER_SCOPE - supported for all entity types;\n * CLIENT_SCOPE - supported for devices;\n * SHARED_SCOPE - supported for devices. \n\nThe request payload is a JSON object with key-value format of attributes to create or update. For example:\n\n```json\n{\n \"stringKey\":\"value1\", \n \"booleanKey\":true, \n \"doubleKey\":42.0, \n \"longKey\":73, \n \"jsonKey\": {\n    \"someNumber\": 42,\n    \"someArray\": [1,2,3],\n    \"someNestedObject\": {\"key\": \"value\"}\n }\n}\n```\nReferencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save entity attributes (saveEntityAttributesV1)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 3
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'."
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the json object. For example, '{\"key\":\"value\"}'. See API call description for more details.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "com.fasterxml.jackson.databind.JsonNode" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope", "request" ],
  "id" : 21611,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveEntityAttributesV2",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/attributes/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request or invalid attributes scope provided."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Attribute from the request was created or updated. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED', and also sends event msg to the rule engine with msg type 'ATTRIBUTES_UPDATED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to save entity attributes for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about entity attributes updates with action type 'ATTRIBUTES_UPDATED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or updates the entity attributes based on Entity Id and the specified attribute scope.  List of possible attribute scopes depends on the entity type: \n\n * SERVER_SCOPE - supported for all entity types;\n * CLIENT_SCOPE - supported for devices;\n * SHARED_SCOPE - supported for devices. \n\nThe request payload is a JSON object with key-value format of attributes to create or update. For example:\n\n```json\n{\n \"stringKey\":\"value1\", \n \"booleanKey\":true, \n \"doubleKey\":42.0, \n \"longKey\":73, \n \"jsonKey\": {\n    \"someNumber\": 42,\n    \"someArray\": [1,2,3],\n    \"someNestedObject\": {\"key\": \"value\"}\n }\n}\n```\nReferencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save entity attributes (saveEntityAttributesV2)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 3
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the json object. For example, '{\"key\":\"value\"}'. See API call description for more details.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "com.fasterxml.jackson.databind.JsonNode" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope", "request" ],
  "id" : 21612,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveEntityTelemetry",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/timeseries/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request"
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Timeseries from the request was created or updated. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to save entity timeseries for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or updates the entity time-series data based on the Entity Id and request payload.The request payload is a JSON document with three possible formats:\n\nSimple format without timestamp. In such a case, current server time will be used: \n\n```json\n{\"temperature\": 26}\n```\n\n Single JSON object with timestamp: \n\n```json\n{\"ts\":1634712287000,\"values\":{\"temperature\":26, \"humidity\":87}}\n```\n\n JSON array with timestamps: \n\n```json\n[{\"ts\":1634712287000,\"values\":{\"temperature\":26, \"humidity\":87}}, {\"ts\":1634712588000,\"values\":{\"temperature\":25, \"humidity\":88}}]\n```\n\n The scope parameter is not used in the API call implementation but should be specified whatever value because it is used as a path variable. Referencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save or update time-series data (saveEntityTelemetry)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 3
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "ANY",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Value is deprecated, reserved for backward compatibility and not used in the API call implementation. Specify any scope for compatibility",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "A JSON with the telemetry values. See API call description for more details.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope", "requestBody" ],
  "id" : 21613,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveEntityTelemetryWithTTL",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/timeseries/{scope}/{ttl}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Invalid structure of the request"
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Timeseries from the request was created or updated. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to save entity timeseries for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about entity timeseries updates with action type 'TIMESERIES_UPDATED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Creates or updates the entity time-series data based on the Entity Id and request payload.The request payload is a JSON document with three possible formats:\n\nSimple format without timestamp. In such a case, current server time will be used: \n\n```json\n{\"temperature\": 26}\n```\n\n Single JSON object with timestamp: \n\n```json\n{\"ts\":1634712287000,\"values\":{\"temperature\":26, \"humidity\":87}}\n```\n\n JSON array with timestamps: \n\n```json\n[{\"ts\":1634712287000,\"values\":{\"temperature\":26, \"humidity\":87}}, {\"ts\":1634712588000,\"values\":{\"temperature\":25, \"humidity\":88}}]\n```\n\n The scope parameter is not used in the API call implementation but should be specified whatever value because it is used as a path variable. \n\nThe ttl parameter takes affect only in case of Cassandra DB.Referencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save or update time-series data with TTL (saveEntityTelemetryWithTTL)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 4
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "ttl"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "ANY",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Value is deprecated, reserved for backward compatibility and not used in the API call implementation. Specify any scope for compatibility",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "A long value representing TTL (Time to Live) parameter.",
      "required" : 1
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "value" : "A JSON with the telemetry values. See API call description for more details.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope", "ttl", "requestBody" ],
  "id" : 21614,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteEntityTimeseries",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/timeseries/delete"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "defaultValue" : "false",
      "name" : "deleteAllDataForKeys",
      "index" : 3,
      "type" : "java.lang.String"
    }, {
      "name" : "keys",
      "index" : 2,
      "type" : "java.lang.String"
    }, {
      "name" : "startTs",
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "name" : "endTs",
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "defaultValue" : "false",
      "name" : "rewriteLatestIfDeleted",
      "index" : 6,
      "type" : "java.lang.String"
    } ],
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Platform returns a bad request in case if keys list is empty or start and end timestamp values is empty when deleteAllDataForKeys is set to false."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Timeseries for the selected keys in the request was removed. Platform creates an audit log event about entity timeseries removal with action type 'TIMESERIES_DELETED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to delete entity timeseries for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about entity timeseries removal with action type 'TIMESERIES_DELETED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Delete time-series for selected entity based on entity id, entity type and keys. Use 'deleteAllDataForKeys' to delete all time-series data. Use 'startTs' and 'endTs' to specify time-range instead.  Use 'rewriteLatestIfDeleted' to rewrite latest value (stored in separate table for performance) after deletion of the time range. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Delete entity time-series data (deleteEntityTimeseries)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the comma-separated list of telemetry keys. If keys are not selected, the result will return all latest timeseries. For example, 'temperature,humidity'.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "A boolean value to specify if should be deleted all data for selected keys or only data that are in the selected time range."
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "A long value representing the start timestamp of removal time range in milliseconds."
    }, {
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "A long value representing the end timestamp of removal time range in milliseconds."
    }, {
      "index" : 6,
      "type" : "java.lang.String",
      "value" : "If the parameter is set to true, the latest telemetry will be rewritten in case that current latest value was removed, otherwise, in case that parameter is set to false the new latest value will not set."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "boolean", "java.lang.Long", "java.lang.Long", "boolean" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "keysStr", "deleteAllDataForKeys", "startTs", "endTs", "rewriteLatestIfDeleted" ],
  "id" : 21615,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteDeviceAttributes",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/{deviceId}/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "keys",
      "index" : 2,
      "type" : "java.lang.String"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Platform returns a bad request in case if keys or scope are not specified."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Device attributes was removed for the selected keys in the request. Platform creates an audit log event about device attributes removal with action type 'ATTRIBUTES_DELETED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to delete device attributes for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about device attributes removal with action type 'ATTRIBUTES_DELETED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Delete device attributes using provided Device Id, scope and a list of keys. Referencing a non-existing Device Id will cause an error\n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Delete device attributes (deleteDeviceAttributes)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "scope"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceId"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'.",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the device id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceIdStr", "scope", "keysStr" ],
  "id" : 21617,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteEntityAttributes",
  "namespce" : "org.thingsboard.server.controller.TelemetryController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/{entityType}/{entityId}/{scope}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "name" : "keys",
      "index" : 3,
      "type" : "java.lang.String"
    },
    "Lio/swagger/annotations/ApiResponses;" : {
      "value" : [ {
        "code" : 400,
        "type" : "java.lang.Integer",
        "message" : "Platform returns a bad request in case if keys or scope are not specified."
      }, {
        "code" : 200,
        "type" : "java.lang.Integer",
        "message" : "Entity attributes was removed for the selected keys in the request. Platform creates an audit log event about entity attributes removal with action type 'ATTRIBUTES_DELETED'."
      }, {
        "code" : 401,
        "type" : "java.lang.Integer",
        "message" : "User is not authorized to delete entity attributes for selected entity. Most likely, User belongs to different Customer or Tenant."
      }, {
        "code" : 500,
        "type" : "java.lang.Integer",
        "message" : "The exception was thrown during processing the request. Platform creates an audit log event about entity attributes removal with action type 'ATTRIBUTES_DELETED' that includes an error stacktrace."
      } ]
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Delete entity attributes using provided Entity Id, scope and a list of keys. Referencing a non-existing entity Id or invalid entity type will cause an error. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Delete entity attributes (deleteEntityAttributes)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "entityId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "entityType"
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "scope"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "defaultValue" : "DEVICE",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the entity type. For example, 'DEVICE'",
      "required" : 1
    }, {
      "allowableValues" : "SERVER_SCOPE, CLIENT_SCOPE, SHARED_SCOPE",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "A string value representing the attributes scope. For example, 'SERVER_SCOPE'.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the comma-separated list of attributes keys. For example, 'active,inactivityAlarmTime'.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "entityType", "entityIdStr", "scope", "keysStr" ],
  "id" : 21618,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.TelemetryController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/plugins/telemetry"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantById",
  "namespce" : "org.thingsboard.server.controller.TenantController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/tenant/{tenantId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Tenant object based on the provided Tenant Id. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant (getTenantById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantId" ],
  "id" : 21778,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Tenant",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantInfoById",
  "namespce" : "org.thingsboard.server.controller.TenantController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/tenant/info/{tenantId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Tenant Info object based on the provided Tenant Id. The Tenant Info object extends regular Tenant object and includes Tenant Profile name. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Info (getTenantInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantId" ],
  "id" : 21779,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TenantInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveTenant",
  "namespce" : "org.thingsboard.server.controller.TenantController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/tenant"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/softauto/annotations/Random;" : {
      "index" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Tenant. When creating tenant, platform generates Tenant Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). Default Rule Chain and Device profile are also generated for the new tenants automatically. The newly created Tenant Id will be present in the response. Specify existing Tenant Id id to update the Tenant. Referencing non-existing Tenant Id will cause 'Not Found' error.\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create Or update Tenant (saveTenant)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the tenant."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.Tenant" ],
  "argumentsNames" : [ "tenant" ],
  "id" : 21780,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.Tenant",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteTenant",
  "namespce" : "org.thingsboard.server.controller.TenantController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/tenant/{tenantId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the tenant, it's customers, rule chains, devices and all other related entities. Referencing non-existing tenant Id will cause an error.\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete Tenant (deleteTenant)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantId" ],
  "id" : 21781,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenants",
  "namespce" : "org.thingsboard.server.controller.TenantController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenants"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of tenants registered in the platform. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenants (getTenants)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the tenant name."
    }, {
      "allowableValues" : "createdTime, title, email, country, state, city, address, address2, zip, phone, email",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21782,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantInfos",
  "namespce" : "org.thingsboard.server.controller.TenantController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenantInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of tenant info objects registered in the platform. The Tenant Info object extends regular Tenant object and includes Tenant Profile name. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenants Info (getTenants)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the tenant name."
    }, {
      "allowableValues" : "createdTime, tenantProfileName, title, email, country, state, city, address, address2, zip, phone, email",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21783,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.TenantController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantProfileById",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/tenantProfile/{tenantProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Tenant Profile object based on the provided Tenant Profile Id. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Profile (getTenantProfileById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantProfileId" ],
  "id" : 21786,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TenantProfile",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantProfileInfoById",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/tenantProfileInfo/{tenantProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the Tenant Profile Info object based on the provided Tenant Profile Id. Tenant Profile Info is a lightweight object that contains only id and name of the profile. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Profile Info (getTenantProfileInfoById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantProfileId" ],
  "id" : 21787,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDefaultTenantProfileInfo",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/tenantProfileInfo/default"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the default Tenant Profile Info object based. Tenant Profile Info is a lightweight object that contains only id and name of the profile. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get default Tenant Profile Info (getDefaultTenantProfileInfo)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21788,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.EntityInfo",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveTenantProfile",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/tenantProfile"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Tenant Profile. When creating tenant profile, platform generates Tenant Profile Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Tenant Profile Id will be present in the response. Specify existing Tenant Profile Id id to update the Tenant Profile. Referencing non-existing Tenant Profile Id will cause 'Not Found' error. \n\nUpdate of the tenant profile configuration will cause immediate recalculation of API limits for all affected Tenants. \n\nThe **'profileData'** object is the part of Tenant Profile that defines API limits and Rate limits. \n\nYou have an ability to define maximum number of devices ('maxDevice'), assets ('maxAssets') and other entities. You may also define maximum number of messages to be processed per month ('maxTransportMessages', 'maxREExecutions', etc). The '*RateLimit' defines the rate limits using simple syntax. For example, '1000:1,20000:60' means up to 1000 events per second but no more than 20000 event per minute. Let's review the example of tenant profile data below: \n\n```json\n{\n  \"name\": \"Default\",\n  \"description\": \"Default tenant profile\",\n  \"isolatedTbCore\": false,\n  \"isolatedTbRuleEngine\": false,\n  \"profileData\": {\n    \"configuration\": {\n      \"type\": \"DEFAULT\",\n      \"maxDevices\": 0,\n      \"maxAssets\": 0,\n      \"maxCustomers\": 0,\n      \"maxUsers\": 0,\n      \"maxDashboards\": 0,\n      \"maxRuleChains\": 0,\n      \"maxResourcesInBytes\": 0,\n      \"maxOtaPackagesInBytes\": 0,\n      \"transportTenantMsgRateLimit\": \"1000:1,20000:60\",\n      \"transportTenantTelemetryMsgRateLimit\": \"1000:1,20000:60\",\n      \"transportTenantTelemetryDataPointsRateLimit\": \"1000:1,20000:60\",\n      \"transportDeviceMsgRateLimit\": \"20:1,600:60\",\n      \"transportDeviceTelemetryMsgRateLimit\": \"20:1,600:60\",\n      \"transportDeviceTelemetryDataPointsRateLimit\": \"20:1,600:60\",\n      \"maxTransportMessages\": 10000000,\n      \"maxTransportDataPoints\": 10000000,\n      \"maxREExecutions\": 4000000,\n      \"maxJSExecutions\": 5000000,\n      \"maxDPStorageDays\": 0,\n      \"maxRuleNodeExecutionsPerMessage\": 50,\n      \"maxEmails\": 0,\n      \"maxSms\": 0,\n      \"maxCreatedAlarms\": 1000,\n      \"defaultStorageTtlDays\": 0,\n      \"alarmsTtlDays\": 0,\n      \"rpcTtlDays\": 0,\n      \"warnThreshold\": 0\n    }\n  },\n  \"default\": true\n}\n```\n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create Or update Tenant Profile (saveTenantProfile)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A JSON value representing the tenant profile."
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.TenantProfile" ],
  "argumentsNames" : [ "tenantProfile" ],
  "id" : 21789,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TenantProfile",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteTenantProfile",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/tenantProfile/{tenantProfileId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the tenant profile. Referencing non-existing tenant profile Id will cause an error. Referencing profile that is used by the tenants will cause an error. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete Tenant Profile (deleteTenantProfile)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantProfileId" ],
  "id" : 21790,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setDefaultTenantProfile",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/tenantProfile/{tenantProfileId}/default"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Makes specified tenant profile to be default. Referencing non-existing tenant profile Id will cause an error. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Make tenant profile default (setDefaultTenantProfile)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantProfileId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the tenant profile id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strTenantProfileId" ],
  "id" : 21791,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.TenantProfile",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantProfiles",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenantProfiles"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of tenant profiles registered in the platform. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Profiles (getTenantProfiles)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the tenant profile name."
    }, {
      "allowableValues" : "createdTime, name, description, isDefault",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21792,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantProfileInfos",
  "namespce" : "org.thingsboard.server.controller.TenantProfileController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenantProfileInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of tenant profile info objects registered in the platform. Tenant Profile Info is a lightweight object that contains only id and name of the profile. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Profiles Info (getTenantProfileInfos)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the tenant profile name."
    }, {
      "allowableValues" : "id, name",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21793,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.TenantProfileController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getHelpBaseUrl",
  "namespce" : "org.thingsboard.server.controller.UiSettingsController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/uiSettings/helpBaseUrl"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get UI help base url used to fetch help assets. The actual value of the base url is configurable in the system configuration file.",
      "type" : "java.lang.String",
      "value" : "Get UI help base url (getHelpBaseUrl)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21796,
  "type" : "method",
  "returnType" : "java.lang.String",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.UiSettingsController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getUserById",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/user/{userId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Fetch the User object based on the provided User Id. If the user has the authority of 'SYS_ADMIN', the server does not perform additional checks. If the user has the authority of 'TENANT_ADMIN', the server checks that the requested user is owned by the same tenant. If the user has the authority of 'CUSTOMER_USER', the server checks that the requested user is owned by the same customer.",
      "type" : "java.lang.String",
      "value" : "Get User (getUserById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "userId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strUserId" ],
  "id" : 21797,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.User",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "isUserTokenAccessEnabled",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/user/tokenAccessEnabled"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Checks that the system is configured to allow administrators to impersonate themself as other users. If the user who performs the request has the authority of 'SYS_ADMIN', it is possible to login as any tenant administrator. If the user who performs the request has the authority of 'TENANT_ADMIN', it is possible to login as any customer user. ",
      "type" : "java.lang.String",
      "value" : "Check Token Access Enabled (isUserTokenAccessEnabled)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21798,
  "type" : "method",
  "returnType" : "boolean",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getUserToken",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/user/{userId}/token"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns the token of the User based on the provided User Id. If the user who performs the request has the authority of 'SYS_ADMIN', it is possible to get the token of any tenant administrator. If the user who performs the request has the authority of 'TENANT_ADMIN', it is possible to get the token of any customer user that belongs to the same tenant. ",
      "type" : "java.lang.String",
      "value" : "Get User Token (getUserToken)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "userId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strUserId" ],
  "id" : 21799,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.security.model.JwtTokenPair",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveUser",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/user"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "defaultValue" : "true",
      "index" : 1,
      "type" : "java.lang.String",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the User. When creating user, platform generates User Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created User Id will be present in the response. Specify existing User Id to update the device. Referencing non-existing User Id will cause 'Not Found' error.\n\nDevice email is unique for entire platform setup.",
      "type" : "java.lang.String",
      "value" : "Save Or update User (saveUser)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "defaultValue" : "true",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Send activation email (or use activation link)"
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the User.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.User", "boolean", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "user", "sendActivationMail", "request" ],
  "id" : 21800,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.User",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "sendActivationEmail",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/user/sendActivationMail"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "email"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Force send the activation email to the user. Useful to resend the email if user has accidentally deleted it. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Send or re-send the activation email"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Email of the user",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "email", "request" ],
  "id" : 21801,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getActivationLink",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "text/plain",
      "type" : "java.lang.String",
      "value" : "/user/{userId}/activationLink"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the activation link for the user. The base url for activation link is configurable in the general settings of system administrator. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get the activation link (getActivationLink)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "userId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "strUserId", "request" ],
  "id" : 21802,
  "type" : "method",
  "returnType" : "java.lang.String",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteUser",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/user/{userId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the User, it's credentials and all the relations (from and to the User). Referencing non-existing User Id will cause an error. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete User (deleteUser)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "userId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strUserId" ],
  "id" : 21803,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getUsers",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/users"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of users owned by tenant or customer. The scope depends on authority of the user that performs the request.You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' or 'CUSTOMER_USER' authority.",
      "type" : "java.lang.String",
      "value" : "Get Users (getUsers)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the user email."
    }, {
      "allowableValues" : "createdTime, firstName, lastName, email",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21804,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getTenantAdmins",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/tenant/{tenantId}/users"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('SYS_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of users owned by tenant. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'SYS_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Tenant Users (getTenantAdmins)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "tenantId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the tenant id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the user email."
    }, {
      "allowableValues" : "createdTime, firstName, lastName, email",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strTenantId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21805,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getCustomerUsers",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/customer/{customerId}/users"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAuthority('TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2
    }, {
      "index" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 5,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of users owned by customer. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Customer Users (getCustomerUsers)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "customerId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the customer id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the user email."
    }, {
      "allowableValues" : "createdTime, firstName, lastName, email",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 5,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "strCustomerId", "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21806,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "setUserCredentialsEnabled",
  "namespce" : "org.thingsboard.server.controller.UserController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/user/{userId}/userCredentialsEnabled"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "defaultValue" : "true",
      "index" : 1,
      "type" : "java.lang.String",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Enables or Disables user credentials. Useful when you would like to block user account without deleting it. You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for users with 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Enable/Disable User credentials (setUserCredentialsEnabled)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "userId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "defaultValue" : "true",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Disable (\"true\") or enable (\"false\") the credentials."
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "A string value representing the user id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'"
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "boolean" ],
  "argumentsNames" : [ "strUserId", "userCredentialsEnabled" ],
  "id" : 21807,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.UserController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getWidgetsBundleById",
  "namespce" : "org.thingsboard.server.controller.WidgetsBundleController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/widgetsBundle/{widgetsBundleId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Widget Bundle based on the provided Widget Bundle Id. Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case. \n\nAvailable for any authorized user. ",
      "type" : "java.lang.String",
      "value" : "Get Widget Bundle (getWidgetsBundleById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "widgetsBundleId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the widget bundle id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strWidgetsBundleId" ],
  "id" : 21810,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.widget.WidgetsBundle",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveWidgetsBundle",
  "namespce" : "org.thingsboard.server.controller.WidgetsBundleController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/widgetsBundle"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Widget Bundle. Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case.  When creating the bundle, platform generates Widget Bundle Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Widget Bundle Id will be present in the response. Specify existing Widget Bundle id to update the Widget Bundle. Referencing non-existing Widget Bundle Id will cause 'Not Found' error.\n\nWidget Bundle alias is unique in the scope of tenant. Special Tenant Id '13814000-1dd2-11b2-8080-808080808080' is automatically used if the create bundle request is sent by user with 'SYS_ADMIN' authority.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create Or Update Widget Bundle (saveWidgetsBundle)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the Widget Bundle.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.widget.WidgetsBundle" ],
  "argumentsNames" : [ "widgetsBundle" ],
  "id" : 21811,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.widget.WidgetsBundle",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteWidgetsBundle",
  "namespce" : "org.thingsboard.server.controller.WidgetsBundleController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/widgetsBundle/{widgetsBundleId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the widget bundle. Referencing non-existing Widget Bundle Id will cause an error.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete widgets bundle (deleteWidgetsBundle)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "widgetsBundleId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the widget bundle id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strWidgetsBundleId" ],
  "id" : 21812,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getWidgetsBundles",
  "namespce" : "org.thingsboard.server.controller.WidgetsBundleController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "page", "pageSize" ],
      "type" : "java.lang.Enum",
      "value" : "/widgetsBundles"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 3,
      "type" : "java.lang.Integer",
      "required" : 0
    }, {
      "index" : 4,
      "type" : "java.lang.Integer",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns a page of Widget Bundle objects available for current user. Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case.  You can specify parameters to filter the results. The result is wrapped with PageData object that allows you to iterate over result set using pagination. See the 'Model' tab of the Response Class for more details. \n\nAvailable for any authorized user. ",
      "type" : "java.lang.String",
      "value" : "Get Widget Bundles (getWidgetsBundles)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Sequence number of page starting from 0",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "Maximum amount of entities in a one page",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "The case insensitive 'startsWith' filter based on the widget bundle title."
    }, {
      "allowableValues" : "createdTime, title, tenantId",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Property of entity to sort by"
    }, {
      "allowableValues" : "ASC, DESC",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Sort order. ASC (ASCENDING) or DESC (DESCENDING)"
    } ]
  },
  "parametersTypes" : [ "int", "int", "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "pageSize", "page", "textSearch", "sortProperty", "sortOrder" ],
  "id" : 21813,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.page.PageData",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getWidgetsBundles",
  "namespce" : "org.thingsboard.server.controller.WidgetsBundleController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/widgetsBundles"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns an array of Widget Bundle objects that are available for current user.Widget Bundle represents a group(bundle) of widgets. Widgets are grouped into bundle by type or use case.  \n\nAvailable for any authorized user. ",
      "type" : "java.lang.String",
      "value" : "Get all Widget Bundles (getWidgetsBundles)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 21814,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.WidgetsBundleController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getWidgetTypeById",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/widgetType/{widgetTypeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Widget Type Details based on the provided Widget Type Id. Widget Type Details extend Widget Type and add image and description properties. Those properties are useful to edit the Widget Type but they are not required for Dashboard rendering. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get Widget Type Details (getWidgetTypeById)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "widgetTypeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the widget type id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strWidgetTypeId" ],
  "id" : 21816,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.widget.WidgetTypeDetails",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "saveWidgetType",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/widgetType"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Create or update the Widget Type. Widget Type represents the template for widget creation. Widget Type and Widget are similar to class and object in OOP theory. When creating the Widget Type, platform generates Widget Type Id as [time-based UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_1_(date-time_and_MAC_address)). The newly created Widget Type Id will be present in the response. Specify existing Widget Type id to update the Widget Type. Referencing non-existing Widget Type Id will cause 'Not Found' error.\n\nWidget Type alias is unique in the scope of Widget Bundle. Special Tenant Id '13814000-1dd2-11b2-8080-808080808080' is automatically used if the create request is sent by user with 'SYS_ADMIN' authority.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Create Or Update Widget Type (saveWidgetType)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A JSON value representing the Widget Type Details.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "org.thingsboard.server.common.data.widget.WidgetTypeDetails" ],
  "argumentsNames" : [ "widgetTypeDetails" ],
  "id" : 21817,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.widget.WidgetTypeDetails",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "deleteWidgetType",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "DELETE",
      "type" : "java.lang.Enum",
      "value" : "/widgetType/{widgetTypeId}"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Deletes the  Widget Type. Referencing non-existing Widget Type Id will cause an error.\n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Delete widget type (deleteWidgetType)"
    },
    "Lorg/springframework/web/bind/annotation/ResponseStatus;" : {
      "type" : "java.lang.Enum",
      "value" : "OK"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "widgetTypeId"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "A string value representing the widget type id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "strWidgetTypeId" ],
  "id" : 21818,
  "type" : "method",
  "returnType" : "void",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getBundleWidgetTypes",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "bundleAlias", "isSystem" ],
      "type" : "java.lang.Enum",
      "value" : "/widgetTypes"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns an array of Widget Type objects that belong to specified Widget Bundle.Widget Type represents the template for widget creation. Widget Type and Widget are similar to class and object in OOP theory. \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get all Widget types for specified Bundle (getBundleWidgetTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Widget Bundle alias",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "System or Tenant",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "boolean", "java.lang.String" ],
  "argumentsNames" : [ "isSystem", "bundleAlias" ],
  "id" : 21819,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getBundleWidgetTypesDetails",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "bundleAlias", "isSystem" ],
      "type" : "java.lang.Enum",
      "value" : "/widgetTypesDetails"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns an array of Widget Type Details objects that belong to specified Widget Bundle.Widget Type Details extend Widget Type and add image and description properties. Those properties are useful to edit the Widget Type but they are not required for Dashboard rendering.  \n\nAvailable for users with 'SYS_ADMIN' or 'TENANT_ADMIN' authority.",
      "type" : "java.lang.String",
      "value" : "Get all Widget types details for specified Bundle (getBundleWidgetTypes)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Widget Bundle alias",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "System or Tenant",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "boolean", "java.lang.String" ],
  "argumentsNames" : [ "isSystem", "bundleAlias" ],
  "id" : 21820,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getBundleWidgetTypesInfos",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "bundleAlias", "isSystem" ],
      "type" : "java.lang.Enum",
      "value" : "/widgetTypesInfos"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Widget Type Info objects based on the provided parameters. Widget Type Info is a lightweight object that represents Widget Type but does not contain the heavyweight widget descriptor JSON\n\nAvailable for any authorized user. ",
      "type" : "java.lang.String",
      "value" : "Get Widget Type Info objects (getBundleWidgetTypesInfos)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Widget Bundle alias",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "System or Tenant",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "boolean", "java.lang.String" ],
  "argumentsNames" : [ "isSystem", "bundleAlias" ],
  "id" : 21821,
  "type" : "method",
  "returnType" : "java.util.List",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getWidgetType",
  "namespce" : "org.thingsboard.server.controller.WidgetTypeController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "params" : [ "bundleAlias", "isSystem", "alias" ],
      "type" : "java.lang.Enum",
      "value" : "/widgetType"
    },
    "Lorg/springframework/security/access/prepost/PreAuthorize;" : {
      "type" : "java.lang.String",
      "value" : "hasAnyAuthority('SYS_ADMIN', 'TENANT_ADMIN', 'CUSTOMER_USER')"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 1
    }, {
      "index" : 0
    }, {
      "index" : 2
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Get the Widget Type based on the provided parameters. Widget Type represents the template for widget creation. Widget Type and Widget are similar to class and object in OOP theory.\n\nAvailable for any authorized user. ",
      "type" : "java.lang.String",
      "value" : "Get Widget Type (getWidgetType)"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "Lorg/springframework/web/bind/annotation/ResponseBody;" : { },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Widget Bundle alias",
      "required" : 1
    }, {
      "index" : 0,
      "type" : "java.lang.Integer",
      "value" : "System or Tenant",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Widget Type alias",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "boolean", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "isSystem", "bundleAlias", "alias" ],
  "id" : 21822,
  "type" : "method",
  "returnType" : "org.thingsboard.server.common.data.widget.WidgetType",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.controller.BaseController" : {
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    },
    "org.thingsboard.server.controller.WidgetTypeController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/thingsboard/server/queue/util/TbCoreComponent;" : { }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "<init>",
  "namespce" : "org.thingsboard.server.service.security.auth.rest.LoginRequest",
  "annotations" : {
    "constructor" : {
      "Lcom/fasterxml/jackson/annotation/JsonCreator;" : { },
      "Lorg/softauto/annotations/DataForTesting;" : [ {
        "index" : 1,
        "type" : "java.lang.String",
        "value" : "sysadmin"
      }, {
        "index" : 0,
        "type" : "java.lang.String",
        "value" : "sysadmin@thingsboard.org"
      } ],
      "Lorg/softauto/annotations/ApiForTesting;" : {
        "after" : {
          "type" : "java.util.HashMap"
        }
      },
      "Lcom/fasterxml/jackson/annotation/JsonProperty;" : [ {
        "index" : 1,
        "type" : "java.lang.String",
        "value" : "password"
      }, {
        "index" : 0,
        "type" : "java.lang.String",
        "value" : "username"
      } ],
      "Lorg/softauto/jaxrs/annotations/JAXRS;" : {
        "path" : "/api/auth/login",
        "mapping" : "RequestBody",
        "method" : "POST",
        "response" : "java.util.HashMap",
        "produces" : "application/json",
        "type" : "java.lang.String",
        "consumes" : "application/json"
      }
    },
    "class" : {
      "Lio/swagger/annotations/ApiModel;" : { }
    }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "username", "password" ],
  "id" : 19019,
  "type" : "method",
  "returnType" : "org.thingsboard.server.service.security.auth.rest.LoginRequest",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getDeviceAttributes",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "/{deviceToken}/attributes"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "defaultValue" : "",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "sharedKeys",
      "required" : 0
    }, {
      "defaultValue" : "",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "clientKeys",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Returns all attributes that belong to device. Use optional 'clientKeys' and/or 'sharedKeys' parameter to return specific attributes. \n Example of the result: \n\n```json\n{\n \"stringKey\":\"value1\", \n \"booleanKey\":true, \n \"doubleKey\":42.0, \n \"longKey\":73, \n \"jsonKey\": {\n    \"someNumber\": 42,\n    \"someArray\": [1,2,3],\n    \"someNestedObject\": {\"key\": \"value\"}\n }\n}\n```\n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get attributes (getDeviceAttributes)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "defaultValue" : "state",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Comma separated key names for attribute with client scope",
      "required" : 1
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    }, {
      "defaultValue" : "configuration",
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "Comma separated key names for attribute with shared scope",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceToken", "clientKeys", "sharedKeys" ],
  "id" : 26826,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "postDeviceAttributes",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/attributes"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Post client attribute updates on behalf of device. \n Example of the request: \n\n```json\n{\n \"stringKey\":\"value1\", \n \"booleanKey\":true, \n \"doubleKey\":42.0, \n \"longKey\":73, \n \"jsonKey\": {\n    \"someNumber\": 42,\n    \"someArray\": [1,2,3],\n    \"someNestedObject\": {\"key\": \"value\"}\n }\n}\n```\n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Post attributes (postDeviceAttributes)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "JSON with attribute key-value pairs. See API call description for example."
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceToken", "json" ],
  "id" : 26827,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "postTelemetry",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/telemetry"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Post time-series data on behalf of device. \n Example of the request: The request payload is a JSON document with three possible formats:\n\nSimple format without timestamp. In such a case, current server time will be used: \n\n\n\n```json\n{\n \"stringKey\":\"value1\", \n \"booleanKey\":true, \n \"doubleKey\":42.0, \n \"longKey\":73, \n \"jsonKey\": {\n    \"someNumber\": 42,\n    \"someArray\": [1,2,3],\n    \"someNestedObject\": {\"key\": \"value\"}\n }\n}\n```\n\n\n\n Single JSON object with timestamp: \n\n\n\n```json\n{\"ts\":1634712287000,\"values\":{\"temperature\":26, \"humidity\":87}}\n```\n\n\n\n JSON array with timestamps: \n\n\n\n```json\n[\n{\"ts\":1634712287000,\"values\":{\"temperature\":26, \"humidity\":87}}, \n{\"ts\":1634712588000,\"values\":{\"temperature\":25, \"humidity\":88}}\n]\n```\n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Post time-series data (postTelemetry)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "javax.servlet.http.HttpServletRequest" ],
  "argumentsNames" : [ "deviceToken", "json", "request" ],
  "id" : 26828,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "claimDevice",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/claim"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Saves the information required for user to claim the device. See more info about claiming in the corresponding 'Claiming devices' platform documentation.\n Example of the request payload: \n\n```json\n{\"secretKey\":\"value\", \"durationMs\":60000}\n```\n\nNote: both 'secretKey' and 'durationMs' is optional parameters. In case the secretKey is not specified, the empty string as a default value is used. In case the durationMs is not specified, the system parameter device.claim.duration is used.\n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Save claiming information (claimDevice)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1,
      "type" : "java.lang.Integer",
      "required" : 0
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    }
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceToken", "json" ],
  "id" : 26829,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "subscribeToCommands",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "/{deviceToken}/rpc"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "defaultValue" : "0",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "timeout",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Subscribes to RPC commands using http long polling. Deprecated, since long polling is resource and network consuming. Consider using MQTT or CoAP protocol for light-weight real-time updates. \n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Subscribe to RPC commands (subscribeToCommands) (Deprecated)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Optional timeout of the long poll. Typically less then 60 seconds, since limited on the server side."
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "long" ],
  "argumentsNames" : [ "deviceToken", "timeout" ],
  "id" : 26830,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "replyToCommand",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/rpc/{requestId}"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Replies to server originated RPC command identified by 'requestId' parameter. The response is arbitrary JSON.\n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Reply to RPC commands (replyToCommand)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 2
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "requestId"
    }, {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    } ],
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "defaultValue" : "123",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "RPC request id from the incoming RPC request",
      "required" : 1
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Reply to the RPC request, JSON. For example: {\"status\":\"success\"}",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.Integer", "java.lang.String" ],
  "argumentsNames" : [ "deviceToken", "requestId", "json" ],
  "id" : 26831,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "postRpcRequest",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/rpc"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Send the RPC request to server. The request payload is a JSON document that contains 'method' and 'params'. For example:\n\n```json\n{\"method\": \"sumOnServer\", \"params\":{\"a\":2, \"b\":2}}\n```\n\nThe response contains arbitrary JSON with the RPC reply. For example: \n\n```json\n{\"result\": 4}\n```\n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Send the RPC command (postRpcRequest)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 1
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "The RPC request JSON",
      "required" : 1
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String" ],
  "argumentsNames" : [ "deviceToken", "json" ],
  "id" : 26832,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "subscribeToAttributes",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "/{deviceToken}/attributes/updates"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : {
      "defaultValue" : "0",
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "timeout",
      "required" : 0
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Subscribes to client and shared scope attribute updates using http long polling. Deprecated, since long polling is resource and network consuming. Consider using MQTT or CoAP protocol for light-weight real-time updates. \n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Subscribe to attribute updates (subscribeToAttributes) (Deprecated)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "Optional timeout of the long poll. Typically less then 60 seconds, since limited on the server side."
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "long" ],
  "argumentsNames" : [ "deviceToken", "timeout" ],
  "id" : 26833,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getFirmware",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/firmware"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "version"
    }, {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "title"
    }, {
      "defaultValue" : "0",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "size",
      "required" : 0
    }, {
      "defaultValue" : "0",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "chunk",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Downloads the current firmware package.When the platform initiates firmware update, it informs the device by updating the 'fw_title', 'fw_version', 'fw_checksum' and 'fw_checksum_algorithm' shared attributes.The 'fw_title' and 'fw_version' parameters must be supplied in this request to double-check that the firmware that device is downloading matches the firmware it expects to download. This is important, since the administrator may change the firmware assignment while device is downloading the firmware. \n\nOptional 'chunk' and 'size' parameters may be used to download the firmware in chunks. For example, device may request first 16 KB of firmware using 'chunk'=0 and 'size'=16384. Next 16KB using 'chunk'=1 and 'size'=16384. The last chunk should have less bytes then requested using 'size' parameter. \n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Device Firmware (getFirmware)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Title of the firmware, corresponds to the value of 'fw_title' attribute.",
      "required" : 1
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Version of the firmware, corresponds to the value of 'fw_version' attribute.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Size of the chunk. Optional. Omit to download the entire file without chunks."
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Index of the chunk. Optional. Omit to download the entire file without chunks."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "int", "int" ],
  "argumentsNames" : [ "deviceToken", "title", "version", "size", "chunk" ],
  "id" : 26834,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "getSoftware",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "GET",
      "type" : "java.lang.Enum",
      "value" : "/{deviceToken}/software"
    },
    "Lorg/springframework/web/bind/annotation/RequestParam;" : [ {
      "index" : 2,
      "type" : "java.lang.String",
      "value" : "version"
    }, {
      "index" : 1,
      "type" : "java.lang.String",
      "value" : "title"
    }, {
      "defaultValue" : "0",
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "size",
      "required" : 0
    }, {
      "defaultValue" : "0",
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "chunk",
      "required" : 0
    } ],
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Downloads the current software package.When the platform initiates software update, it informs the device by updating the 'sw_title', 'sw_version', 'sw_checksum' and 'sw_checksum_algorithm' shared attributes.The 'sw_title' and 'sw_version' parameters must be supplied in this request to double-check that the software that device is downloading matches the software it expects to download. This is important, since the administrator may change the software assignment while device is downloading the software. \n\nOptional 'chunk' and 'size' parameters may be used to download the software in chunks. For example, device may request first 16 KB of software using 'chunk'=0 and 'size'=16384. Next 16KB using 'chunk'=1 and 'size'=16384. The last chunk should have less bytes then requested using 'size' parameter. \n\nThe API call is designed to be used by device firmware and requires device access token ('deviceToken'). It is not recommended to use this API call by third-party scripts, rule-engine or platform widgets (use 'Telemetry Controller' instead).\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Get Device Software (getSoftware)"
    },
    "Lorg/springframework/web/bind/annotation/PathVariable;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "deviceToken"
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : [ {
      "index" : 1,
      "type" : "java.lang.Integer",
      "value" : "Title of the software, corresponds to the value of 'sw_title' attribute.",
      "required" : 1
    }, {
      "defaultValue" : "YOUR_DEVICE_ACCESS_TOKEN",
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "Your device access token.",
      "required" : 1
    }, {
      "index" : 2,
      "type" : "java.lang.Integer",
      "value" : "Version of the software, corresponds to the value of 'sw_version' attribute.",
      "required" : 1
    }, {
      "index" : 3,
      "type" : "java.lang.String",
      "value" : "Size of the chunk. Optional. Omit to download the entire file without using  chunks."
    }, {
      "index" : 4,
      "type" : "java.lang.String",
      "value" : "Index of the chunk. Optional. Omit to download the entire file without using chunks."
    } ]
  },
  "parametersTypes" : [ "java.lang.String", "java.lang.String", "java.lang.String", "int", "int" ],
  "argumentsNames" : [ "deviceToken", "title", "version", "size", "chunk" ],
  "id" : 26835,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : "provisionDevice",
  "namespce" : "org.thingsboard.server.transport.http.DeviceApiController",
  "annotations" : {
    "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
      "method" : "POST",
      "type" : "java.lang.Enum",
      "value" : "/provision"
    },
    "Lio/swagger/annotations/ApiOperation;" : {
      "notes" : "Exchange the provision request to the device credentials. See more info about provisioning in the corresponding 'Device provisioning' platform documentation.Requires valid JSON request with the following format: \n\n```json\n{\n  \"deviceName\": \"NEW_DEVICE_NAME\",\n  \"provisionDeviceKey\": \"u7piawkboq8v32dmcmpp\",\n  \"provisionDeviceSecret\": \"jpmwdn8ptlswmf4m29bw\"\n}\n```\n\nWhere 'deviceName' is the name of enw or existing device which depends on the provisioning strategy. The 'provisionDeviceKey' and 'provisionDeviceSecret' matches info configured in one of the existing device profiles. The result of the successful call is the JSON object that contains new credentials:\n\n```json\n{\n  \"credentialsType\":\"ACCESS_TOKEN\",\n  \"credentialsValue\":\"DEVICE_ACCESS_TOKEN\",\n  \"status\":\"SUCCESS\"\n}\n```\n\n",
      "produces" : "application/json",
      "type" : "java.lang.String",
      "value" : "Provision new device (provisionDevice)"
    },
    "Lorg/springframework/web/bind/annotation/RequestBody;" : {
      "index" : 0
    },
    "class" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    },
    "Lio/swagger/annotations/ApiParam;" : {
      "index" : 0,
      "type" : "java.lang.String",
      "value" : "JSON with provision request. See API call description for example."
    }
  },
  "parametersTypes" : [ "java.lang.String" ],
  "argumentsNames" : [ "json" ],
  "id" : 26836,
  "type" : "method",
  "returnType" : "org.springframework.web.context.request.async.DeferredResult",
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
}, {
  "name" : null,
  "namespce" : null,
  "annotations" : {
    "org.thingsboard.server.transport.http.DeviceApiController" : {
      "Lorg/springframework/web/bind/annotation/RequestMapping;" : {
        "type" : "java.lang.String",
        "value" : "/api/v1"
      },
      "Lorg/springframework/web/bind/annotation/RestController;" : { },
      "Lorg/springframework/boot/autoconfigure/condition/ConditionalOnExpression;" : {
        "type" : "java.lang.String",
        "value" : "'${service.type:null}'=='tb-transport' || ('${service.type:null}'=='monolith' && '${transport.api_enabled:true}'=='true' && '${transport.http.enabled}'=='true')"
      }
    }
  },
  "parametersTypes" : [ ],
  "argumentsNames" : [ ],
  "id" : 0,
  "type" : "clazz",
  "returnType" : null,
  "classInfo" : null,
  "modifier" : 0,
  "childes" : [ ]
} ]